2023年7月21日09点35分：完成lbAgent的udp模块和tcp模块。udp模块负责接收客户端的包，tcp模块负责和mysql代理服务器进行通信
21点32分完全错误了，tcp模块只负责定时的将数据库的数据搬到服务端，udp只负责查表响应，根本不是，udp把包发给tcp，然后tcp再发送给mysql代理服务器
流媒体或者chat服务器倒是真的需要tcp来转发消息的，因为总不能把所有的用户数据全都加载到这里把

23点19分上面考虑的并不对，9点半到现在这一段时间想的是建立一个map，每个map对应的值对应一个set，然后这个set的值是一个结构体，然后自定义规则进行排序，每次请求客户端发过来一个modid，我都返回最前面的，然后如果返回结果，那么就对这个map重新排序，但是突然之间意识到我要考虑流媒体房间的呀，不是说，我第一个人看电影a我就分配一个服务器1，第二个人看电影a我就分配服务器2，显然不合理，后来一直想，发现需要客户端先要获得观看列表吧，总不能凭空播放吧，所以暂时考虑弄个登录页面，如果不登录，那就给一个推荐列表过去，然后数据库那边有一个文件对应的id，这个id在返回给客户端时一起返回，然后客户端如果点击某个电影，会发送一个modid（是流媒体标识）和文件id，（如果单纯聊天，负载均衡服务器那边也应该有对应房间），然后服务器这边除了会有之前讲的map外，还应该有一个；流媒体房间map，这个key值就为文件id，value是一个set，set中装填了若干个服务器（这若干个服务器提供播放该文件），当前第一个应该是最应该被发给客户端的，当有人下线，客户端应该发送一个离开消息给负载均衡服务器，然后服务器更新set，如果set中的负荷都过重，那么应该从之前想的map中（就是从数据库定时更新的那个，（这个map也应该维护一个同样的负载情况）），选取当前modid对应的第一个set放到房间map中，如果人员不断减少，那么当某一个房间中某个服务器人数减到为0时（当每台服务器都减少的差不多的适合，为啥不合并呢，因为已经建立了连接，如果是udp的话，那么应该可以，不过没必要，因为当这台服务器人数减少时，可以同时分给其他房间），应该从房间map中删去，如果set值空了，那么该房间应该删去
聊天房间同理，应该在负载均衡服务器维护一个map，（群聊房间应该同步到数据库中）（好友也是如此），当有人在线时，那么负载均衡服务器应该去建一个房间（key是群号，value是set，set值服务器地址？还是人的uid？）（如果一个人都没有，那么应该销毁这个房间，如果都有的话）

2023年7月22日08点13分，为了实现上述功能，决定重新写源文件（因为原来的文件注释太多了）

2023年7月23日，15点00分在进行通信的时候发现通信格式太错乱了，打算重新写protobuf的封装协议，一共分为三个文档，一个是客户端和负载均衡服务器的通信使用的数据格式，一个是客户端和服务器的数据格式（暂时不写），一个是服务器和负载均衡服务器的数据格式，还有一个是负载均衡服务器或者服务器和mysql的数据格式
，但是仔细想了一下，发现应该针对服务方设计数据格式，也就是如果你想请求我的协议，你就遵循我的服务，所以显然服务方有负负载均衡，mysql，和普通的服务器

2023年7月24日23点53分、实现了负载均衡服务器的基本功能，可以通过udp客户端请求一个基础服务器和流媒体服务器地址，并且支持10秒级别的同步数据库（服务器ip）（注意，更改了原来的proto协议（更见的分门别类），更改了router表的结构，修改了reactor的不能处理一个包中的多个请求的问题，）
下一个版本打算实现聊天服务器（这个可能需要配置protobuf消息类型，以及增加一张user表）（从这个版本开始，版本更新会在主目录同步，并且当前主要更新的哪个版本，也会在写完这个版本后，打包在主目录上，方便知道当前Movie_hub主要更新的是哪个模块）


再下一个版本打算实现客户端了
在下一个版本就是流媒体服务器了
（后续打算在主目录也进行版本更细了，因为可能这边的模块没开发完，需要先开发另外一个模块的功能）