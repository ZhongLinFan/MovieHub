// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysqlService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mysqlService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mysqlService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mysqlService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mysqlService_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[26]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mysqlService_2eproto;
namespace mysqlService {
class AddUserToGroupRequest;
struct AddUserToGroupRequestDefaultTypeInternal;
extern AddUserToGroupRequestDefaultTypeInternal _AddUserToGroupRequest_default_instance_;
class AddUserToGroupResponse;
struct AddUserToGroupResponseDefaultTypeInternal;
extern AddUserToGroupResponseDefaultTypeInternal _AddUserToGroupResponse_default_instance_;
class ColmPair;
struct ColmPairDefaultTypeInternal;
extern ColmPairDefaultTypeInternal _ColmPair_default_instance_;
class DelUserFromGroupRequest;
struct DelUserFromGroupRequestDefaultTypeInternal;
extern DelUserFromGroupRequestDefaultTypeInternal _DelUserFromGroupRequest_default_instance_;
class DelUserFromGroupResponse;
struct DelUserFromGroupResponseDefaultTypeInternal;
extern DelUserFromGroupResponseDefaultTypeInternal _DelUserFromGroupResponse_default_instance_;
class DeleteFavoriteRequest;
struct DeleteFavoriteRequestDefaultTypeInternal;
extern DeleteFavoriteRequestDefaultTypeInternal _DeleteFavoriteRequest_default_instance_;
class DeleteFriendRequest;
struct DeleteFriendRequestDefaultTypeInternal;
extern DeleteFriendRequestDefaultTypeInternal _DeleteFriendRequest_default_instance_;
class DeleteGroupRequest;
struct DeleteGroupRequestDefaultTypeInternal;
extern DeleteGroupRequestDefaultTypeInternal _DeleteGroupRequest_default_instance_;
class DeleteGroupResponse;
struct DeleteGroupResponseDefaultTypeInternal;
extern DeleteGroupResponseDefaultTypeInternal _DeleteGroupResponse_default_instance_;
class DeleteUserRequest;
struct DeleteUserRequestDefaultTypeInternal;
extern DeleteUserRequestDefaultTypeInternal _DeleteUserRequest_default_instance_;
class GetMovieInfoRequest;
struct GetMovieInfoRequestDefaultTypeInternal;
extern GetMovieInfoRequestDefaultTypeInternal _GetMovieInfoRequest_default_instance_;
class GetMovieInfoResponse;
struct GetMovieInfoResponseDefaultTypeInternal;
extern GetMovieInfoResponseDefaultTypeInternal _GetMovieInfoResponse_default_instance_;
class GetRouterRequest;
struct GetRouterRequestDefaultTypeInternal;
extern GetRouterRequestDefaultTypeInternal _GetRouterRequest_default_instance_;
class GetRouterResponse;
struct GetRouterResponseDefaultTypeInternal;
extern GetRouterResponseDefaultTypeInternal _GetRouterResponse_default_instance_;
class GetUserBaseRequest;
struct GetUserBaseRequestDefaultTypeInternal;
extern GetUserBaseRequestDefaultTypeInternal _GetUserBaseRequest_default_instance_;
class GetUserBaseResponse;
struct GetUserBaseResponseDefaultTypeInternal;
extern GetUserBaseResponseDefaultTypeInternal _GetUserBaseResponse_default_instance_;
class HostInfo;
struct HostInfoDefaultTypeInternal;
extern HostInfoDefaultTypeInternal _HostInfo_default_instance_;
class InsertFavoriteRequest;
struct InsertFavoriteRequestDefaultTypeInternal;
extern InsertFavoriteRequestDefaultTypeInternal _InsertFavoriteRequest_default_instance_;
class InsertFriendRequest;
struct InsertFriendRequestDefaultTypeInternal;
extern InsertFriendRequestDefaultTypeInternal _InsertFriendRequest_default_instance_;
class InsertUserRequest;
struct InsertUserRequestDefaultTypeInternal;
extern InsertUserRequestDefaultTypeInternal _InsertUserRequest_default_instance_;
class ModifyUserRequest;
struct ModifyUserRequestDefaultTypeInternal;
extern ModifyUserRequestDefaultTypeInternal _ModifyUserRequest_default_instance_;
class RegisterGroupRequest;
struct RegisterGroupRequestDefaultTypeInternal;
extern RegisterGroupRequestDefaultTypeInternal _RegisterGroupRequest_default_instance_;
class RegisterGroupResponse;
struct RegisterGroupResponseDefaultTypeInternal;
extern RegisterGroupResponseDefaultTypeInternal _RegisterGroupResponse_default_instance_;
class UpdateFavoriteResponse;
struct UpdateFavoriteResponseDefaultTypeInternal;
extern UpdateFavoriteResponseDefaultTypeInternal _UpdateFavoriteResponse_default_instance_;
class UpdateFriendResponse;
struct UpdateFriendResponseDefaultTypeInternal;
extern UpdateFriendResponseDefaultTypeInternal _UpdateFriendResponse_default_instance_;
class UpdateUserResponse;
struct UpdateUserResponseDefaultTypeInternal;
extern UpdateUserResponseDefaultTypeInternal _UpdateUserResponse_default_instance_;
}  // namespace mysqlService
PROTOBUF_NAMESPACE_OPEN
template<> ::mysqlService::AddUserToGroupRequest* Arena::CreateMaybeMessage<::mysqlService::AddUserToGroupRequest>(Arena*);
template<> ::mysqlService::AddUserToGroupResponse* Arena::CreateMaybeMessage<::mysqlService::AddUserToGroupResponse>(Arena*);
template<> ::mysqlService::ColmPair* Arena::CreateMaybeMessage<::mysqlService::ColmPair>(Arena*);
template<> ::mysqlService::DelUserFromGroupRequest* Arena::CreateMaybeMessage<::mysqlService::DelUserFromGroupRequest>(Arena*);
template<> ::mysqlService::DelUserFromGroupResponse* Arena::CreateMaybeMessage<::mysqlService::DelUserFromGroupResponse>(Arena*);
template<> ::mysqlService::DeleteFavoriteRequest* Arena::CreateMaybeMessage<::mysqlService::DeleteFavoriteRequest>(Arena*);
template<> ::mysqlService::DeleteFriendRequest* Arena::CreateMaybeMessage<::mysqlService::DeleteFriendRequest>(Arena*);
template<> ::mysqlService::DeleteGroupRequest* Arena::CreateMaybeMessage<::mysqlService::DeleteGroupRequest>(Arena*);
template<> ::mysqlService::DeleteGroupResponse* Arena::CreateMaybeMessage<::mysqlService::DeleteGroupResponse>(Arena*);
template<> ::mysqlService::DeleteUserRequest* Arena::CreateMaybeMessage<::mysqlService::DeleteUserRequest>(Arena*);
template<> ::mysqlService::GetMovieInfoRequest* Arena::CreateMaybeMessage<::mysqlService::GetMovieInfoRequest>(Arena*);
template<> ::mysqlService::GetMovieInfoResponse* Arena::CreateMaybeMessage<::mysqlService::GetMovieInfoResponse>(Arena*);
template<> ::mysqlService::GetRouterRequest* Arena::CreateMaybeMessage<::mysqlService::GetRouterRequest>(Arena*);
template<> ::mysqlService::GetRouterResponse* Arena::CreateMaybeMessage<::mysqlService::GetRouterResponse>(Arena*);
template<> ::mysqlService::GetUserBaseRequest* Arena::CreateMaybeMessage<::mysqlService::GetUserBaseRequest>(Arena*);
template<> ::mysqlService::GetUserBaseResponse* Arena::CreateMaybeMessage<::mysqlService::GetUserBaseResponse>(Arena*);
template<> ::mysqlService::HostInfo* Arena::CreateMaybeMessage<::mysqlService::HostInfo>(Arena*);
template<> ::mysqlService::InsertFavoriteRequest* Arena::CreateMaybeMessage<::mysqlService::InsertFavoriteRequest>(Arena*);
template<> ::mysqlService::InsertFriendRequest* Arena::CreateMaybeMessage<::mysqlService::InsertFriendRequest>(Arena*);
template<> ::mysqlService::InsertUserRequest* Arena::CreateMaybeMessage<::mysqlService::InsertUserRequest>(Arena*);
template<> ::mysqlService::ModifyUserRequest* Arena::CreateMaybeMessage<::mysqlService::ModifyUserRequest>(Arena*);
template<> ::mysqlService::RegisterGroupRequest* Arena::CreateMaybeMessage<::mysqlService::RegisterGroupRequest>(Arena*);
template<> ::mysqlService::RegisterGroupResponse* Arena::CreateMaybeMessage<::mysqlService::RegisterGroupResponse>(Arena*);
template<> ::mysqlService::UpdateFavoriteResponse* Arena::CreateMaybeMessage<::mysqlService::UpdateFavoriteResponse>(Arena*);
template<> ::mysqlService::UpdateFriendResponse* Arena::CreateMaybeMessage<::mysqlService::UpdateFriendResponse>(Arena*);
template<> ::mysqlService::UpdateUserResponse* Arena::CreateMaybeMessage<::mysqlService::UpdateUserResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mysqlService {

enum RouterID : int {
  ID_RouterUNKNOW = 0,
  ID_GetRouterRequest = 1,
  ID_GetRouterResponse = 2,
  RouterID_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RouterID_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RouterID_IsValid(int value);
constexpr RouterID RouterID_MIN = ID_RouterUNKNOW;
constexpr RouterID RouterID_MAX = ID_GetRouterResponse;
constexpr int RouterID_ARRAYSIZE = RouterID_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RouterID_descriptor();
template<typename T>
inline const std::string& RouterID_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RouterID>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RouterID_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RouterID_descriptor(), enum_t_value);
}
inline bool RouterID_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RouterID* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RouterID>(
    RouterID_descriptor(), name, value);
}
enum UsersID : int {
  ID_UsersUNKNOW = 0,
  ID_GetUserBaseRequest = 3,
  ID_GetUserBaseResponse = 4,
  ID_ModifyUserRequest = 5,
  ID_InsertUserRequest = 6,
  ID_DeleteUserRequest = 7,
  ID_UpdateUserResponse = 8,
  ID_GetUserFavoriteRequest = 9,
  ID_GetUserFavoriteResponse = 10,
  ID_InsertFavoriteRequest = 11,
  ID_DeleteFavoriteRequest = 12,
  ID_UpdateFavoriteResponse = 13,
  ID_GetFriendsRequest = 14,
  ID_GetFriendsResponse = 15,
  ID_InsertFriendRequest = 16,
  ID_DeleteFriendRequest = 17,
  ID_UpdateFriendResponse = 18,
  UsersID_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  UsersID_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool UsersID_IsValid(int value);
constexpr UsersID UsersID_MIN = ID_UsersUNKNOW;
constexpr UsersID UsersID_MAX = ID_UpdateFriendResponse;
constexpr int UsersID_ARRAYSIZE = UsersID_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UsersID_descriptor();
template<typename T>
inline const std::string& UsersID_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UsersID>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UsersID_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UsersID_descriptor(), enum_t_value);
}
inline bool UsersID_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, UsersID* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UsersID>(
    UsersID_descriptor(), name, value);
}
enum GroupID : int {
  ID_GroupUNKNOW = 0,
  ID_RegisterGroupRequest = 19,
  ID_RegisterGroupResponse = 20,
  ID_DeleteGroupRequest = 21,
  ID_DeleteGroupResponse = 22,
  ID_GetGroupMemberRequest = 23,
  ID_GetGroupMemberResponse = 24,
  ID_GetUserGroupsRequest = 25,
  ID_GetUserGroupsResponse = 26,
  ID_AddUserToGroupRequest = 27,
  ID_AddUserToGroupResponse = 28,
  ID_DelUserFromGroupRequest = 29,
  ID_DelUserFromGroupResponse = 30,
  GroupID_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  GroupID_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool GroupID_IsValid(int value);
constexpr GroupID GroupID_MIN = ID_GroupUNKNOW;
constexpr GroupID GroupID_MAX = ID_DelUserFromGroupResponse;
constexpr int GroupID_ARRAYSIZE = GroupID_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GroupID_descriptor();
template<typename T>
inline const std::string& GroupID_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GroupID>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GroupID_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GroupID_descriptor(), enum_t_value);
}
inline bool GroupID_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GroupID* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GroupID>(
    GroupID_descriptor(), name, value);
}
enum MoviesID : int {
  ID_MoviesUNKNOW = 0,
  ID_GetMovieInfoRequest = 31,
  ID_GetMovieInfoResponse = 32,
  MoviesID_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MoviesID_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MoviesID_IsValid(int value);
constexpr MoviesID MoviesID_MIN = ID_MoviesUNKNOW;
constexpr MoviesID MoviesID_MAX = ID_GetMovieInfoResponse;
constexpr int MoviesID_ARRAYSIZE = MoviesID_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MoviesID_descriptor();
template<typename T>
inline const std::string& MoviesID_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MoviesID>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MoviesID_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MoviesID_descriptor(), enum_t_value);
}
inline bool MoviesID_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MoviesID* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MoviesID>(
    MoviesID_descriptor(), name, value);
}
// ===================================================================

class HostInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mysqlService.HostInfo) */ {
 public:
  inline HostInfo() : HostInfo(nullptr) {}
  ~HostInfo() override;
  explicit constexpr HostInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HostInfo(const HostInfo& from);
  HostInfo(HostInfo&& from) noexcept
    : HostInfo() {
    *this = ::std::move(from);
  }

  inline HostInfo& operator=(const HostInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline HostInfo& operator=(HostInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HostInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const HostInfo* internal_default_instance() {
    return reinterpret_cast<const HostInfo*>(
               &_HostInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(HostInfo& a, HostInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(HostInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HostInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HostInfo* New() const final {
    return new HostInfo();
  }

  HostInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HostInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HostInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const HostInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HostInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mysqlService.HostInfo";
  }
  protected:
  explicit HostInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 1,
    kPortFieldNumber = 2,
  };
  // string ip = 1;
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_MUST_USE_RESULT std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // int32 port = 2;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mysqlService.HostInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mysqlService_2eproto;
};
// -------------------------------------------------------------------

class GetRouterRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mysqlService.GetRouterRequest) */ {
 public:
  inline GetRouterRequest() : GetRouterRequest(nullptr) {}
  ~GetRouterRequest() override;
  explicit constexpr GetRouterRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetRouterRequest(const GetRouterRequest& from);
  GetRouterRequest(GetRouterRequest&& from) noexcept
    : GetRouterRequest() {
    *this = ::std::move(from);
  }

  inline GetRouterRequest& operator=(const GetRouterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRouterRequest& operator=(GetRouterRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetRouterRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetRouterRequest* internal_default_instance() {
    return reinterpret_cast<const GetRouterRequest*>(
               &_GetRouterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetRouterRequest& a, GetRouterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRouterRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRouterRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetRouterRequest* New() const final {
    return new GetRouterRequest();
  }

  GetRouterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetRouterRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetRouterRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetRouterRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRouterRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mysqlService.GetRouterRequest";
  }
  protected:
  explicit GetRouterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModidFieldNumber = 1,
  };
  // int32 modid = 1;
  void clear_modid();
  ::PROTOBUF_NAMESPACE_ID::int32 modid() const;
  void set_modid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_modid() const;
  void _internal_set_modid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mysqlService.GetRouterRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 modid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mysqlService_2eproto;
};
// -------------------------------------------------------------------

class GetRouterResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mysqlService.GetRouterResponse) */ {
 public:
  inline GetRouterResponse() : GetRouterResponse(nullptr) {}
  ~GetRouterResponse() override;
  explicit constexpr GetRouterResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetRouterResponse(const GetRouterResponse& from);
  GetRouterResponse(GetRouterResponse&& from) noexcept
    : GetRouterResponse() {
    *this = ::std::move(from);
  }

  inline GetRouterResponse& operator=(const GetRouterResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRouterResponse& operator=(GetRouterResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetRouterResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetRouterResponse* internal_default_instance() {
    return reinterpret_cast<const GetRouterResponse*>(
               &_GetRouterResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetRouterResponse& a, GetRouterResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRouterResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRouterResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetRouterResponse* New() const final {
    return new GetRouterResponse();
  }

  GetRouterResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetRouterResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetRouterResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetRouterResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRouterResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mysqlService.GetRouterResponse";
  }
  protected:
  explicit GetRouterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHostFieldNumber = 2,
    kModidFieldNumber = 1,
  };
  // repeated .mysqlService.HostInfo host = 2;
  int host_size() const;
  private:
  int _internal_host_size() const;
  public:
  void clear_host();
  ::mysqlService::HostInfo* mutable_host(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mysqlService::HostInfo >*
      mutable_host();
  private:
  const ::mysqlService::HostInfo& _internal_host(int index) const;
  ::mysqlService::HostInfo* _internal_add_host();
  public:
  const ::mysqlService::HostInfo& host(int index) const;
  ::mysqlService::HostInfo* add_host();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mysqlService::HostInfo >&
      host() const;

  // int32 modid = 1;
  void clear_modid();
  ::PROTOBUF_NAMESPACE_ID::int32 modid() const;
  void set_modid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_modid() const;
  void _internal_set_modid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mysqlService.GetRouterResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mysqlService::HostInfo > host_;
  ::PROTOBUF_NAMESPACE_ID::int32 modid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mysqlService_2eproto;
};
// -------------------------------------------------------------------

class GetUserBaseRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mysqlService.GetUserBaseRequest) */ {
 public:
  inline GetUserBaseRequest() : GetUserBaseRequest(nullptr) {}
  ~GetUserBaseRequest() override;
  explicit constexpr GetUserBaseRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetUserBaseRequest(const GetUserBaseRequest& from);
  GetUserBaseRequest(GetUserBaseRequest&& from) noexcept
    : GetUserBaseRequest() {
    *this = ::std::move(from);
  }

  inline GetUserBaseRequest& operator=(const GetUserBaseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetUserBaseRequest& operator=(GetUserBaseRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetUserBaseRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetUserBaseRequest* internal_default_instance() {
    return reinterpret_cast<const GetUserBaseRequest*>(
               &_GetUserBaseRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetUserBaseRequest& a, GetUserBaseRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetUserBaseRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetUserBaseRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetUserBaseRequest* New() const final {
    return new GetUserBaseRequest();
  }

  GetUserBaseRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetUserBaseRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetUserBaseRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetUserBaseRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetUserBaseRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mysqlService.GetUserBaseRequest";
  }
  protected:
  explicit GetUserBaseRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
  };
  // int32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mysqlService.GetUserBaseRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mysqlService_2eproto;
};
// -------------------------------------------------------------------

class GetUserBaseResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mysqlService.GetUserBaseResponse) */ {
 public:
  inline GetUserBaseResponse() : GetUserBaseResponse(nullptr) {}
  ~GetUserBaseResponse() override;
  explicit constexpr GetUserBaseResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetUserBaseResponse(const GetUserBaseResponse& from);
  GetUserBaseResponse(GetUserBaseResponse&& from) noexcept
    : GetUserBaseResponse() {
    *this = ::std::move(from);
  }

  inline GetUserBaseResponse& operator=(const GetUserBaseResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetUserBaseResponse& operator=(GetUserBaseResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetUserBaseResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetUserBaseResponse* internal_default_instance() {
    return reinterpret_cast<const GetUserBaseResponse*>(
               &_GetUserBaseResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetUserBaseResponse& a, GetUserBaseResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetUserBaseResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetUserBaseResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetUserBaseResponse* New() const final {
    return new GetUserBaseResponse();
  }

  GetUserBaseResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetUserBaseResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetUserBaseResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetUserBaseResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetUserBaseResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mysqlService.GetUserBaseResponse";
  }
  protected:
  explicit GetUserBaseResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kPasswdFieldNumber = 4,
    kUidFieldNumber = 2,
    kIsGotFieldNumber = 1,
    kStateFieldNumber = 5,
  };
  // string name = 3;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string passwd = 4;
  void clear_passwd();
  const std::string& passwd() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_passwd(ArgT0&& arg0, ArgT... args);
  std::string* mutable_passwd();
  PROTOBUF_MUST_USE_RESULT std::string* release_passwd();
  void set_allocated_passwd(std::string* passwd);
  private:
  const std::string& _internal_passwd() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_passwd(const std::string& value);
  std::string* _internal_mutable_passwd();
  public:

  // int32 uid = 2;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool isGot = 1;
  void clear_isgot();
  bool isgot() const;
  void set_isgot(bool value);
  private:
  bool _internal_isgot() const;
  void _internal_set_isgot(bool value);
  public:

  // bool state = 5;
  void clear_state();
  bool state() const;
  void set_state(bool value);
  private:
  bool _internal_state() const;
  void _internal_set_state(bool value);
  public:

  // @@protoc_insertion_point(class_scope:mysqlService.GetUserBaseResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr passwd_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  bool isgot_;
  bool state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mysqlService_2eproto;
};
// -------------------------------------------------------------------

class ColmPair final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mysqlService.ColmPair) */ {
 public:
  inline ColmPair() : ColmPair(nullptr) {}
  ~ColmPair() override;
  explicit constexpr ColmPair(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ColmPair(const ColmPair& from);
  ColmPair(ColmPair&& from) noexcept
    : ColmPair() {
    *this = ::std::move(from);
  }

  inline ColmPair& operator=(const ColmPair& from) {
    CopyFrom(from);
    return *this;
  }
  inline ColmPair& operator=(ColmPair&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ColmPair& default_instance() {
    return *internal_default_instance();
  }
  enum ColmValueCase {
    kName = 2,
    kPasswd = 3,
    kState = 4,
    COLMVALUE_NOT_SET = 0,
  };

  static inline const ColmPair* internal_default_instance() {
    return reinterpret_cast<const ColmPair*>(
               &_ColmPair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ColmPair& a, ColmPair& b) {
    a.Swap(&b);
  }
  inline void Swap(ColmPair* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ColmPair* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ColmPair* New() const final {
    return new ColmPair();
  }

  ColmPair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ColmPair>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ColmPair& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ColmPair& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ColmPair* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mysqlService.ColmPair";
  }
  protected:
  explicit ColmPair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColmNameFieldNumber = 1,
    kNameFieldNumber = 2,
    kPasswdFieldNumber = 3,
    kStateFieldNumber = 4,
  };
  // string colmName = 1;
  void clear_colmname();
  const std::string& colmname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_colmname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_colmname();
  PROTOBUF_MUST_USE_RESULT std::string* release_colmname();
  void set_allocated_colmname(std::string* colmname);
  private:
  const std::string& _internal_colmname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_colmname(const std::string& value);
  std::string* _internal_mutable_colmname();
  public:

  // string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string passwd = 3;
  bool has_passwd() const;
  private:
  bool _internal_has_passwd() const;
  public:
  void clear_passwd();
  const std::string& passwd() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_passwd(ArgT0&& arg0, ArgT... args);
  std::string* mutable_passwd();
  PROTOBUF_MUST_USE_RESULT std::string* release_passwd();
  void set_allocated_passwd(std::string* passwd);
  private:
  const std::string& _internal_passwd() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_passwd(const std::string& value);
  std::string* _internal_mutable_passwd();
  public:

  // bool state = 4;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  bool state() const;
  void set_state(bool value);
  private:
  bool _internal_state() const;
  void _internal_set_state(bool value);
  public:

  void clear_colmValue();
  ColmValueCase colmValue_case() const;
  // @@protoc_insertion_point(class_scope:mysqlService.ColmPair)
 private:
  class _Internal;
  void set_has_name();
  void set_has_passwd();
  void set_has_state();

  inline bool has_colmValue() const;
  inline void clear_has_colmValue();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr colmname_;
  union ColmValueUnion {
    constexpr ColmValueUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr passwd_;
    bool state_;
  } colmValue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_mysqlService_2eproto;
};
// -------------------------------------------------------------------

class ModifyUserRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mysqlService.ModifyUserRequest) */ {
 public:
  inline ModifyUserRequest() : ModifyUserRequest(nullptr) {}
  ~ModifyUserRequest() override;
  explicit constexpr ModifyUserRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModifyUserRequest(const ModifyUserRequest& from);
  ModifyUserRequest(ModifyUserRequest&& from) noexcept
    : ModifyUserRequest() {
    *this = ::std::move(from);
  }

  inline ModifyUserRequest& operator=(const ModifyUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModifyUserRequest& operator=(ModifyUserRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModifyUserRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModifyUserRequest* internal_default_instance() {
    return reinterpret_cast<const ModifyUserRequest*>(
               &_ModifyUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ModifyUserRequest& a, ModifyUserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ModifyUserRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModifyUserRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ModifyUserRequest* New() const final {
    return new ModifyUserRequest();
  }

  ModifyUserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModifyUserRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModifyUserRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ModifyUserRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModifyUserRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mysqlService.ModifyUserRequest";
  }
  protected:
  explicit ModifyUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColmsFieldNumber = 2,
    kUidFieldNumber = 1,
  };
  // repeated .mysqlService.ColmPair colms = 2;
  int colms_size() const;
  private:
  int _internal_colms_size() const;
  public:
  void clear_colms();
  ::mysqlService::ColmPair* mutable_colms(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mysqlService::ColmPair >*
      mutable_colms();
  private:
  const ::mysqlService::ColmPair& _internal_colms(int index) const;
  ::mysqlService::ColmPair* _internal_add_colms();
  public:
  const ::mysqlService::ColmPair& colms(int index) const;
  ::mysqlService::ColmPair* add_colms();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mysqlService::ColmPair >&
      colms() const;

  // int32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mysqlService.ModifyUserRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mysqlService::ColmPair > colms_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mysqlService_2eproto;
};
// -------------------------------------------------------------------

class InsertUserRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mysqlService.InsertUserRequest) */ {
 public:
  inline InsertUserRequest() : InsertUserRequest(nullptr) {}
  ~InsertUserRequest() override;
  explicit constexpr InsertUserRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InsertUserRequest(const InsertUserRequest& from);
  InsertUserRequest(InsertUserRequest&& from) noexcept
    : InsertUserRequest() {
    *this = ::std::move(from);
  }

  inline InsertUserRequest& operator=(const InsertUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline InsertUserRequest& operator=(InsertUserRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InsertUserRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const InsertUserRequest* internal_default_instance() {
    return reinterpret_cast<const InsertUserRequest*>(
               &_InsertUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(InsertUserRequest& a, InsertUserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(InsertUserRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InsertUserRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InsertUserRequest* New() const final {
    return new InsertUserRequest();
  }

  InsertUserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InsertUserRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InsertUserRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InsertUserRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InsertUserRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mysqlService.InsertUserRequest";
  }
  protected:
  explicit InsertUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kPasswdFieldNumber = 3,
    kUidFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string passwd = 3;
  void clear_passwd();
  const std::string& passwd() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_passwd(ArgT0&& arg0, ArgT... args);
  std::string* mutable_passwd();
  PROTOBUF_MUST_USE_RESULT std::string* release_passwd();
  void set_allocated_passwd(std::string* passwd);
  private:
  const std::string& _internal_passwd() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_passwd(const std::string& value);
  std::string* _internal_mutable_passwd();
  public:

  // int32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mysqlService.InsertUserRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr passwd_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mysqlService_2eproto;
};
// -------------------------------------------------------------------

class DeleteUserRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mysqlService.DeleteUserRequest) */ {
 public:
  inline DeleteUserRequest() : DeleteUserRequest(nullptr) {}
  ~DeleteUserRequest() override;
  explicit constexpr DeleteUserRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteUserRequest(const DeleteUserRequest& from);
  DeleteUserRequest(DeleteUserRequest&& from) noexcept
    : DeleteUserRequest() {
    *this = ::std::move(from);
  }

  inline DeleteUserRequest& operator=(const DeleteUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteUserRequest& operator=(DeleteUserRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteUserRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteUserRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteUserRequest*>(
               &_DeleteUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(DeleteUserRequest& a, DeleteUserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteUserRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteUserRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteUserRequest* New() const final {
    return new DeleteUserRequest();
  }

  DeleteUserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteUserRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteUserRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteUserRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteUserRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mysqlService.DeleteUserRequest";
  }
  protected:
  explicit DeleteUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kPasswdFieldNumber = 3,
    kUidFieldNumber = 1,
    kStateFieldNumber = 4,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string passwd = 3;
  void clear_passwd();
  const std::string& passwd() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_passwd(ArgT0&& arg0, ArgT... args);
  std::string* mutable_passwd();
  PROTOBUF_MUST_USE_RESULT std::string* release_passwd();
  void set_allocated_passwd(std::string* passwd);
  private:
  const std::string& _internal_passwd() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_passwd(const std::string& value);
  std::string* _internal_mutable_passwd();
  public:

  // int32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool state = 4;
  void clear_state();
  bool state() const;
  void set_state(bool value);
  private:
  bool _internal_state() const;
  void _internal_set_state(bool value);
  public:

  // @@protoc_insertion_point(class_scope:mysqlService.DeleteUserRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr passwd_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  bool state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mysqlService_2eproto;
};
// -------------------------------------------------------------------

class UpdateUserResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mysqlService.UpdateUserResponse) */ {
 public:
  inline UpdateUserResponse() : UpdateUserResponse(nullptr) {}
  ~UpdateUserResponse() override;
  explicit constexpr UpdateUserResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateUserResponse(const UpdateUserResponse& from);
  UpdateUserResponse(UpdateUserResponse&& from) noexcept
    : UpdateUserResponse() {
    *this = ::std::move(from);
  }

  inline UpdateUserResponse& operator=(const UpdateUserResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateUserResponse& operator=(UpdateUserResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateUserResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateUserResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateUserResponse*>(
               &_UpdateUserResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(UpdateUserResponse& a, UpdateUserResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateUserResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateUserResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateUserResponse* New() const final {
    return new UpdateUserResponse();
  }

  UpdateUserResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateUserResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateUserResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateUserResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateUserResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mysqlService.UpdateUserResponse";
  }
  protected:
  explicit UpdateUserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
    kUpdateKindFieldNumber = 2,
    kResultFieldNumber = 3,
  };
  // int32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 updateKind = 2;
  void clear_updatekind();
  ::PROTOBUF_NAMESPACE_ID::int32 updatekind() const;
  void set_updatekind(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_updatekind() const;
  void _internal_set_updatekind(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 result = 3;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mysqlService.UpdateUserResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 updatekind_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mysqlService_2eproto;
};
// -------------------------------------------------------------------

class InsertFavoriteRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mysqlService.InsertFavoriteRequest) */ {
 public:
  inline InsertFavoriteRequest() : InsertFavoriteRequest(nullptr) {}
  ~InsertFavoriteRequest() override;
  explicit constexpr InsertFavoriteRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InsertFavoriteRequest(const InsertFavoriteRequest& from);
  InsertFavoriteRequest(InsertFavoriteRequest&& from) noexcept
    : InsertFavoriteRequest() {
    *this = ::std::move(from);
  }

  inline InsertFavoriteRequest& operator=(const InsertFavoriteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline InsertFavoriteRequest& operator=(InsertFavoriteRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InsertFavoriteRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const InsertFavoriteRequest* internal_default_instance() {
    return reinterpret_cast<const InsertFavoriteRequest*>(
               &_InsertFavoriteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(InsertFavoriteRequest& a, InsertFavoriteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(InsertFavoriteRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InsertFavoriteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InsertFavoriteRequest* New() const final {
    return new InsertFavoriteRequest();
  }

  InsertFavoriteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InsertFavoriteRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InsertFavoriteRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InsertFavoriteRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InsertFavoriteRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mysqlService.InsertFavoriteRequest";
  }
  protected:
  explicit InsertFavoriteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
    kFidFieldNumber = 2,
  };
  // int32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fid = 2;
  void clear_fid();
  ::PROTOBUF_NAMESPACE_ID::int32 fid() const;
  void set_fid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fid() const;
  void _internal_set_fid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mysqlService.InsertFavoriteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 fid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mysqlService_2eproto;
};
// -------------------------------------------------------------------

class DeleteFavoriteRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mysqlService.DeleteFavoriteRequest) */ {
 public:
  inline DeleteFavoriteRequest() : DeleteFavoriteRequest(nullptr) {}
  ~DeleteFavoriteRequest() override;
  explicit constexpr DeleteFavoriteRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteFavoriteRequest(const DeleteFavoriteRequest& from);
  DeleteFavoriteRequest(DeleteFavoriteRequest&& from) noexcept
    : DeleteFavoriteRequest() {
    *this = ::std::move(from);
  }

  inline DeleteFavoriteRequest& operator=(const DeleteFavoriteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteFavoriteRequest& operator=(DeleteFavoriteRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteFavoriteRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteFavoriteRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteFavoriteRequest*>(
               &_DeleteFavoriteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(DeleteFavoriteRequest& a, DeleteFavoriteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteFavoriteRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteFavoriteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteFavoriteRequest* New() const final {
    return new DeleteFavoriteRequest();
  }

  DeleteFavoriteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteFavoriteRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteFavoriteRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteFavoriteRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteFavoriteRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mysqlService.DeleteFavoriteRequest";
  }
  protected:
  explicit DeleteFavoriteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
    kFidFieldNumber = 2,
  };
  // int32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fid = 2;
  void clear_fid();
  ::PROTOBUF_NAMESPACE_ID::int32 fid() const;
  void set_fid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fid() const;
  void _internal_set_fid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mysqlService.DeleteFavoriteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 fid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mysqlService_2eproto;
};
// -------------------------------------------------------------------

class UpdateFavoriteResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mysqlService.UpdateFavoriteResponse) */ {
 public:
  inline UpdateFavoriteResponse() : UpdateFavoriteResponse(nullptr) {}
  ~UpdateFavoriteResponse() override;
  explicit constexpr UpdateFavoriteResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateFavoriteResponse(const UpdateFavoriteResponse& from);
  UpdateFavoriteResponse(UpdateFavoriteResponse&& from) noexcept
    : UpdateFavoriteResponse() {
    *this = ::std::move(from);
  }

  inline UpdateFavoriteResponse& operator=(const UpdateFavoriteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateFavoriteResponse& operator=(UpdateFavoriteResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateFavoriteResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateFavoriteResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateFavoriteResponse*>(
               &_UpdateFavoriteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(UpdateFavoriteResponse& a, UpdateFavoriteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateFavoriteResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateFavoriteResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateFavoriteResponse* New() const final {
    return new UpdateFavoriteResponse();
  }

  UpdateFavoriteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateFavoriteResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateFavoriteResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateFavoriteResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateFavoriteResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mysqlService.UpdateFavoriteResponse";
  }
  protected:
  explicit UpdateFavoriteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
    kUpdateKindFieldNumber = 2,
    kResultFieldNumber = 3,
  };
  // int32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 updateKind = 2;
  void clear_updatekind();
  ::PROTOBUF_NAMESPACE_ID::int32 updatekind() const;
  void set_updatekind(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_updatekind() const;
  void _internal_set_updatekind(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool result = 3;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:mysqlService.UpdateFavoriteResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 updatekind_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mysqlService_2eproto;
};
// -------------------------------------------------------------------

class InsertFriendRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mysqlService.InsertFriendRequest) */ {
 public:
  inline InsertFriendRequest() : InsertFriendRequest(nullptr) {}
  ~InsertFriendRequest() override;
  explicit constexpr InsertFriendRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InsertFriendRequest(const InsertFriendRequest& from);
  InsertFriendRequest(InsertFriendRequest&& from) noexcept
    : InsertFriendRequest() {
    *this = ::std::move(from);
  }

  inline InsertFriendRequest& operator=(const InsertFriendRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline InsertFriendRequest& operator=(InsertFriendRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InsertFriendRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const InsertFriendRequest* internal_default_instance() {
    return reinterpret_cast<const InsertFriendRequest*>(
               &_InsertFriendRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(InsertFriendRequest& a, InsertFriendRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(InsertFriendRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InsertFriendRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InsertFriendRequest* New() const final {
    return new InsertFriendRequest();
  }

  InsertFriendRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InsertFriendRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InsertFriendRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InsertFriendRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InsertFriendRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mysqlService.InsertFriendRequest";
  }
  protected:
  explicit InsertFriendRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
    kFriendIdFieldNumber = 2,
  };
  // int32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 friend_id = 2;
  void clear_friend_id();
  ::PROTOBUF_NAMESPACE_ID::int32 friend_id() const;
  void set_friend_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_friend_id() const;
  void _internal_set_friend_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mysqlService.InsertFriendRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 friend_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mysqlService_2eproto;
};
// -------------------------------------------------------------------

class DeleteFriendRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mysqlService.DeleteFriendRequest) */ {
 public:
  inline DeleteFriendRequest() : DeleteFriendRequest(nullptr) {}
  ~DeleteFriendRequest() override;
  explicit constexpr DeleteFriendRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteFriendRequest(const DeleteFriendRequest& from);
  DeleteFriendRequest(DeleteFriendRequest&& from) noexcept
    : DeleteFriendRequest() {
    *this = ::std::move(from);
  }

  inline DeleteFriendRequest& operator=(const DeleteFriendRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteFriendRequest& operator=(DeleteFriendRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteFriendRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteFriendRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteFriendRequest*>(
               &_DeleteFriendRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(DeleteFriendRequest& a, DeleteFriendRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteFriendRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteFriendRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteFriendRequest* New() const final {
    return new DeleteFriendRequest();
  }

  DeleteFriendRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteFriendRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteFriendRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteFriendRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteFriendRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mysqlService.DeleteFriendRequest";
  }
  protected:
  explicit DeleteFriendRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
    kFriendIdFieldNumber = 2,
  };
  // int32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 friend_id = 2;
  void clear_friend_id();
  ::PROTOBUF_NAMESPACE_ID::int32 friend_id() const;
  void set_friend_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_friend_id() const;
  void _internal_set_friend_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mysqlService.DeleteFriendRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 friend_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mysqlService_2eproto;
};
// -------------------------------------------------------------------

class UpdateFriendResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mysqlService.UpdateFriendResponse) */ {
 public:
  inline UpdateFriendResponse() : UpdateFriendResponse(nullptr) {}
  ~UpdateFriendResponse() override;
  explicit constexpr UpdateFriendResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateFriendResponse(const UpdateFriendResponse& from);
  UpdateFriendResponse(UpdateFriendResponse&& from) noexcept
    : UpdateFriendResponse() {
    *this = ::std::move(from);
  }

  inline UpdateFriendResponse& operator=(const UpdateFriendResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateFriendResponse& operator=(UpdateFriendResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateFriendResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateFriendResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateFriendResponse*>(
               &_UpdateFriendResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(UpdateFriendResponse& a, UpdateFriendResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateFriendResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateFriendResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateFriendResponse* New() const final {
    return new UpdateFriendResponse();
  }

  UpdateFriendResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateFriendResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateFriendResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateFriendResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateFriendResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mysqlService.UpdateFriendResponse";
  }
  protected:
  explicit UpdateFriendResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
    kUpdateKindFieldNumber = 2,
    kResultFieldNumber = 3,
  };
  // int32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 updateKind = 2;
  void clear_updatekind();
  ::PROTOBUF_NAMESPACE_ID::int32 updatekind() const;
  void set_updatekind(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_updatekind() const;
  void _internal_set_updatekind(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool result = 3;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:mysqlService.UpdateFriendResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 updatekind_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mysqlService_2eproto;
};
// -------------------------------------------------------------------

class RegisterGroupRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mysqlService.RegisterGroupRequest) */ {
 public:
  inline RegisterGroupRequest() : RegisterGroupRequest(nullptr) {}
  ~RegisterGroupRequest() override;
  explicit constexpr RegisterGroupRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegisterGroupRequest(const RegisterGroupRequest& from);
  RegisterGroupRequest(RegisterGroupRequest&& from) noexcept
    : RegisterGroupRequest() {
    *this = ::std::move(from);
  }

  inline RegisterGroupRequest& operator=(const RegisterGroupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterGroupRequest& operator=(RegisterGroupRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegisterGroupRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterGroupRequest* internal_default_instance() {
    return reinterpret_cast<const RegisterGroupRequest*>(
               &_RegisterGroupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(RegisterGroupRequest& a, RegisterGroupRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterGroupRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterGroupRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterGroupRequest* New() const final {
    return new RegisterGroupRequest();
  }

  RegisterGroupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterGroupRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RegisterGroupRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RegisterGroupRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterGroupRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mysqlService.RegisterGroupRequest";
  }
  protected:
  explicit RegisterGroupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kSummaryFieldNumber = 3,
    kUidFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string summary = 3;
  void clear_summary();
  const std::string& summary() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_summary(ArgT0&& arg0, ArgT... args);
  std::string* mutable_summary();
  PROTOBUF_MUST_USE_RESULT std::string* release_summary();
  void set_allocated_summary(std::string* summary);
  private:
  const std::string& _internal_summary() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_summary(const std::string& value);
  std::string* _internal_mutable_summary();
  public:

  // int32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mysqlService.RegisterGroupRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr summary_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mysqlService_2eproto;
};
// -------------------------------------------------------------------

class RegisterGroupResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mysqlService.RegisterGroupResponse) */ {
 public:
  inline RegisterGroupResponse() : RegisterGroupResponse(nullptr) {}
  ~RegisterGroupResponse() override;
  explicit constexpr RegisterGroupResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegisterGroupResponse(const RegisterGroupResponse& from);
  RegisterGroupResponse(RegisterGroupResponse&& from) noexcept
    : RegisterGroupResponse() {
    *this = ::std::move(from);
  }

  inline RegisterGroupResponse& operator=(const RegisterGroupResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterGroupResponse& operator=(RegisterGroupResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegisterGroupResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterGroupResponse* internal_default_instance() {
    return reinterpret_cast<const RegisterGroupResponse*>(
               &_RegisterGroupResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(RegisterGroupResponse& a, RegisterGroupResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterGroupResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterGroupResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterGroupResponse* New() const final {
    return new RegisterGroupResponse();
  }

  RegisterGroupResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterGroupResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RegisterGroupResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RegisterGroupResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterGroupResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mysqlService.RegisterGroupResponse";
  }
  protected:
  explicit RegisterGroupResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
    kGidFieldNumber = 2,
    kResultFieldNumber = 3,
  };
  // int32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 gid = 2;
  void clear_gid();
  ::PROTOBUF_NAMESPACE_ID::int32 gid() const;
  void set_gid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gid() const;
  void _internal_set_gid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool result = 3;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:mysqlService.RegisterGroupResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 gid_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mysqlService_2eproto;
};
// -------------------------------------------------------------------

class DeleteGroupRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mysqlService.DeleteGroupRequest) */ {
 public:
  inline DeleteGroupRequest() : DeleteGroupRequest(nullptr) {}
  ~DeleteGroupRequest() override;
  explicit constexpr DeleteGroupRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteGroupRequest(const DeleteGroupRequest& from);
  DeleteGroupRequest(DeleteGroupRequest&& from) noexcept
    : DeleteGroupRequest() {
    *this = ::std::move(from);
  }

  inline DeleteGroupRequest& operator=(const DeleteGroupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteGroupRequest& operator=(DeleteGroupRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteGroupRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteGroupRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteGroupRequest*>(
               &_DeleteGroupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(DeleteGroupRequest& a, DeleteGroupRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteGroupRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteGroupRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteGroupRequest* New() const final {
    return new DeleteGroupRequest();
  }

  DeleteGroupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteGroupRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteGroupRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteGroupRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteGroupRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mysqlService.DeleteGroupRequest";
  }
  protected:
  explicit DeleteGroupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
    kGidFieldNumber = 2,
  };
  // int32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 gid = 2;
  void clear_gid();
  ::PROTOBUF_NAMESPACE_ID::int32 gid() const;
  void set_gid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gid() const;
  void _internal_set_gid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mysqlService.DeleteGroupRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 gid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mysqlService_2eproto;
};
// -------------------------------------------------------------------

class DeleteGroupResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mysqlService.DeleteGroupResponse) */ {
 public:
  inline DeleteGroupResponse() : DeleteGroupResponse(nullptr) {}
  ~DeleteGroupResponse() override;
  explicit constexpr DeleteGroupResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteGroupResponse(const DeleteGroupResponse& from);
  DeleteGroupResponse(DeleteGroupResponse&& from) noexcept
    : DeleteGroupResponse() {
    *this = ::std::move(from);
  }

  inline DeleteGroupResponse& operator=(const DeleteGroupResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteGroupResponse& operator=(DeleteGroupResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteGroupResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteGroupResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteGroupResponse*>(
               &_DeleteGroupResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(DeleteGroupResponse& a, DeleteGroupResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteGroupResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteGroupResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteGroupResponse* New() const final {
    return new DeleteGroupResponse();
  }

  DeleteGroupResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteGroupResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteGroupResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteGroupResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteGroupResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mysqlService.DeleteGroupResponse";
  }
  protected:
  explicit DeleteGroupResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
    kGidFieldNumber = 2,
    kResultFieldNumber = 3,
  };
  // int32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 gid = 2;
  void clear_gid();
  ::PROTOBUF_NAMESPACE_ID::int32 gid() const;
  void set_gid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gid() const;
  void _internal_set_gid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool result = 3;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:mysqlService.DeleteGroupResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 gid_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mysqlService_2eproto;
};
// -------------------------------------------------------------------

class AddUserToGroupRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mysqlService.AddUserToGroupRequest) */ {
 public:
  inline AddUserToGroupRequest() : AddUserToGroupRequest(nullptr) {}
  ~AddUserToGroupRequest() override;
  explicit constexpr AddUserToGroupRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddUserToGroupRequest(const AddUserToGroupRequest& from);
  AddUserToGroupRequest(AddUserToGroupRequest&& from) noexcept
    : AddUserToGroupRequest() {
    *this = ::std::move(from);
  }

  inline AddUserToGroupRequest& operator=(const AddUserToGroupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddUserToGroupRequest& operator=(AddUserToGroupRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddUserToGroupRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddUserToGroupRequest* internal_default_instance() {
    return reinterpret_cast<const AddUserToGroupRequest*>(
               &_AddUserToGroupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(AddUserToGroupRequest& a, AddUserToGroupRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddUserToGroupRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddUserToGroupRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddUserToGroupRequest* New() const final {
    return new AddUserToGroupRequest();
  }

  AddUserToGroupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddUserToGroupRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddUserToGroupRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AddUserToGroupRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddUserToGroupRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mysqlService.AddUserToGroupRequest";
  }
  protected:
  explicit AddUserToGroupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
    kGidFieldNumber = 2,
  };
  // int32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 gid = 2;
  void clear_gid();
  ::PROTOBUF_NAMESPACE_ID::int32 gid() const;
  void set_gid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gid() const;
  void _internal_set_gid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mysqlService.AddUserToGroupRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 gid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mysqlService_2eproto;
};
// -------------------------------------------------------------------

class AddUserToGroupResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mysqlService.AddUserToGroupResponse) */ {
 public:
  inline AddUserToGroupResponse() : AddUserToGroupResponse(nullptr) {}
  ~AddUserToGroupResponse() override;
  explicit constexpr AddUserToGroupResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddUserToGroupResponse(const AddUserToGroupResponse& from);
  AddUserToGroupResponse(AddUserToGroupResponse&& from) noexcept
    : AddUserToGroupResponse() {
    *this = ::std::move(from);
  }

  inline AddUserToGroupResponse& operator=(const AddUserToGroupResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddUserToGroupResponse& operator=(AddUserToGroupResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddUserToGroupResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddUserToGroupResponse* internal_default_instance() {
    return reinterpret_cast<const AddUserToGroupResponse*>(
               &_AddUserToGroupResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(AddUserToGroupResponse& a, AddUserToGroupResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddUserToGroupResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddUserToGroupResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddUserToGroupResponse* New() const final {
    return new AddUserToGroupResponse();
  }

  AddUserToGroupResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddUserToGroupResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddUserToGroupResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AddUserToGroupResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddUserToGroupResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mysqlService.AddUserToGroupResponse";
  }
  protected:
  explicit AddUserToGroupResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
    kGidFieldNumber = 2,
    kResultFieldNumber = 3,
  };
  // int32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 gid = 2;
  void clear_gid();
  ::PROTOBUF_NAMESPACE_ID::int32 gid() const;
  void set_gid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gid() const;
  void _internal_set_gid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool result = 3;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:mysqlService.AddUserToGroupResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 gid_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mysqlService_2eproto;
};
// -------------------------------------------------------------------

class DelUserFromGroupRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mysqlService.DelUserFromGroupRequest) */ {
 public:
  inline DelUserFromGroupRequest() : DelUserFromGroupRequest(nullptr) {}
  ~DelUserFromGroupRequest() override;
  explicit constexpr DelUserFromGroupRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DelUserFromGroupRequest(const DelUserFromGroupRequest& from);
  DelUserFromGroupRequest(DelUserFromGroupRequest&& from) noexcept
    : DelUserFromGroupRequest() {
    *this = ::std::move(from);
  }

  inline DelUserFromGroupRequest& operator=(const DelUserFromGroupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DelUserFromGroupRequest& operator=(DelUserFromGroupRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DelUserFromGroupRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DelUserFromGroupRequest* internal_default_instance() {
    return reinterpret_cast<const DelUserFromGroupRequest*>(
               &_DelUserFromGroupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(DelUserFromGroupRequest& a, DelUserFromGroupRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DelUserFromGroupRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DelUserFromGroupRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DelUserFromGroupRequest* New() const final {
    return new DelUserFromGroupRequest();
  }

  DelUserFromGroupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DelUserFromGroupRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DelUserFromGroupRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DelUserFromGroupRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DelUserFromGroupRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mysqlService.DelUserFromGroupRequest";
  }
  protected:
  explicit DelUserFromGroupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
    kGidFieldNumber = 2,
  };
  // int32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 gid = 2;
  void clear_gid();
  ::PROTOBUF_NAMESPACE_ID::int32 gid() const;
  void set_gid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gid() const;
  void _internal_set_gid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mysqlService.DelUserFromGroupRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 gid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mysqlService_2eproto;
};
// -------------------------------------------------------------------

class DelUserFromGroupResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mysqlService.DelUserFromGroupResponse) */ {
 public:
  inline DelUserFromGroupResponse() : DelUserFromGroupResponse(nullptr) {}
  ~DelUserFromGroupResponse() override;
  explicit constexpr DelUserFromGroupResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DelUserFromGroupResponse(const DelUserFromGroupResponse& from);
  DelUserFromGroupResponse(DelUserFromGroupResponse&& from) noexcept
    : DelUserFromGroupResponse() {
    *this = ::std::move(from);
  }

  inline DelUserFromGroupResponse& operator=(const DelUserFromGroupResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DelUserFromGroupResponse& operator=(DelUserFromGroupResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DelUserFromGroupResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DelUserFromGroupResponse* internal_default_instance() {
    return reinterpret_cast<const DelUserFromGroupResponse*>(
               &_DelUserFromGroupResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(DelUserFromGroupResponse& a, DelUserFromGroupResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DelUserFromGroupResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DelUserFromGroupResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DelUserFromGroupResponse* New() const final {
    return new DelUserFromGroupResponse();
  }

  DelUserFromGroupResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DelUserFromGroupResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DelUserFromGroupResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DelUserFromGroupResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DelUserFromGroupResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mysqlService.DelUserFromGroupResponse";
  }
  protected:
  explicit DelUserFromGroupResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
    kGidFieldNumber = 2,
    kResultFieldNumber = 3,
  };
  // int32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 gid = 2;
  void clear_gid();
  ::PROTOBUF_NAMESPACE_ID::int32 gid() const;
  void set_gid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gid() const;
  void _internal_set_gid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool result = 3;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:mysqlService.DelUserFromGroupResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 gid_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mysqlService_2eproto;
};
// -------------------------------------------------------------------

class GetMovieInfoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mysqlService.GetMovieInfoRequest) */ {
 public:
  inline GetMovieInfoRequest() : GetMovieInfoRequest(nullptr) {}
  ~GetMovieInfoRequest() override;
  explicit constexpr GetMovieInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetMovieInfoRequest(const GetMovieInfoRequest& from);
  GetMovieInfoRequest(GetMovieInfoRequest&& from) noexcept
    : GetMovieInfoRequest() {
    *this = ::std::move(from);
  }

  inline GetMovieInfoRequest& operator=(const GetMovieInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMovieInfoRequest& operator=(GetMovieInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetMovieInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetMovieInfoRequest* internal_default_instance() {
    return reinterpret_cast<const GetMovieInfoRequest*>(
               &_GetMovieInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(GetMovieInfoRequest& a, GetMovieInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMovieInfoRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMovieInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetMovieInfoRequest* New() const final {
    return new GetMovieInfoRequest();
  }

  GetMovieInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetMovieInfoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetMovieInfoRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetMovieInfoRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMovieInfoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mysqlService.GetMovieInfoRequest";
  }
  protected:
  explicit GetMovieInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFidFieldNumber = 1,
    kFromIdFieldNumber = 2,
  };
  // uint32 fid = 1;
  void clear_fid();
  ::PROTOBUF_NAMESPACE_ID::uint32 fid() const;
  void set_fid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fid() const;
  void _internal_set_fid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 fromId = 2;
  void clear_fromid();
  ::PROTOBUF_NAMESPACE_ID::uint32 fromid() const;
  void set_fromid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fromid() const;
  void _internal_set_fromid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mysqlService.GetMovieInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fromid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mysqlService_2eproto;
};
// -------------------------------------------------------------------

class GetMovieInfoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mysqlService.GetMovieInfoResponse) */ {
 public:
  inline GetMovieInfoResponse() : GetMovieInfoResponse(nullptr) {}
  ~GetMovieInfoResponse() override;
  explicit constexpr GetMovieInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetMovieInfoResponse(const GetMovieInfoResponse& from);
  GetMovieInfoResponse(GetMovieInfoResponse&& from) noexcept
    : GetMovieInfoResponse() {
    *this = ::std::move(from);
  }

  inline GetMovieInfoResponse& operator=(const GetMovieInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMovieInfoResponse& operator=(GetMovieInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetMovieInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetMovieInfoResponse* internal_default_instance() {
    return reinterpret_cast<const GetMovieInfoResponse*>(
               &_GetMovieInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(GetMovieInfoResponse& a, GetMovieInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMovieInfoResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMovieInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetMovieInfoResponse* New() const final {
    return new GetMovieInfoResponse();
  }

  GetMovieInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetMovieInfoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetMovieInfoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetMovieInfoResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMovieInfoResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mysqlService.GetMovieInfoResponse";
  }
  protected:
  explicit GetMovieInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kPathFieldNumber = 4,
    kSummaryFieldNumber = 5,
    kToIdFieldNumber = 1,
    kFidFieldNumber = 2,
    kHotNumsFieldNumber = 6,
    kTypeFieldNumber = 7,
  };
  // string name = 3;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string path = 4;
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_MUST_USE_RESULT std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // string summary = 5;
  void clear_summary();
  const std::string& summary() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_summary(ArgT0&& arg0, ArgT... args);
  std::string* mutable_summary();
  PROTOBUF_MUST_USE_RESULT std::string* release_summary();
  void set_allocated_summary(std::string* summary);
  private:
  const std::string& _internal_summary() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_summary(const std::string& value);
  std::string* _internal_mutable_summary();
  public:

  // uint32 toId = 1;
  void clear_toid();
  ::PROTOBUF_NAMESPACE_ID::uint32 toid() const;
  void set_toid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_toid() const;
  void _internal_set_toid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 fid = 2;
  void clear_fid();
  ::PROTOBUF_NAMESPACE_ID::uint32 fid() const;
  void set_fid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fid() const;
  void _internal_set_fid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 hotNums = 6;
  void clear_hotnums();
  ::PROTOBUF_NAMESPACE_ID::uint32 hotnums() const;
  void set_hotnums(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_hotnums() const;
  void _internal_set_hotnums(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 type = 7;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mysqlService.GetMovieInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr summary_;
  ::PROTOBUF_NAMESPACE_ID::uint32 toid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 hotnums_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mysqlService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HostInfo

// string ip = 1;
inline void HostInfo::clear_ip() {
  ip_.ClearToEmpty();
}
inline const std::string& HostInfo::ip() const {
  // @@protoc_insertion_point(field_get:mysqlService.HostInfo.ip)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HostInfo::set_ip(ArgT0&& arg0, ArgT... args) {
 
 ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mysqlService.HostInfo.ip)
}
inline std::string* HostInfo::mutable_ip() {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:mysqlService.HostInfo.ip)
  return _s;
}
inline const std::string& HostInfo::_internal_ip() const {
  return ip_.Get();
}
inline void HostInfo::_internal_set_ip(const std::string& value) {
  
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* HostInfo::_internal_mutable_ip() {
  
  return ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* HostInfo::release_ip() {
  // @@protoc_insertion_point(field_release:mysqlService.HostInfo.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void HostInfo::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:mysqlService.HostInfo.ip)
}

// int32 port = 2;
inline void HostInfo::clear_port() {
  port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HostInfo::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HostInfo::port() const {
  // @@protoc_insertion_point(field_get:mysqlService.HostInfo.port)
  return _internal_port();
}
inline void HostInfo::_internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_ = value;
}
inline void HostInfo::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:mysqlService.HostInfo.port)
}

// -------------------------------------------------------------------

// GetRouterRequest

// int32 modid = 1;
inline void GetRouterRequest::clear_modid() {
  modid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetRouterRequest::_internal_modid() const {
  return modid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetRouterRequest::modid() const {
  // @@protoc_insertion_point(field_get:mysqlService.GetRouterRequest.modid)
  return _internal_modid();
}
inline void GetRouterRequest::_internal_set_modid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  modid_ = value;
}
inline void GetRouterRequest::set_modid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_modid(value);
  // @@protoc_insertion_point(field_set:mysqlService.GetRouterRequest.modid)
}

// -------------------------------------------------------------------

// GetRouterResponse

// int32 modid = 1;
inline void GetRouterResponse::clear_modid() {
  modid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetRouterResponse::_internal_modid() const {
  return modid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetRouterResponse::modid() const {
  // @@protoc_insertion_point(field_get:mysqlService.GetRouterResponse.modid)
  return _internal_modid();
}
inline void GetRouterResponse::_internal_set_modid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  modid_ = value;
}
inline void GetRouterResponse::set_modid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_modid(value);
  // @@protoc_insertion_point(field_set:mysqlService.GetRouterResponse.modid)
}

// repeated .mysqlService.HostInfo host = 2;
inline int GetRouterResponse::_internal_host_size() const {
  return host_.size();
}
inline int GetRouterResponse::host_size() const {
  return _internal_host_size();
}
inline void GetRouterResponse::clear_host() {
  host_.Clear();
}
inline ::mysqlService::HostInfo* GetRouterResponse::mutable_host(int index) {
  // @@protoc_insertion_point(field_mutable:mysqlService.GetRouterResponse.host)
  return host_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mysqlService::HostInfo >*
GetRouterResponse::mutable_host() {
  // @@protoc_insertion_point(field_mutable_list:mysqlService.GetRouterResponse.host)
  return &host_;
}
inline const ::mysqlService::HostInfo& GetRouterResponse::_internal_host(int index) const {
  return host_.Get(index);
}
inline const ::mysqlService::HostInfo& GetRouterResponse::host(int index) const {
  // @@protoc_insertion_point(field_get:mysqlService.GetRouterResponse.host)
  return _internal_host(index);
}
inline ::mysqlService::HostInfo* GetRouterResponse::_internal_add_host() {
  return host_.Add();
}
inline ::mysqlService::HostInfo* GetRouterResponse::add_host() {
  ::mysqlService::HostInfo* _add = _internal_add_host();
  // @@protoc_insertion_point(field_add:mysqlService.GetRouterResponse.host)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mysqlService::HostInfo >&
GetRouterResponse::host() const {
  // @@protoc_insertion_point(field_list:mysqlService.GetRouterResponse.host)
  return host_;
}

// -------------------------------------------------------------------

// GetUserBaseRequest

// int32 uid = 1;
inline void GetUserBaseRequest::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetUserBaseRequest::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetUserBaseRequest::uid() const {
  // @@protoc_insertion_point(field_get:mysqlService.GetUserBaseRequest.uid)
  return _internal_uid();
}
inline void GetUserBaseRequest::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void GetUserBaseRequest::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:mysqlService.GetUserBaseRequest.uid)
}

// -------------------------------------------------------------------

// GetUserBaseResponse

// bool isGot = 1;
inline void GetUserBaseResponse::clear_isgot() {
  isgot_ = false;
}
inline bool GetUserBaseResponse::_internal_isgot() const {
  return isgot_;
}
inline bool GetUserBaseResponse::isgot() const {
  // @@protoc_insertion_point(field_get:mysqlService.GetUserBaseResponse.isGot)
  return _internal_isgot();
}
inline void GetUserBaseResponse::_internal_set_isgot(bool value) {
  
  isgot_ = value;
}
inline void GetUserBaseResponse::set_isgot(bool value) {
  _internal_set_isgot(value);
  // @@protoc_insertion_point(field_set:mysqlService.GetUserBaseResponse.isGot)
}

// int32 uid = 2;
inline void GetUserBaseResponse::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetUserBaseResponse::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetUserBaseResponse::uid() const {
  // @@protoc_insertion_point(field_get:mysqlService.GetUserBaseResponse.uid)
  return _internal_uid();
}
inline void GetUserBaseResponse::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void GetUserBaseResponse::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:mysqlService.GetUserBaseResponse.uid)
}

// string name = 3;
inline void GetUserBaseResponse::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& GetUserBaseResponse::name() const {
  // @@protoc_insertion_point(field_get:mysqlService.GetUserBaseResponse.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetUserBaseResponse::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mysqlService.GetUserBaseResponse.name)
}
inline std::string* GetUserBaseResponse::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:mysqlService.GetUserBaseResponse.name)
  return _s;
}
inline const std::string& GetUserBaseResponse::_internal_name() const {
  return name_.Get();
}
inline void GetUserBaseResponse::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetUserBaseResponse::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetUserBaseResponse::release_name() {
  // @@protoc_insertion_point(field_release:mysqlService.GetUserBaseResponse.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetUserBaseResponse::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:mysqlService.GetUserBaseResponse.name)
}

// string passwd = 4;
inline void GetUserBaseResponse::clear_passwd() {
  passwd_.ClearToEmpty();
}
inline const std::string& GetUserBaseResponse::passwd() const {
  // @@protoc_insertion_point(field_get:mysqlService.GetUserBaseResponse.passwd)
  return _internal_passwd();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetUserBaseResponse::set_passwd(ArgT0&& arg0, ArgT... args) {
 
 passwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mysqlService.GetUserBaseResponse.passwd)
}
inline std::string* GetUserBaseResponse::mutable_passwd() {
  std::string* _s = _internal_mutable_passwd();
  // @@protoc_insertion_point(field_mutable:mysqlService.GetUserBaseResponse.passwd)
  return _s;
}
inline const std::string& GetUserBaseResponse::_internal_passwd() const {
  return passwd_.Get();
}
inline void GetUserBaseResponse::_internal_set_passwd(const std::string& value) {
  
  passwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetUserBaseResponse::_internal_mutable_passwd() {
  
  return passwd_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetUserBaseResponse::release_passwd() {
  // @@protoc_insertion_point(field_release:mysqlService.GetUserBaseResponse.passwd)
  return passwd_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetUserBaseResponse::set_allocated_passwd(std::string* passwd) {
  if (passwd != nullptr) {
    
  } else {
    
  }
  passwd_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), passwd,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:mysqlService.GetUserBaseResponse.passwd)
}

// bool state = 5;
inline void GetUserBaseResponse::clear_state() {
  state_ = false;
}
inline bool GetUserBaseResponse::_internal_state() const {
  return state_;
}
inline bool GetUserBaseResponse::state() const {
  // @@protoc_insertion_point(field_get:mysqlService.GetUserBaseResponse.state)
  return _internal_state();
}
inline void GetUserBaseResponse::_internal_set_state(bool value) {
  
  state_ = value;
}
inline void GetUserBaseResponse::set_state(bool value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:mysqlService.GetUserBaseResponse.state)
}

// -------------------------------------------------------------------

// ColmPair

// string colmName = 1;
inline void ColmPair::clear_colmname() {
  colmname_.ClearToEmpty();
}
inline const std::string& ColmPair::colmname() const {
  // @@protoc_insertion_point(field_get:mysqlService.ColmPair.colmName)
  return _internal_colmname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ColmPair::set_colmname(ArgT0&& arg0, ArgT... args) {
 
 colmname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mysqlService.ColmPair.colmName)
}
inline std::string* ColmPair::mutable_colmname() {
  std::string* _s = _internal_mutable_colmname();
  // @@protoc_insertion_point(field_mutable:mysqlService.ColmPair.colmName)
  return _s;
}
inline const std::string& ColmPair::_internal_colmname() const {
  return colmname_.Get();
}
inline void ColmPair::_internal_set_colmname(const std::string& value) {
  
  colmname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ColmPair::_internal_mutable_colmname() {
  
  return colmname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ColmPair::release_colmname() {
  // @@protoc_insertion_point(field_release:mysqlService.ColmPair.colmName)
  return colmname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ColmPair::set_allocated_colmname(std::string* colmname) {
  if (colmname != nullptr) {
    
  } else {
    
  }
  colmname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), colmname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:mysqlService.ColmPair.colmName)
}

// string name = 2;
inline bool ColmPair::_internal_has_name() const {
  return colmValue_case() == kName;
}
inline bool ColmPair::has_name() const {
  return _internal_has_name();
}
inline void ColmPair::set_has_name() {
  _oneof_case_[0] = kName;
}
inline void ColmPair::clear_name() {
  if (_internal_has_name()) {
    colmValue_.name_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_colmValue();
  }
}
inline const std::string& ColmPair::name() const {
  // @@protoc_insertion_point(field_get:mysqlService.ColmPair.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline void ColmPair::set_name(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_name()) {
    clear_colmValue();
    set_has_name();
    colmValue_.name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  colmValue_.name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mysqlService.ColmPair.name)
}
inline std::string* ColmPair::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:mysqlService.ColmPair.name)
  return _s;
}
inline const std::string& ColmPair::_internal_name() const {
  if (_internal_has_name()) {
    return colmValue_.name_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ColmPair::_internal_set_name(const std::string& value) {
  if (!_internal_has_name()) {
    clear_colmValue();
    set_has_name();
    colmValue_.name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  colmValue_.name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ColmPair::_internal_mutable_name() {
  if (!_internal_has_name()) {
    clear_colmValue();
    set_has_name();
    colmValue_.name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return colmValue_.name_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ColmPair::release_name() {
  // @@protoc_insertion_point(field_release:mysqlService.ColmPair.name)
  if (_internal_has_name()) {
    clear_has_colmValue();
    return colmValue_.name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void ColmPair::set_allocated_name(std::string* name) {
  if (has_colmValue()) {
    clear_colmValue();
  }
  if (name != nullptr) {
    set_has_name();
    colmValue_.name_.UnsafeSetDefault(name);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(name);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:mysqlService.ColmPair.name)
}

// string passwd = 3;
inline bool ColmPair::_internal_has_passwd() const {
  return colmValue_case() == kPasswd;
}
inline bool ColmPair::has_passwd() const {
  return _internal_has_passwd();
}
inline void ColmPair::set_has_passwd() {
  _oneof_case_[0] = kPasswd;
}
inline void ColmPair::clear_passwd() {
  if (_internal_has_passwd()) {
    colmValue_.passwd_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_colmValue();
  }
}
inline const std::string& ColmPair::passwd() const {
  // @@protoc_insertion_point(field_get:mysqlService.ColmPair.passwd)
  return _internal_passwd();
}
template <typename ArgT0, typename... ArgT>
inline void ColmPair::set_passwd(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_passwd()) {
    clear_colmValue();
    set_has_passwd();
    colmValue_.passwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  colmValue_.passwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mysqlService.ColmPair.passwd)
}
inline std::string* ColmPair::mutable_passwd() {
  std::string* _s = _internal_mutable_passwd();
  // @@protoc_insertion_point(field_mutable:mysqlService.ColmPair.passwd)
  return _s;
}
inline const std::string& ColmPair::_internal_passwd() const {
  if (_internal_has_passwd()) {
    return colmValue_.passwd_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ColmPair::_internal_set_passwd(const std::string& value) {
  if (!_internal_has_passwd()) {
    clear_colmValue();
    set_has_passwd();
    colmValue_.passwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  colmValue_.passwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ColmPair::_internal_mutable_passwd() {
  if (!_internal_has_passwd()) {
    clear_colmValue();
    set_has_passwd();
    colmValue_.passwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return colmValue_.passwd_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ColmPair::release_passwd() {
  // @@protoc_insertion_point(field_release:mysqlService.ColmPair.passwd)
  if (_internal_has_passwd()) {
    clear_has_colmValue();
    return colmValue_.passwd_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void ColmPair::set_allocated_passwd(std::string* passwd) {
  if (has_colmValue()) {
    clear_colmValue();
  }
  if (passwd != nullptr) {
    set_has_passwd();
    colmValue_.passwd_.UnsafeSetDefault(passwd);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(passwd);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:mysqlService.ColmPair.passwd)
}

// bool state = 4;
inline bool ColmPair::_internal_has_state() const {
  return colmValue_case() == kState;
}
inline bool ColmPair::has_state() const {
  return _internal_has_state();
}
inline void ColmPair::set_has_state() {
  _oneof_case_[0] = kState;
}
inline void ColmPair::clear_state() {
  if (_internal_has_state()) {
    colmValue_.state_ = false;
    clear_has_colmValue();
  }
}
inline bool ColmPair::_internal_state() const {
  if (_internal_has_state()) {
    return colmValue_.state_;
  }
  return false;
}
inline void ColmPair::_internal_set_state(bool value) {
  if (!_internal_has_state()) {
    clear_colmValue();
    set_has_state();
  }
  colmValue_.state_ = value;
}
inline bool ColmPair::state() const {
  // @@protoc_insertion_point(field_get:mysqlService.ColmPair.state)
  return _internal_state();
}
inline void ColmPair::set_state(bool value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:mysqlService.ColmPair.state)
}

inline bool ColmPair::has_colmValue() const {
  return colmValue_case() != COLMVALUE_NOT_SET;
}
inline void ColmPair::clear_has_colmValue() {
  _oneof_case_[0] = COLMVALUE_NOT_SET;
}
inline ColmPair::ColmValueCase ColmPair::colmValue_case() const {
  return ColmPair::ColmValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ModifyUserRequest

// int32 uid = 1;
inline void ModifyUserRequest::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ModifyUserRequest::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ModifyUserRequest::uid() const {
  // @@protoc_insertion_point(field_get:mysqlService.ModifyUserRequest.uid)
  return _internal_uid();
}
inline void ModifyUserRequest::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void ModifyUserRequest::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:mysqlService.ModifyUserRequest.uid)
}

// repeated .mysqlService.ColmPair colms = 2;
inline int ModifyUserRequest::_internal_colms_size() const {
  return colms_.size();
}
inline int ModifyUserRequest::colms_size() const {
  return _internal_colms_size();
}
inline void ModifyUserRequest::clear_colms() {
  colms_.Clear();
}
inline ::mysqlService::ColmPair* ModifyUserRequest::mutable_colms(int index) {
  // @@protoc_insertion_point(field_mutable:mysqlService.ModifyUserRequest.colms)
  return colms_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mysqlService::ColmPair >*
ModifyUserRequest::mutable_colms() {
  // @@protoc_insertion_point(field_mutable_list:mysqlService.ModifyUserRequest.colms)
  return &colms_;
}
inline const ::mysqlService::ColmPair& ModifyUserRequest::_internal_colms(int index) const {
  return colms_.Get(index);
}
inline const ::mysqlService::ColmPair& ModifyUserRequest::colms(int index) const {
  // @@protoc_insertion_point(field_get:mysqlService.ModifyUserRequest.colms)
  return _internal_colms(index);
}
inline ::mysqlService::ColmPair* ModifyUserRequest::_internal_add_colms() {
  return colms_.Add();
}
inline ::mysqlService::ColmPair* ModifyUserRequest::add_colms() {
  ::mysqlService::ColmPair* _add = _internal_add_colms();
  // @@protoc_insertion_point(field_add:mysqlService.ModifyUserRequest.colms)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mysqlService::ColmPair >&
ModifyUserRequest::colms() const {
  // @@protoc_insertion_point(field_list:mysqlService.ModifyUserRequest.colms)
  return colms_;
}

// -------------------------------------------------------------------

// InsertUserRequest

// int32 uid = 1;
inline void InsertUserRequest::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InsertUserRequest::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InsertUserRequest::uid() const {
  // @@protoc_insertion_point(field_get:mysqlService.InsertUserRequest.uid)
  return _internal_uid();
}
inline void InsertUserRequest::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void InsertUserRequest::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:mysqlService.InsertUserRequest.uid)
}

// string name = 2;
inline void InsertUserRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& InsertUserRequest::name() const {
  // @@protoc_insertion_point(field_get:mysqlService.InsertUserRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InsertUserRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mysqlService.InsertUserRequest.name)
}
inline std::string* InsertUserRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:mysqlService.InsertUserRequest.name)
  return _s;
}
inline const std::string& InsertUserRequest::_internal_name() const {
  return name_.Get();
}
inline void InsertUserRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InsertUserRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InsertUserRequest::release_name() {
  // @@protoc_insertion_point(field_release:mysqlService.InsertUserRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void InsertUserRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:mysqlService.InsertUserRequest.name)
}

// string passwd = 3;
inline void InsertUserRequest::clear_passwd() {
  passwd_.ClearToEmpty();
}
inline const std::string& InsertUserRequest::passwd() const {
  // @@protoc_insertion_point(field_get:mysqlService.InsertUserRequest.passwd)
  return _internal_passwd();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InsertUserRequest::set_passwd(ArgT0&& arg0, ArgT... args) {
 
 passwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mysqlService.InsertUserRequest.passwd)
}
inline std::string* InsertUserRequest::mutable_passwd() {
  std::string* _s = _internal_mutable_passwd();
  // @@protoc_insertion_point(field_mutable:mysqlService.InsertUserRequest.passwd)
  return _s;
}
inline const std::string& InsertUserRequest::_internal_passwd() const {
  return passwd_.Get();
}
inline void InsertUserRequest::_internal_set_passwd(const std::string& value) {
  
  passwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InsertUserRequest::_internal_mutable_passwd() {
  
  return passwd_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InsertUserRequest::release_passwd() {
  // @@protoc_insertion_point(field_release:mysqlService.InsertUserRequest.passwd)
  return passwd_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void InsertUserRequest::set_allocated_passwd(std::string* passwd) {
  if (passwd != nullptr) {
    
  } else {
    
  }
  passwd_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), passwd,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:mysqlService.InsertUserRequest.passwd)
}

// -------------------------------------------------------------------

// DeleteUserRequest

// int32 uid = 1;
inline void DeleteUserRequest::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeleteUserRequest::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeleteUserRequest::uid() const {
  // @@protoc_insertion_point(field_get:mysqlService.DeleteUserRequest.uid)
  return _internal_uid();
}
inline void DeleteUserRequest::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void DeleteUserRequest::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:mysqlService.DeleteUserRequest.uid)
}

// string name = 2;
inline void DeleteUserRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& DeleteUserRequest::name() const {
  // @@protoc_insertion_point(field_get:mysqlService.DeleteUserRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteUserRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mysqlService.DeleteUserRequest.name)
}
inline std::string* DeleteUserRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:mysqlService.DeleteUserRequest.name)
  return _s;
}
inline const std::string& DeleteUserRequest::_internal_name() const {
  return name_.Get();
}
inline void DeleteUserRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteUserRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteUserRequest::release_name() {
  // @@protoc_insertion_point(field_release:mysqlService.DeleteUserRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteUserRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:mysqlService.DeleteUserRequest.name)
}

// string passwd = 3;
inline void DeleteUserRequest::clear_passwd() {
  passwd_.ClearToEmpty();
}
inline const std::string& DeleteUserRequest::passwd() const {
  // @@protoc_insertion_point(field_get:mysqlService.DeleteUserRequest.passwd)
  return _internal_passwd();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteUserRequest::set_passwd(ArgT0&& arg0, ArgT... args) {
 
 passwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mysqlService.DeleteUserRequest.passwd)
}
inline std::string* DeleteUserRequest::mutable_passwd() {
  std::string* _s = _internal_mutable_passwd();
  // @@protoc_insertion_point(field_mutable:mysqlService.DeleteUserRequest.passwd)
  return _s;
}
inline const std::string& DeleteUserRequest::_internal_passwd() const {
  return passwd_.Get();
}
inline void DeleteUserRequest::_internal_set_passwd(const std::string& value) {
  
  passwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteUserRequest::_internal_mutable_passwd() {
  
  return passwd_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteUserRequest::release_passwd() {
  // @@protoc_insertion_point(field_release:mysqlService.DeleteUserRequest.passwd)
  return passwd_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteUserRequest::set_allocated_passwd(std::string* passwd) {
  if (passwd != nullptr) {
    
  } else {
    
  }
  passwd_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), passwd,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:mysqlService.DeleteUserRequest.passwd)
}

// bool state = 4;
inline void DeleteUserRequest::clear_state() {
  state_ = false;
}
inline bool DeleteUserRequest::_internal_state() const {
  return state_;
}
inline bool DeleteUserRequest::state() const {
  // @@protoc_insertion_point(field_get:mysqlService.DeleteUserRequest.state)
  return _internal_state();
}
inline void DeleteUserRequest::_internal_set_state(bool value) {
  
  state_ = value;
}
inline void DeleteUserRequest::set_state(bool value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:mysqlService.DeleteUserRequest.state)
}

// -------------------------------------------------------------------

// UpdateUserResponse

// int32 uid = 1;
inline void UpdateUserResponse::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateUserResponse::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateUserResponse::uid() const {
  // @@protoc_insertion_point(field_get:mysqlService.UpdateUserResponse.uid)
  return _internal_uid();
}
inline void UpdateUserResponse::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void UpdateUserResponse::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:mysqlService.UpdateUserResponse.uid)
}

// int32 updateKind = 2;
inline void UpdateUserResponse::clear_updatekind() {
  updatekind_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateUserResponse::_internal_updatekind() const {
  return updatekind_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateUserResponse::updatekind() const {
  // @@protoc_insertion_point(field_get:mysqlService.UpdateUserResponse.updateKind)
  return _internal_updatekind();
}
inline void UpdateUserResponse::_internal_set_updatekind(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  updatekind_ = value;
}
inline void UpdateUserResponse::set_updatekind(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_updatekind(value);
  // @@protoc_insertion_point(field_set:mysqlService.UpdateUserResponse.updateKind)
}

// int32 result = 3;
inline void UpdateUserResponse::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateUserResponse::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateUserResponse::result() const {
  // @@protoc_insertion_point(field_get:mysqlService.UpdateUserResponse.result)
  return _internal_result();
}
inline void UpdateUserResponse::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void UpdateUserResponse::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:mysqlService.UpdateUserResponse.result)
}

// -------------------------------------------------------------------

// InsertFavoriteRequest

// int32 uid = 1;
inline void InsertFavoriteRequest::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InsertFavoriteRequest::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InsertFavoriteRequest::uid() const {
  // @@protoc_insertion_point(field_get:mysqlService.InsertFavoriteRequest.uid)
  return _internal_uid();
}
inline void InsertFavoriteRequest::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void InsertFavoriteRequest::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:mysqlService.InsertFavoriteRequest.uid)
}

// int32 fid = 2;
inline void InsertFavoriteRequest::clear_fid() {
  fid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InsertFavoriteRequest::_internal_fid() const {
  return fid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InsertFavoriteRequest::fid() const {
  // @@protoc_insertion_point(field_get:mysqlService.InsertFavoriteRequest.fid)
  return _internal_fid();
}
inline void InsertFavoriteRequest::_internal_set_fid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fid_ = value;
}
inline void InsertFavoriteRequest::set_fid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fid(value);
  // @@protoc_insertion_point(field_set:mysqlService.InsertFavoriteRequest.fid)
}

// -------------------------------------------------------------------

// DeleteFavoriteRequest

// int32 uid = 1;
inline void DeleteFavoriteRequest::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeleteFavoriteRequest::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeleteFavoriteRequest::uid() const {
  // @@protoc_insertion_point(field_get:mysqlService.DeleteFavoriteRequest.uid)
  return _internal_uid();
}
inline void DeleteFavoriteRequest::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void DeleteFavoriteRequest::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:mysqlService.DeleteFavoriteRequest.uid)
}

// int32 fid = 2;
inline void DeleteFavoriteRequest::clear_fid() {
  fid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeleteFavoriteRequest::_internal_fid() const {
  return fid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeleteFavoriteRequest::fid() const {
  // @@protoc_insertion_point(field_get:mysqlService.DeleteFavoriteRequest.fid)
  return _internal_fid();
}
inline void DeleteFavoriteRequest::_internal_set_fid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fid_ = value;
}
inline void DeleteFavoriteRequest::set_fid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fid(value);
  // @@protoc_insertion_point(field_set:mysqlService.DeleteFavoriteRequest.fid)
}

// -------------------------------------------------------------------

// UpdateFavoriteResponse

// int32 uid = 1;
inline void UpdateFavoriteResponse::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateFavoriteResponse::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateFavoriteResponse::uid() const {
  // @@protoc_insertion_point(field_get:mysqlService.UpdateFavoriteResponse.uid)
  return _internal_uid();
}
inline void UpdateFavoriteResponse::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void UpdateFavoriteResponse::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:mysqlService.UpdateFavoriteResponse.uid)
}

// int32 updateKind = 2;
inline void UpdateFavoriteResponse::clear_updatekind() {
  updatekind_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateFavoriteResponse::_internal_updatekind() const {
  return updatekind_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateFavoriteResponse::updatekind() const {
  // @@protoc_insertion_point(field_get:mysqlService.UpdateFavoriteResponse.updateKind)
  return _internal_updatekind();
}
inline void UpdateFavoriteResponse::_internal_set_updatekind(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  updatekind_ = value;
}
inline void UpdateFavoriteResponse::set_updatekind(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_updatekind(value);
  // @@protoc_insertion_point(field_set:mysqlService.UpdateFavoriteResponse.updateKind)
}

// bool result = 3;
inline void UpdateFavoriteResponse::clear_result() {
  result_ = false;
}
inline bool UpdateFavoriteResponse::_internal_result() const {
  return result_;
}
inline bool UpdateFavoriteResponse::result() const {
  // @@protoc_insertion_point(field_get:mysqlService.UpdateFavoriteResponse.result)
  return _internal_result();
}
inline void UpdateFavoriteResponse::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void UpdateFavoriteResponse::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:mysqlService.UpdateFavoriteResponse.result)
}

// -------------------------------------------------------------------

// InsertFriendRequest

// int32 uid = 1;
inline void InsertFriendRequest::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InsertFriendRequest::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InsertFriendRequest::uid() const {
  // @@protoc_insertion_point(field_get:mysqlService.InsertFriendRequest.uid)
  return _internal_uid();
}
inline void InsertFriendRequest::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void InsertFriendRequest::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:mysqlService.InsertFriendRequest.uid)
}

// int32 friend_id = 2;
inline void InsertFriendRequest::clear_friend_id() {
  friend_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InsertFriendRequest::_internal_friend_id() const {
  return friend_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InsertFriendRequest::friend_id() const {
  // @@protoc_insertion_point(field_get:mysqlService.InsertFriendRequest.friend_id)
  return _internal_friend_id();
}
inline void InsertFriendRequest::_internal_set_friend_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  friend_id_ = value;
}
inline void InsertFriendRequest::set_friend_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_friend_id(value);
  // @@protoc_insertion_point(field_set:mysqlService.InsertFriendRequest.friend_id)
}

// -------------------------------------------------------------------

// DeleteFriendRequest

// int32 uid = 1;
inline void DeleteFriendRequest::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeleteFriendRequest::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeleteFriendRequest::uid() const {
  // @@protoc_insertion_point(field_get:mysqlService.DeleteFriendRequest.uid)
  return _internal_uid();
}
inline void DeleteFriendRequest::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void DeleteFriendRequest::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:mysqlService.DeleteFriendRequest.uid)
}

// int32 friend_id = 2;
inline void DeleteFriendRequest::clear_friend_id() {
  friend_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeleteFriendRequest::_internal_friend_id() const {
  return friend_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeleteFriendRequest::friend_id() const {
  // @@protoc_insertion_point(field_get:mysqlService.DeleteFriendRequest.friend_id)
  return _internal_friend_id();
}
inline void DeleteFriendRequest::_internal_set_friend_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  friend_id_ = value;
}
inline void DeleteFriendRequest::set_friend_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_friend_id(value);
  // @@protoc_insertion_point(field_set:mysqlService.DeleteFriendRequest.friend_id)
}

// -------------------------------------------------------------------

// UpdateFriendResponse

// int32 uid = 1;
inline void UpdateFriendResponse::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateFriendResponse::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateFriendResponse::uid() const {
  // @@protoc_insertion_point(field_get:mysqlService.UpdateFriendResponse.uid)
  return _internal_uid();
}
inline void UpdateFriendResponse::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void UpdateFriendResponse::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:mysqlService.UpdateFriendResponse.uid)
}

// int32 updateKind = 2;
inline void UpdateFriendResponse::clear_updatekind() {
  updatekind_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateFriendResponse::_internal_updatekind() const {
  return updatekind_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateFriendResponse::updatekind() const {
  // @@protoc_insertion_point(field_get:mysqlService.UpdateFriendResponse.updateKind)
  return _internal_updatekind();
}
inline void UpdateFriendResponse::_internal_set_updatekind(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  updatekind_ = value;
}
inline void UpdateFriendResponse::set_updatekind(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_updatekind(value);
  // @@protoc_insertion_point(field_set:mysqlService.UpdateFriendResponse.updateKind)
}

// bool result = 3;
inline void UpdateFriendResponse::clear_result() {
  result_ = false;
}
inline bool UpdateFriendResponse::_internal_result() const {
  return result_;
}
inline bool UpdateFriendResponse::result() const {
  // @@protoc_insertion_point(field_get:mysqlService.UpdateFriendResponse.result)
  return _internal_result();
}
inline void UpdateFriendResponse::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void UpdateFriendResponse::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:mysqlService.UpdateFriendResponse.result)
}

// -------------------------------------------------------------------

// RegisterGroupRequest

// int32 uid = 1;
inline void RegisterGroupRequest::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegisterGroupRequest::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegisterGroupRequest::uid() const {
  // @@protoc_insertion_point(field_get:mysqlService.RegisterGroupRequest.uid)
  return _internal_uid();
}
inline void RegisterGroupRequest::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void RegisterGroupRequest::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:mysqlService.RegisterGroupRequest.uid)
}

// string name = 2;
inline void RegisterGroupRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& RegisterGroupRequest::name() const {
  // @@protoc_insertion_point(field_get:mysqlService.RegisterGroupRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RegisterGroupRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mysqlService.RegisterGroupRequest.name)
}
inline std::string* RegisterGroupRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:mysqlService.RegisterGroupRequest.name)
  return _s;
}
inline const std::string& RegisterGroupRequest::_internal_name() const {
  return name_.Get();
}
inline void RegisterGroupRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RegisterGroupRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RegisterGroupRequest::release_name() {
  // @@protoc_insertion_point(field_release:mysqlService.RegisterGroupRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RegisterGroupRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:mysqlService.RegisterGroupRequest.name)
}

// string summary = 3;
inline void RegisterGroupRequest::clear_summary() {
  summary_.ClearToEmpty();
}
inline const std::string& RegisterGroupRequest::summary() const {
  // @@protoc_insertion_point(field_get:mysqlService.RegisterGroupRequest.summary)
  return _internal_summary();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RegisterGroupRequest::set_summary(ArgT0&& arg0, ArgT... args) {
 
 summary_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mysqlService.RegisterGroupRequest.summary)
}
inline std::string* RegisterGroupRequest::mutable_summary() {
  std::string* _s = _internal_mutable_summary();
  // @@protoc_insertion_point(field_mutable:mysqlService.RegisterGroupRequest.summary)
  return _s;
}
inline const std::string& RegisterGroupRequest::_internal_summary() const {
  return summary_.Get();
}
inline void RegisterGroupRequest::_internal_set_summary(const std::string& value) {
  
  summary_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RegisterGroupRequest::_internal_mutable_summary() {
  
  return summary_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RegisterGroupRequest::release_summary() {
  // @@protoc_insertion_point(field_release:mysqlService.RegisterGroupRequest.summary)
  return summary_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RegisterGroupRequest::set_allocated_summary(std::string* summary) {
  if (summary != nullptr) {
    
  } else {
    
  }
  summary_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), summary,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:mysqlService.RegisterGroupRequest.summary)
}

// -------------------------------------------------------------------

// RegisterGroupResponse

// int32 uid = 1;
inline void RegisterGroupResponse::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegisterGroupResponse::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegisterGroupResponse::uid() const {
  // @@protoc_insertion_point(field_get:mysqlService.RegisterGroupResponse.uid)
  return _internal_uid();
}
inline void RegisterGroupResponse::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void RegisterGroupResponse::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:mysqlService.RegisterGroupResponse.uid)
}

// int32 gid = 2;
inline void RegisterGroupResponse::clear_gid() {
  gid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegisterGroupResponse::_internal_gid() const {
  return gid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegisterGroupResponse::gid() const {
  // @@protoc_insertion_point(field_get:mysqlService.RegisterGroupResponse.gid)
  return _internal_gid();
}
inline void RegisterGroupResponse::_internal_set_gid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gid_ = value;
}
inline void RegisterGroupResponse::set_gid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gid(value);
  // @@protoc_insertion_point(field_set:mysqlService.RegisterGroupResponse.gid)
}

// bool result = 3;
inline void RegisterGroupResponse::clear_result() {
  result_ = false;
}
inline bool RegisterGroupResponse::_internal_result() const {
  return result_;
}
inline bool RegisterGroupResponse::result() const {
  // @@protoc_insertion_point(field_get:mysqlService.RegisterGroupResponse.result)
  return _internal_result();
}
inline void RegisterGroupResponse::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void RegisterGroupResponse::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:mysqlService.RegisterGroupResponse.result)
}

// -------------------------------------------------------------------

// DeleteGroupRequest

// int32 uid = 1;
inline void DeleteGroupRequest::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeleteGroupRequest::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeleteGroupRequest::uid() const {
  // @@protoc_insertion_point(field_get:mysqlService.DeleteGroupRequest.uid)
  return _internal_uid();
}
inline void DeleteGroupRequest::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void DeleteGroupRequest::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:mysqlService.DeleteGroupRequest.uid)
}

// int32 gid = 2;
inline void DeleteGroupRequest::clear_gid() {
  gid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeleteGroupRequest::_internal_gid() const {
  return gid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeleteGroupRequest::gid() const {
  // @@protoc_insertion_point(field_get:mysqlService.DeleteGroupRequest.gid)
  return _internal_gid();
}
inline void DeleteGroupRequest::_internal_set_gid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gid_ = value;
}
inline void DeleteGroupRequest::set_gid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gid(value);
  // @@protoc_insertion_point(field_set:mysqlService.DeleteGroupRequest.gid)
}

// -------------------------------------------------------------------

// DeleteGroupResponse

// int32 uid = 1;
inline void DeleteGroupResponse::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeleteGroupResponse::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeleteGroupResponse::uid() const {
  // @@protoc_insertion_point(field_get:mysqlService.DeleteGroupResponse.uid)
  return _internal_uid();
}
inline void DeleteGroupResponse::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void DeleteGroupResponse::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:mysqlService.DeleteGroupResponse.uid)
}

// int32 gid = 2;
inline void DeleteGroupResponse::clear_gid() {
  gid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeleteGroupResponse::_internal_gid() const {
  return gid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeleteGroupResponse::gid() const {
  // @@protoc_insertion_point(field_get:mysqlService.DeleteGroupResponse.gid)
  return _internal_gid();
}
inline void DeleteGroupResponse::_internal_set_gid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gid_ = value;
}
inline void DeleteGroupResponse::set_gid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gid(value);
  // @@protoc_insertion_point(field_set:mysqlService.DeleteGroupResponse.gid)
}

// bool result = 3;
inline void DeleteGroupResponse::clear_result() {
  result_ = false;
}
inline bool DeleteGroupResponse::_internal_result() const {
  return result_;
}
inline bool DeleteGroupResponse::result() const {
  // @@protoc_insertion_point(field_get:mysqlService.DeleteGroupResponse.result)
  return _internal_result();
}
inline void DeleteGroupResponse::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void DeleteGroupResponse::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:mysqlService.DeleteGroupResponse.result)
}

// -------------------------------------------------------------------

// AddUserToGroupRequest

// int32 uid = 1;
inline void AddUserToGroupRequest::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddUserToGroupRequest::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddUserToGroupRequest::uid() const {
  // @@protoc_insertion_point(field_get:mysqlService.AddUserToGroupRequest.uid)
  return _internal_uid();
}
inline void AddUserToGroupRequest::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void AddUserToGroupRequest::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:mysqlService.AddUserToGroupRequest.uid)
}

// int32 gid = 2;
inline void AddUserToGroupRequest::clear_gid() {
  gid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddUserToGroupRequest::_internal_gid() const {
  return gid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddUserToGroupRequest::gid() const {
  // @@protoc_insertion_point(field_get:mysqlService.AddUserToGroupRequest.gid)
  return _internal_gid();
}
inline void AddUserToGroupRequest::_internal_set_gid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gid_ = value;
}
inline void AddUserToGroupRequest::set_gid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gid(value);
  // @@protoc_insertion_point(field_set:mysqlService.AddUserToGroupRequest.gid)
}

// -------------------------------------------------------------------

// AddUserToGroupResponse

// int32 uid = 1;
inline void AddUserToGroupResponse::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddUserToGroupResponse::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddUserToGroupResponse::uid() const {
  // @@protoc_insertion_point(field_get:mysqlService.AddUserToGroupResponse.uid)
  return _internal_uid();
}
inline void AddUserToGroupResponse::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void AddUserToGroupResponse::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:mysqlService.AddUserToGroupResponse.uid)
}

// int32 gid = 2;
inline void AddUserToGroupResponse::clear_gid() {
  gid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddUserToGroupResponse::_internal_gid() const {
  return gid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddUserToGroupResponse::gid() const {
  // @@protoc_insertion_point(field_get:mysqlService.AddUserToGroupResponse.gid)
  return _internal_gid();
}
inline void AddUserToGroupResponse::_internal_set_gid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gid_ = value;
}
inline void AddUserToGroupResponse::set_gid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gid(value);
  // @@protoc_insertion_point(field_set:mysqlService.AddUserToGroupResponse.gid)
}

// bool result = 3;
inline void AddUserToGroupResponse::clear_result() {
  result_ = false;
}
inline bool AddUserToGroupResponse::_internal_result() const {
  return result_;
}
inline bool AddUserToGroupResponse::result() const {
  // @@protoc_insertion_point(field_get:mysqlService.AddUserToGroupResponse.result)
  return _internal_result();
}
inline void AddUserToGroupResponse::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void AddUserToGroupResponse::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:mysqlService.AddUserToGroupResponse.result)
}

// -------------------------------------------------------------------

// DelUserFromGroupRequest

// int32 uid = 1;
inline void DelUserFromGroupRequest::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DelUserFromGroupRequest::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DelUserFromGroupRequest::uid() const {
  // @@protoc_insertion_point(field_get:mysqlService.DelUserFromGroupRequest.uid)
  return _internal_uid();
}
inline void DelUserFromGroupRequest::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void DelUserFromGroupRequest::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:mysqlService.DelUserFromGroupRequest.uid)
}

// int32 gid = 2;
inline void DelUserFromGroupRequest::clear_gid() {
  gid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DelUserFromGroupRequest::_internal_gid() const {
  return gid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DelUserFromGroupRequest::gid() const {
  // @@protoc_insertion_point(field_get:mysqlService.DelUserFromGroupRequest.gid)
  return _internal_gid();
}
inline void DelUserFromGroupRequest::_internal_set_gid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gid_ = value;
}
inline void DelUserFromGroupRequest::set_gid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gid(value);
  // @@protoc_insertion_point(field_set:mysqlService.DelUserFromGroupRequest.gid)
}

// -------------------------------------------------------------------

// DelUserFromGroupResponse

// int32 uid = 1;
inline void DelUserFromGroupResponse::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DelUserFromGroupResponse::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DelUserFromGroupResponse::uid() const {
  // @@protoc_insertion_point(field_get:mysqlService.DelUserFromGroupResponse.uid)
  return _internal_uid();
}
inline void DelUserFromGroupResponse::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void DelUserFromGroupResponse::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:mysqlService.DelUserFromGroupResponse.uid)
}

// int32 gid = 2;
inline void DelUserFromGroupResponse::clear_gid() {
  gid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DelUserFromGroupResponse::_internal_gid() const {
  return gid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DelUserFromGroupResponse::gid() const {
  // @@protoc_insertion_point(field_get:mysqlService.DelUserFromGroupResponse.gid)
  return _internal_gid();
}
inline void DelUserFromGroupResponse::_internal_set_gid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gid_ = value;
}
inline void DelUserFromGroupResponse::set_gid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gid(value);
  // @@protoc_insertion_point(field_set:mysqlService.DelUserFromGroupResponse.gid)
}

// bool result = 3;
inline void DelUserFromGroupResponse::clear_result() {
  result_ = false;
}
inline bool DelUserFromGroupResponse::_internal_result() const {
  return result_;
}
inline bool DelUserFromGroupResponse::result() const {
  // @@protoc_insertion_point(field_get:mysqlService.DelUserFromGroupResponse.result)
  return _internal_result();
}
inline void DelUserFromGroupResponse::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void DelUserFromGroupResponse::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:mysqlService.DelUserFromGroupResponse.result)
}

// -------------------------------------------------------------------

// GetMovieInfoRequest

// uint32 fid = 1;
inline void GetMovieInfoRequest::clear_fid() {
  fid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetMovieInfoRequest::_internal_fid() const {
  return fid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetMovieInfoRequest::fid() const {
  // @@protoc_insertion_point(field_get:mysqlService.GetMovieInfoRequest.fid)
  return _internal_fid();
}
inline void GetMovieInfoRequest::_internal_set_fid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  fid_ = value;
}
inline void GetMovieInfoRequest::set_fid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fid(value);
  // @@protoc_insertion_point(field_set:mysqlService.GetMovieInfoRequest.fid)
}

// uint32 fromId = 2;
inline void GetMovieInfoRequest::clear_fromid() {
  fromid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetMovieInfoRequest::_internal_fromid() const {
  return fromid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetMovieInfoRequest::fromid() const {
  // @@protoc_insertion_point(field_get:mysqlService.GetMovieInfoRequest.fromId)
  return _internal_fromid();
}
inline void GetMovieInfoRequest::_internal_set_fromid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  fromid_ = value;
}
inline void GetMovieInfoRequest::set_fromid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fromid(value);
  // @@protoc_insertion_point(field_set:mysqlService.GetMovieInfoRequest.fromId)
}

// -------------------------------------------------------------------

// GetMovieInfoResponse

// uint32 toId = 1;
inline void GetMovieInfoResponse::clear_toid() {
  toid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetMovieInfoResponse::_internal_toid() const {
  return toid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetMovieInfoResponse::toid() const {
  // @@protoc_insertion_point(field_get:mysqlService.GetMovieInfoResponse.toId)
  return _internal_toid();
}
inline void GetMovieInfoResponse::_internal_set_toid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  toid_ = value;
}
inline void GetMovieInfoResponse::set_toid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_toid(value);
  // @@protoc_insertion_point(field_set:mysqlService.GetMovieInfoResponse.toId)
}

// uint32 fid = 2;
inline void GetMovieInfoResponse::clear_fid() {
  fid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetMovieInfoResponse::_internal_fid() const {
  return fid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetMovieInfoResponse::fid() const {
  // @@protoc_insertion_point(field_get:mysqlService.GetMovieInfoResponse.fid)
  return _internal_fid();
}
inline void GetMovieInfoResponse::_internal_set_fid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  fid_ = value;
}
inline void GetMovieInfoResponse::set_fid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fid(value);
  // @@protoc_insertion_point(field_set:mysqlService.GetMovieInfoResponse.fid)
}

// string name = 3;
inline void GetMovieInfoResponse::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& GetMovieInfoResponse::name() const {
  // @@protoc_insertion_point(field_get:mysqlService.GetMovieInfoResponse.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetMovieInfoResponse::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mysqlService.GetMovieInfoResponse.name)
}
inline std::string* GetMovieInfoResponse::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:mysqlService.GetMovieInfoResponse.name)
  return _s;
}
inline const std::string& GetMovieInfoResponse::_internal_name() const {
  return name_.Get();
}
inline void GetMovieInfoResponse::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetMovieInfoResponse::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetMovieInfoResponse::release_name() {
  // @@protoc_insertion_point(field_release:mysqlService.GetMovieInfoResponse.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetMovieInfoResponse::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:mysqlService.GetMovieInfoResponse.name)
}

// string path = 4;
inline void GetMovieInfoResponse::clear_path() {
  path_.ClearToEmpty();
}
inline const std::string& GetMovieInfoResponse::path() const {
  // @@protoc_insertion_point(field_get:mysqlService.GetMovieInfoResponse.path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetMovieInfoResponse::set_path(ArgT0&& arg0, ArgT... args) {
 
 path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mysqlService.GetMovieInfoResponse.path)
}
inline std::string* GetMovieInfoResponse::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:mysqlService.GetMovieInfoResponse.path)
  return _s;
}
inline const std::string& GetMovieInfoResponse::_internal_path() const {
  return path_.Get();
}
inline void GetMovieInfoResponse::_internal_set_path(const std::string& value) {
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetMovieInfoResponse::_internal_mutable_path() {
  
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetMovieInfoResponse::release_path() {
  // @@protoc_insertion_point(field_release:mysqlService.GetMovieInfoResponse.path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetMovieInfoResponse::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:mysqlService.GetMovieInfoResponse.path)
}

// string summary = 5;
inline void GetMovieInfoResponse::clear_summary() {
  summary_.ClearToEmpty();
}
inline const std::string& GetMovieInfoResponse::summary() const {
  // @@protoc_insertion_point(field_get:mysqlService.GetMovieInfoResponse.summary)
  return _internal_summary();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetMovieInfoResponse::set_summary(ArgT0&& arg0, ArgT... args) {
 
 summary_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mysqlService.GetMovieInfoResponse.summary)
}
inline std::string* GetMovieInfoResponse::mutable_summary() {
  std::string* _s = _internal_mutable_summary();
  // @@protoc_insertion_point(field_mutable:mysqlService.GetMovieInfoResponse.summary)
  return _s;
}
inline const std::string& GetMovieInfoResponse::_internal_summary() const {
  return summary_.Get();
}
inline void GetMovieInfoResponse::_internal_set_summary(const std::string& value) {
  
  summary_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetMovieInfoResponse::_internal_mutable_summary() {
  
  return summary_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetMovieInfoResponse::release_summary() {
  // @@protoc_insertion_point(field_release:mysqlService.GetMovieInfoResponse.summary)
  return summary_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetMovieInfoResponse::set_allocated_summary(std::string* summary) {
  if (summary != nullptr) {
    
  } else {
    
  }
  summary_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), summary,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:mysqlService.GetMovieInfoResponse.summary)
}

// uint32 hotNums = 6;
inline void GetMovieInfoResponse::clear_hotnums() {
  hotnums_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetMovieInfoResponse::_internal_hotnums() const {
  return hotnums_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetMovieInfoResponse::hotnums() const {
  // @@protoc_insertion_point(field_get:mysqlService.GetMovieInfoResponse.hotNums)
  return _internal_hotnums();
}
inline void GetMovieInfoResponse::_internal_set_hotnums(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  hotnums_ = value;
}
inline void GetMovieInfoResponse::set_hotnums(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_hotnums(value);
  // @@protoc_insertion_point(field_set:mysqlService.GetMovieInfoResponse.hotNums)
}

// uint32 type = 7;
inline void GetMovieInfoResponse::clear_type() {
  type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetMovieInfoResponse::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetMovieInfoResponse::type() const {
  // @@protoc_insertion_point(field_get:mysqlService.GetMovieInfoResponse.type)
  return _internal_type();
}
inline void GetMovieInfoResponse::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  type_ = value;
}
inline void GetMovieInfoResponse::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:mysqlService.GetMovieInfoResponse.type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mysqlService

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mysqlService::RouterID> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mysqlService::RouterID>() {
  return ::mysqlService::RouterID_descriptor();
}
template <> struct is_proto_enum< ::mysqlService::UsersID> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mysqlService::UsersID>() {
  return ::mysqlService::UsersID_descriptor();
}
template <> struct is_proto_enum< ::mysqlService::GroupID> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mysqlService::GroupID>() {
  return ::mysqlService::GroupID_descriptor();
}
template <> struct is_proto_enum< ::mysqlService::MoviesID> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mysqlService::MoviesID>() {
  return ::mysqlService::MoviesID_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mysqlService_2eproto
