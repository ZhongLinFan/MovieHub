// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_user_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_user_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_user_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_user_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_user_2eproto;
namespace user {
class ChatGroup;
struct ChatGroupDefaultTypeInternal;
extern ChatGroupDefaultTypeInternal _ChatGroup_default_instance_;
class File;
struct FileDefaultTypeInternal;
extern FileDefaultTypeInternal _File_default_instance_;
class GetFriendsRequest;
struct GetFriendsRequestDefaultTypeInternal;
extern GetFriendsRequestDefaultTypeInternal _GetFriendsRequest_default_instance_;
class GetFriendsResponse;
struct GetFriendsResponseDefaultTypeInternal;
extern GetFriendsResponseDefaultTypeInternal _GetFriendsResponse_default_instance_;
class GetGroupMemberRequest;
struct GetGroupMemberRequestDefaultTypeInternal;
extern GetGroupMemberRequestDefaultTypeInternal _GetGroupMemberRequest_default_instance_;
class GetGroupMemberResponse;
struct GetGroupMemberResponseDefaultTypeInternal;
extern GetGroupMemberResponseDefaultTypeInternal _GetGroupMemberResponse_default_instance_;
class GetUserFavoriteRequest;
struct GetUserFavoriteRequestDefaultTypeInternal;
extern GetUserFavoriteRequestDefaultTypeInternal _GetUserFavoriteRequest_default_instance_;
class GetUserFavoriteResponse;
struct GetUserFavoriteResponseDefaultTypeInternal;
extern GetUserFavoriteResponseDefaultTypeInternal _GetUserFavoriteResponse_default_instance_;
class GetUserGroupsRequest;
struct GetUserGroupsRequestDefaultTypeInternal;
extern GetUserGroupsRequestDefaultTypeInternal _GetUserGroupsRequest_default_instance_;
class GetUserGroupsResponse;
struct GetUserGroupsResponseDefaultTypeInternal;
extern GetUserGroupsResponseDefaultTypeInternal _GetUserGroupsResponse_default_instance_;
class Person;
struct PersonDefaultTypeInternal;
extern PersonDefaultTypeInternal _Person_default_instance_;
}  // namespace user
PROTOBUF_NAMESPACE_OPEN
template<> ::user::ChatGroup* Arena::CreateMaybeMessage<::user::ChatGroup>(Arena*);
template<> ::user::File* Arena::CreateMaybeMessage<::user::File>(Arena*);
template<> ::user::GetFriendsRequest* Arena::CreateMaybeMessage<::user::GetFriendsRequest>(Arena*);
template<> ::user::GetFriendsResponse* Arena::CreateMaybeMessage<::user::GetFriendsResponse>(Arena*);
template<> ::user::GetGroupMemberRequest* Arena::CreateMaybeMessage<::user::GetGroupMemberRequest>(Arena*);
template<> ::user::GetGroupMemberResponse* Arena::CreateMaybeMessage<::user::GetGroupMemberResponse>(Arena*);
template<> ::user::GetUserFavoriteRequest* Arena::CreateMaybeMessage<::user::GetUserFavoriteRequest>(Arena*);
template<> ::user::GetUserFavoriteResponse* Arena::CreateMaybeMessage<::user::GetUserFavoriteResponse>(Arena*);
template<> ::user::GetUserGroupsRequest* Arena::CreateMaybeMessage<::user::GetUserGroupsRequest>(Arena*);
template<> ::user::GetUserGroupsResponse* Arena::CreateMaybeMessage<::user::GetUserGroupsResponse>(Arena*);
template<> ::user::Person* Arena::CreateMaybeMessage<::user::Person>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace user {

// ===================================================================

class ChatGroup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:user.ChatGroup) */ {
 public:
  inline ChatGroup() : ChatGroup(nullptr) {}
  ~ChatGroup() override;
  explicit constexpr ChatGroup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChatGroup(const ChatGroup& from);
  ChatGroup(ChatGroup&& from) noexcept
    : ChatGroup() {
    *this = ::std::move(from);
  }

  inline ChatGroup& operator=(const ChatGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatGroup& operator=(ChatGroup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatGroup* internal_default_instance() {
    return reinterpret_cast<const ChatGroup*>(
               &_ChatGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ChatGroup& a, ChatGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatGroup* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChatGroup* New() const final {
    return new ChatGroup();
  }

  ChatGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChatGroup>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChatGroup& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChatGroup& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatGroup* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "user.ChatGroup";
  }
  protected:
  explicit ChatGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kGidFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 gid = 2;
  void clear_gid();
  ::PROTOBUF_NAMESPACE_ID::int32 gid() const;
  void set_gid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gid() const;
  void _internal_set_gid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:user.ChatGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 gid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class File final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:user.File) */ {
 public:
  inline File() : File(nullptr) {}
  ~File() override;
  explicit constexpr File(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  File(const File& from);
  File(File&& from) noexcept
    : File() {
    *this = ::std::move(from);
  }

  inline File& operator=(const File& from) {
    CopyFrom(from);
    return *this;
  }
  inline File& operator=(File&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const File& default_instance() {
    return *internal_default_instance();
  }
  static inline const File* internal_default_instance() {
    return reinterpret_cast<const File*>(
               &_File_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(File& a, File& b) {
    a.Swap(&b);
  }
  inline void Swap(File* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(File* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline File* New() const final {
    return new File();
  }

  File* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<File>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const File& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const File& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(File* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "user.File";
  }
  protected:
  explicit File(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kFidFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 fid = 1;
  void clear_fid();
  ::PROTOBUF_NAMESPACE_ID::int32 fid() const;
  void set_fid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fid() const;
  void _internal_set_fid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:user.File)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 fid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class Person final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:user.Person) */ {
 public:
  inline Person() : Person(nullptr) {}
  ~Person() override;
  explicit constexpr Person(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Person(const Person& from);
  Person(Person&& from) noexcept
    : Person() {
    *this = ::std::move(from);
  }

  inline Person& operator=(const Person& from) {
    CopyFrom(from);
    return *this;
  }
  inline Person& operator=(Person&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Person& default_instance() {
    return *internal_default_instance();
  }
  static inline const Person* internal_default_instance() {
    return reinterpret_cast<const Person*>(
               &_Person_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Person& a, Person& b) {
    a.Swap(&b);
  }
  inline void Swap(Person* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Person* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Person* New() const final {
    return new Person();
  }

  Person* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Person>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Person& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Person& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Person* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "user.Person";
  }
  protected:
  explicit Person(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kUidFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:user.Person)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class GetUserFavoriteRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:user.GetUserFavoriteRequest) */ {
 public:
  inline GetUserFavoriteRequest() : GetUserFavoriteRequest(nullptr) {}
  ~GetUserFavoriteRequest() override;
  explicit constexpr GetUserFavoriteRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetUserFavoriteRequest(const GetUserFavoriteRequest& from);
  GetUserFavoriteRequest(GetUserFavoriteRequest&& from) noexcept
    : GetUserFavoriteRequest() {
    *this = ::std::move(from);
  }

  inline GetUserFavoriteRequest& operator=(const GetUserFavoriteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetUserFavoriteRequest& operator=(GetUserFavoriteRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetUserFavoriteRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetUserFavoriteRequest* internal_default_instance() {
    return reinterpret_cast<const GetUserFavoriteRequest*>(
               &_GetUserFavoriteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetUserFavoriteRequest& a, GetUserFavoriteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetUserFavoriteRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetUserFavoriteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetUserFavoriteRequest* New() const final {
    return new GetUserFavoriteRequest();
  }

  GetUserFavoriteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetUserFavoriteRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetUserFavoriteRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetUserFavoriteRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetUserFavoriteRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "user.GetUserFavoriteRequest";
  }
  protected:
  explicit GetUserFavoriteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
  };
  // int32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:user.GetUserFavoriteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class GetUserFavoriteResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:user.GetUserFavoriteResponse) */ {
 public:
  inline GetUserFavoriteResponse() : GetUserFavoriteResponse(nullptr) {}
  ~GetUserFavoriteResponse() override;
  explicit constexpr GetUserFavoriteResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetUserFavoriteResponse(const GetUserFavoriteResponse& from);
  GetUserFavoriteResponse(GetUserFavoriteResponse&& from) noexcept
    : GetUserFavoriteResponse() {
    *this = ::std::move(from);
  }

  inline GetUserFavoriteResponse& operator=(const GetUserFavoriteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetUserFavoriteResponse& operator=(GetUserFavoriteResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetUserFavoriteResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetUserFavoriteResponse* internal_default_instance() {
    return reinterpret_cast<const GetUserFavoriteResponse*>(
               &_GetUserFavoriteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetUserFavoriteResponse& a, GetUserFavoriteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetUserFavoriteResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetUserFavoriteResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetUserFavoriteResponse* New() const final {
    return new GetUserFavoriteResponse();
  }

  GetUserFavoriteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetUserFavoriteResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetUserFavoriteResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetUserFavoriteResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetUserFavoriteResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "user.GetUserFavoriteResponse";
  }
  protected:
  explicit GetUserFavoriteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileFieldNumber = 4,
    kUidFieldNumber = 1,
  };
  // repeated .user.File file = 4;
  int file_size() const;
  private:
  int _internal_file_size() const;
  public:
  void clear_file();
  ::user::File* mutable_file(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::user::File >*
      mutable_file();
  private:
  const ::user::File& _internal_file(int index) const;
  ::user::File* _internal_add_file();
  public:
  const ::user::File& file(int index) const;
  ::user::File* add_file();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::user::File >&
      file() const;

  // int32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:user.GetUserFavoriteResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::user::File > file_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class GetFriendsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:user.GetFriendsRequest) */ {
 public:
  inline GetFriendsRequest() : GetFriendsRequest(nullptr) {}
  ~GetFriendsRequest() override;
  explicit constexpr GetFriendsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetFriendsRequest(const GetFriendsRequest& from);
  GetFriendsRequest(GetFriendsRequest&& from) noexcept
    : GetFriendsRequest() {
    *this = ::std::move(from);
  }

  inline GetFriendsRequest& operator=(const GetFriendsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFriendsRequest& operator=(GetFriendsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetFriendsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetFriendsRequest* internal_default_instance() {
    return reinterpret_cast<const GetFriendsRequest*>(
               &_GetFriendsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetFriendsRequest& a, GetFriendsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetFriendsRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetFriendsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetFriendsRequest* New() const final {
    return new GetFriendsRequest();
  }

  GetFriendsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetFriendsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetFriendsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetFriendsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFriendsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "user.GetFriendsRequest";
  }
  protected:
  explicit GetFriendsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
  };
  // int32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:user.GetFriendsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class GetFriendsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:user.GetFriendsResponse) */ {
 public:
  inline GetFriendsResponse() : GetFriendsResponse(nullptr) {}
  ~GetFriendsResponse() override;
  explicit constexpr GetFriendsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetFriendsResponse(const GetFriendsResponse& from);
  GetFriendsResponse(GetFriendsResponse&& from) noexcept
    : GetFriendsResponse() {
    *this = ::std::move(from);
  }

  inline GetFriendsResponse& operator=(const GetFriendsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFriendsResponse& operator=(GetFriendsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetFriendsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetFriendsResponse* internal_default_instance() {
    return reinterpret_cast<const GetFriendsResponse*>(
               &_GetFriendsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetFriendsResponse& a, GetFriendsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetFriendsResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetFriendsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetFriendsResponse* New() const final {
    return new GetFriendsResponse();
  }

  GetFriendsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetFriendsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetFriendsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetFriendsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFriendsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "user.GetFriendsResponse";
  }
  protected:
  explicit GetFriendsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFriendFieldNumber = 2,
    kUidFieldNumber = 1,
  };
  // repeated .user.Person friend = 2;
  int friend__size() const;
  private:
  int _internal_friend__size() const;
  public:
  void clear_friend_();
  ::user::Person* mutable_friend_(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::user::Person >*
      mutable_friend_();
  private:
  const ::user::Person& _internal_friend_(int index) const;
  ::user::Person* _internal_add_friend_();
  public:
  const ::user::Person& friend_(int index) const;
  ::user::Person* add_friend_();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::user::Person >&
      friend_() const;

  // int32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:user.GetFriendsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::user::Person > friend__;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class GetGroupMemberRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:user.GetGroupMemberRequest) */ {
 public:
  inline GetGroupMemberRequest() : GetGroupMemberRequest(nullptr) {}
  ~GetGroupMemberRequest() override;
  explicit constexpr GetGroupMemberRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetGroupMemberRequest(const GetGroupMemberRequest& from);
  GetGroupMemberRequest(GetGroupMemberRequest&& from) noexcept
    : GetGroupMemberRequest() {
    *this = ::std::move(from);
  }

  inline GetGroupMemberRequest& operator=(const GetGroupMemberRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGroupMemberRequest& operator=(GetGroupMemberRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetGroupMemberRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetGroupMemberRequest* internal_default_instance() {
    return reinterpret_cast<const GetGroupMemberRequest*>(
               &_GetGroupMemberRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetGroupMemberRequest& a, GetGroupMemberRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGroupMemberRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetGroupMemberRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetGroupMemberRequest* New() const final {
    return new GetGroupMemberRequest();
  }

  GetGroupMemberRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetGroupMemberRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetGroupMemberRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetGroupMemberRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGroupMemberRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "user.GetGroupMemberRequest";
  }
  protected:
  explicit GetGroupMemberRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConditionFieldNumber = 3,
    kUidFieldNumber = 1,
    kGidFieldNumber = 2,
  };
  // string condition = 3;
  void clear_condition();
  const std::string& condition() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_condition(ArgT0&& arg0, ArgT... args);
  std::string* mutable_condition();
  PROTOBUF_MUST_USE_RESULT std::string* release_condition();
  void set_allocated_condition(std::string* condition);
  private:
  const std::string& _internal_condition() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_condition(const std::string& value);
  std::string* _internal_mutable_condition();
  public:

  // int32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 gid = 2;
  void clear_gid();
  ::PROTOBUF_NAMESPACE_ID::int32 gid() const;
  void set_gid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gid() const;
  void _internal_set_gid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:user.GetGroupMemberRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr condition_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 gid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class GetGroupMemberResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:user.GetGroupMemberResponse) */ {
 public:
  inline GetGroupMemberResponse() : GetGroupMemberResponse(nullptr) {}
  ~GetGroupMemberResponse() override;
  explicit constexpr GetGroupMemberResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetGroupMemberResponse(const GetGroupMemberResponse& from);
  GetGroupMemberResponse(GetGroupMemberResponse&& from) noexcept
    : GetGroupMemberResponse() {
    *this = ::std::move(from);
  }

  inline GetGroupMemberResponse& operator=(const GetGroupMemberResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGroupMemberResponse& operator=(GetGroupMemberResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetGroupMemberResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetGroupMemberResponse* internal_default_instance() {
    return reinterpret_cast<const GetGroupMemberResponse*>(
               &_GetGroupMemberResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GetGroupMemberResponse& a, GetGroupMemberResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGroupMemberResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetGroupMemberResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetGroupMemberResponse* New() const final {
    return new GetGroupMemberResponse();
  }

  GetGroupMemberResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetGroupMemberResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetGroupMemberResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetGroupMemberResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGroupMemberResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "user.GetGroupMemberResponse";
  }
  protected:
  explicit GetGroupMemberResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMemberFieldNumber = 3,
    kUidFieldNumber = 1,
    kGidFieldNumber = 2,
  };
  // repeated .user.Person member = 3;
  int member_size() const;
  private:
  int _internal_member_size() const;
  public:
  void clear_member();
  ::user::Person* mutable_member(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::user::Person >*
      mutable_member();
  private:
  const ::user::Person& _internal_member(int index) const;
  ::user::Person* _internal_add_member();
  public:
  const ::user::Person& member(int index) const;
  ::user::Person* add_member();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::user::Person >&
      member() const;

  // int32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 gid = 2;
  void clear_gid();
  ::PROTOBUF_NAMESPACE_ID::int32 gid() const;
  void set_gid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gid() const;
  void _internal_set_gid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:user.GetGroupMemberResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::user::Person > member_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 gid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class GetUserGroupsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:user.GetUserGroupsRequest) */ {
 public:
  inline GetUserGroupsRequest() : GetUserGroupsRequest(nullptr) {}
  ~GetUserGroupsRequest() override;
  explicit constexpr GetUserGroupsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetUserGroupsRequest(const GetUserGroupsRequest& from);
  GetUserGroupsRequest(GetUserGroupsRequest&& from) noexcept
    : GetUserGroupsRequest() {
    *this = ::std::move(from);
  }

  inline GetUserGroupsRequest& operator=(const GetUserGroupsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetUserGroupsRequest& operator=(GetUserGroupsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetUserGroupsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetUserGroupsRequest* internal_default_instance() {
    return reinterpret_cast<const GetUserGroupsRequest*>(
               &_GetUserGroupsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GetUserGroupsRequest& a, GetUserGroupsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetUserGroupsRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetUserGroupsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetUserGroupsRequest* New() const final {
    return new GetUserGroupsRequest();
  }

  GetUserGroupsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetUserGroupsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetUserGroupsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetUserGroupsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetUserGroupsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "user.GetUserGroupsRequest";
  }
  protected:
  explicit GetUserGroupsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
  };
  // int32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:user.GetUserGroupsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class GetUserGroupsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:user.GetUserGroupsResponse) */ {
 public:
  inline GetUserGroupsResponse() : GetUserGroupsResponse(nullptr) {}
  ~GetUserGroupsResponse() override;
  explicit constexpr GetUserGroupsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetUserGroupsResponse(const GetUserGroupsResponse& from);
  GetUserGroupsResponse(GetUserGroupsResponse&& from) noexcept
    : GetUserGroupsResponse() {
    *this = ::std::move(from);
  }

  inline GetUserGroupsResponse& operator=(const GetUserGroupsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetUserGroupsResponse& operator=(GetUserGroupsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetUserGroupsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetUserGroupsResponse* internal_default_instance() {
    return reinterpret_cast<const GetUserGroupsResponse*>(
               &_GetUserGroupsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GetUserGroupsResponse& a, GetUserGroupsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetUserGroupsResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetUserGroupsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetUserGroupsResponse* New() const final {
    return new GetUserGroupsResponse();
  }

  GetUserGroupsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetUserGroupsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetUserGroupsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetUserGroupsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetUserGroupsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "user.GetUserGroupsResponse";
  }
  protected:
  explicit GetUserGroupsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupFieldNumber = 2,
    kUidFieldNumber = 1,
  };
  // repeated .user.ChatGroup group = 2;
  int group_size() const;
  private:
  int _internal_group_size() const;
  public:
  void clear_group();
  ::user::ChatGroup* mutable_group(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::user::ChatGroup >*
      mutable_group();
  private:
  const ::user::ChatGroup& _internal_group(int index) const;
  ::user::ChatGroup* _internal_add_group();
  public:
  const ::user::ChatGroup& group(int index) const;
  ::user::ChatGroup* add_group();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::user::ChatGroup >&
      group() const;

  // int32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:user.GetUserGroupsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::user::ChatGroup > group_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ChatGroup

// string name = 1;
inline void ChatGroup::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ChatGroup::name() const {
  // @@protoc_insertion_point(field_get:user.ChatGroup.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatGroup::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:user.ChatGroup.name)
}
inline std::string* ChatGroup::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:user.ChatGroup.name)
  return _s;
}
inline const std::string& ChatGroup::_internal_name() const {
  return name_.Get();
}
inline void ChatGroup::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ChatGroup::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ChatGroup::release_name() {
  // @@protoc_insertion_point(field_release:user.ChatGroup.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ChatGroup::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:user.ChatGroup.name)
}

// int32 gid = 2;
inline void ChatGroup::clear_gid() {
  gid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChatGroup::_internal_gid() const {
  return gid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChatGroup::gid() const {
  // @@protoc_insertion_point(field_get:user.ChatGroup.gid)
  return _internal_gid();
}
inline void ChatGroup::_internal_set_gid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gid_ = value;
}
inline void ChatGroup::set_gid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gid(value);
  // @@protoc_insertion_point(field_set:user.ChatGroup.gid)
}

// -------------------------------------------------------------------

// File

// int32 fid = 1;
inline void File::clear_fid() {
  fid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 File::_internal_fid() const {
  return fid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 File::fid() const {
  // @@protoc_insertion_point(field_get:user.File.fid)
  return _internal_fid();
}
inline void File::_internal_set_fid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fid_ = value;
}
inline void File::set_fid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fid(value);
  // @@protoc_insertion_point(field_set:user.File.fid)
}

// string name = 2;
inline void File::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& File::name() const {
  // @@protoc_insertion_point(field_get:user.File.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void File::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:user.File.name)
}
inline std::string* File::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:user.File.name)
  return _s;
}
inline const std::string& File::_internal_name() const {
  return name_.Get();
}
inline void File::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* File::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* File::release_name() {
  // @@protoc_insertion_point(field_release:user.File.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void File::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:user.File.name)
}

// -------------------------------------------------------------------

// Person

// int32 uid = 1;
inline void Person::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Person::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Person::uid() const {
  // @@protoc_insertion_point(field_get:user.Person.uid)
  return _internal_uid();
}
inline void Person::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void Person::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:user.Person.uid)
}

// string name = 2;
inline void Person::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Person::name() const {
  // @@protoc_insertion_point(field_get:user.Person.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Person::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:user.Person.name)
}
inline std::string* Person::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:user.Person.name)
  return _s;
}
inline const std::string& Person::_internal_name() const {
  return name_.Get();
}
inline void Person::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Person::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Person::release_name() {
  // @@protoc_insertion_point(field_release:user.Person.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Person::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:user.Person.name)
}

// -------------------------------------------------------------------

// GetUserFavoriteRequest

// int32 uid = 1;
inline void GetUserFavoriteRequest::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetUserFavoriteRequest::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetUserFavoriteRequest::uid() const {
  // @@protoc_insertion_point(field_get:user.GetUserFavoriteRequest.uid)
  return _internal_uid();
}
inline void GetUserFavoriteRequest::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void GetUserFavoriteRequest::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:user.GetUserFavoriteRequest.uid)
}

// -------------------------------------------------------------------

// GetUserFavoriteResponse

// int32 uid = 1;
inline void GetUserFavoriteResponse::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetUserFavoriteResponse::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetUserFavoriteResponse::uid() const {
  // @@protoc_insertion_point(field_get:user.GetUserFavoriteResponse.uid)
  return _internal_uid();
}
inline void GetUserFavoriteResponse::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void GetUserFavoriteResponse::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:user.GetUserFavoriteResponse.uid)
}

// repeated .user.File file = 4;
inline int GetUserFavoriteResponse::_internal_file_size() const {
  return file_.size();
}
inline int GetUserFavoriteResponse::file_size() const {
  return _internal_file_size();
}
inline void GetUserFavoriteResponse::clear_file() {
  file_.Clear();
}
inline ::user::File* GetUserFavoriteResponse::mutable_file(int index) {
  // @@protoc_insertion_point(field_mutable:user.GetUserFavoriteResponse.file)
  return file_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::user::File >*
GetUserFavoriteResponse::mutable_file() {
  // @@protoc_insertion_point(field_mutable_list:user.GetUserFavoriteResponse.file)
  return &file_;
}
inline const ::user::File& GetUserFavoriteResponse::_internal_file(int index) const {
  return file_.Get(index);
}
inline const ::user::File& GetUserFavoriteResponse::file(int index) const {
  // @@protoc_insertion_point(field_get:user.GetUserFavoriteResponse.file)
  return _internal_file(index);
}
inline ::user::File* GetUserFavoriteResponse::_internal_add_file() {
  return file_.Add();
}
inline ::user::File* GetUserFavoriteResponse::add_file() {
  ::user::File* _add = _internal_add_file();
  // @@protoc_insertion_point(field_add:user.GetUserFavoriteResponse.file)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::user::File >&
GetUserFavoriteResponse::file() const {
  // @@protoc_insertion_point(field_list:user.GetUserFavoriteResponse.file)
  return file_;
}

// -------------------------------------------------------------------

// GetFriendsRequest

// int32 uid = 1;
inline void GetFriendsRequest::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetFriendsRequest::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetFriendsRequest::uid() const {
  // @@protoc_insertion_point(field_get:user.GetFriendsRequest.uid)
  return _internal_uid();
}
inline void GetFriendsRequest::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void GetFriendsRequest::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:user.GetFriendsRequest.uid)
}

// -------------------------------------------------------------------

// GetFriendsResponse

// int32 uid = 1;
inline void GetFriendsResponse::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetFriendsResponse::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetFriendsResponse::uid() const {
  // @@protoc_insertion_point(field_get:user.GetFriendsResponse.uid)
  return _internal_uid();
}
inline void GetFriendsResponse::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void GetFriendsResponse::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:user.GetFriendsResponse.uid)
}

// repeated .user.Person friend = 2;
inline int GetFriendsResponse::_internal_friend__size() const {
  return friend__.size();
}
inline int GetFriendsResponse::friend__size() const {
  return _internal_friend__size();
}
inline void GetFriendsResponse::clear_friend_() {
  friend__.Clear();
}
inline ::user::Person* GetFriendsResponse::mutable_friend_(int index) {
  // @@protoc_insertion_point(field_mutable:user.GetFriendsResponse.friend)
  return friend__.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::user::Person >*
GetFriendsResponse::mutable_friend_() {
  // @@protoc_insertion_point(field_mutable_list:user.GetFriendsResponse.friend)
  return &friend__;
}
inline const ::user::Person& GetFriendsResponse::_internal_friend_(int index) const {
  return friend__.Get(index);
}
inline const ::user::Person& GetFriendsResponse::friend_(int index) const {
  // @@protoc_insertion_point(field_get:user.GetFriendsResponse.friend)
  return _internal_friend_(index);
}
inline ::user::Person* GetFriendsResponse::_internal_add_friend_() {
  return friend__.Add();
}
inline ::user::Person* GetFriendsResponse::add_friend_() {
  ::user::Person* _add = _internal_add_friend_();
  // @@protoc_insertion_point(field_add:user.GetFriendsResponse.friend)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::user::Person >&
GetFriendsResponse::friend_() const {
  // @@protoc_insertion_point(field_list:user.GetFriendsResponse.friend)
  return friend__;
}

// -------------------------------------------------------------------

// GetGroupMemberRequest

// int32 uid = 1;
inline void GetGroupMemberRequest::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetGroupMemberRequest::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetGroupMemberRequest::uid() const {
  // @@protoc_insertion_point(field_get:user.GetGroupMemberRequest.uid)
  return _internal_uid();
}
inline void GetGroupMemberRequest::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void GetGroupMemberRequest::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:user.GetGroupMemberRequest.uid)
}

// int32 gid = 2;
inline void GetGroupMemberRequest::clear_gid() {
  gid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetGroupMemberRequest::_internal_gid() const {
  return gid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetGroupMemberRequest::gid() const {
  // @@protoc_insertion_point(field_get:user.GetGroupMemberRequest.gid)
  return _internal_gid();
}
inline void GetGroupMemberRequest::_internal_set_gid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gid_ = value;
}
inline void GetGroupMemberRequest::set_gid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gid(value);
  // @@protoc_insertion_point(field_set:user.GetGroupMemberRequest.gid)
}

// string condition = 3;
inline void GetGroupMemberRequest::clear_condition() {
  condition_.ClearToEmpty();
}
inline const std::string& GetGroupMemberRequest::condition() const {
  // @@protoc_insertion_point(field_get:user.GetGroupMemberRequest.condition)
  return _internal_condition();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetGroupMemberRequest::set_condition(ArgT0&& arg0, ArgT... args) {
 
 condition_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:user.GetGroupMemberRequest.condition)
}
inline std::string* GetGroupMemberRequest::mutable_condition() {
  std::string* _s = _internal_mutable_condition();
  // @@protoc_insertion_point(field_mutable:user.GetGroupMemberRequest.condition)
  return _s;
}
inline const std::string& GetGroupMemberRequest::_internal_condition() const {
  return condition_.Get();
}
inline void GetGroupMemberRequest::_internal_set_condition(const std::string& value) {
  
  condition_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetGroupMemberRequest::_internal_mutable_condition() {
  
  return condition_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetGroupMemberRequest::release_condition() {
  // @@protoc_insertion_point(field_release:user.GetGroupMemberRequest.condition)
  return condition_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetGroupMemberRequest::set_allocated_condition(std::string* condition) {
  if (condition != nullptr) {
    
  } else {
    
  }
  condition_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), condition,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:user.GetGroupMemberRequest.condition)
}

// -------------------------------------------------------------------

// GetGroupMemberResponse

// int32 uid = 1;
inline void GetGroupMemberResponse::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetGroupMemberResponse::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetGroupMemberResponse::uid() const {
  // @@protoc_insertion_point(field_get:user.GetGroupMemberResponse.uid)
  return _internal_uid();
}
inline void GetGroupMemberResponse::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void GetGroupMemberResponse::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:user.GetGroupMemberResponse.uid)
}

// int32 gid = 2;
inline void GetGroupMemberResponse::clear_gid() {
  gid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetGroupMemberResponse::_internal_gid() const {
  return gid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetGroupMemberResponse::gid() const {
  // @@protoc_insertion_point(field_get:user.GetGroupMemberResponse.gid)
  return _internal_gid();
}
inline void GetGroupMemberResponse::_internal_set_gid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gid_ = value;
}
inline void GetGroupMemberResponse::set_gid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gid(value);
  // @@protoc_insertion_point(field_set:user.GetGroupMemberResponse.gid)
}

// repeated .user.Person member = 3;
inline int GetGroupMemberResponse::_internal_member_size() const {
  return member_.size();
}
inline int GetGroupMemberResponse::member_size() const {
  return _internal_member_size();
}
inline void GetGroupMemberResponse::clear_member() {
  member_.Clear();
}
inline ::user::Person* GetGroupMemberResponse::mutable_member(int index) {
  // @@protoc_insertion_point(field_mutable:user.GetGroupMemberResponse.member)
  return member_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::user::Person >*
GetGroupMemberResponse::mutable_member() {
  // @@protoc_insertion_point(field_mutable_list:user.GetGroupMemberResponse.member)
  return &member_;
}
inline const ::user::Person& GetGroupMemberResponse::_internal_member(int index) const {
  return member_.Get(index);
}
inline const ::user::Person& GetGroupMemberResponse::member(int index) const {
  // @@protoc_insertion_point(field_get:user.GetGroupMemberResponse.member)
  return _internal_member(index);
}
inline ::user::Person* GetGroupMemberResponse::_internal_add_member() {
  return member_.Add();
}
inline ::user::Person* GetGroupMemberResponse::add_member() {
  ::user::Person* _add = _internal_add_member();
  // @@protoc_insertion_point(field_add:user.GetGroupMemberResponse.member)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::user::Person >&
GetGroupMemberResponse::member() const {
  // @@protoc_insertion_point(field_list:user.GetGroupMemberResponse.member)
  return member_;
}

// -------------------------------------------------------------------

// GetUserGroupsRequest

// int32 uid = 1;
inline void GetUserGroupsRequest::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetUserGroupsRequest::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetUserGroupsRequest::uid() const {
  // @@protoc_insertion_point(field_get:user.GetUserGroupsRequest.uid)
  return _internal_uid();
}
inline void GetUserGroupsRequest::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void GetUserGroupsRequest::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:user.GetUserGroupsRequest.uid)
}

// -------------------------------------------------------------------

// GetUserGroupsResponse

// int32 uid = 1;
inline void GetUserGroupsResponse::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetUserGroupsResponse::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetUserGroupsResponse::uid() const {
  // @@protoc_insertion_point(field_get:user.GetUserGroupsResponse.uid)
  return _internal_uid();
}
inline void GetUserGroupsResponse::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void GetUserGroupsResponse::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:user.GetUserGroupsResponse.uid)
}

// repeated .user.ChatGroup group = 2;
inline int GetUserGroupsResponse::_internal_group_size() const {
  return group_.size();
}
inline int GetUserGroupsResponse::group_size() const {
  return _internal_group_size();
}
inline void GetUserGroupsResponse::clear_group() {
  group_.Clear();
}
inline ::user::ChatGroup* GetUserGroupsResponse::mutable_group(int index) {
  // @@protoc_insertion_point(field_mutable:user.GetUserGroupsResponse.group)
  return group_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::user::ChatGroup >*
GetUserGroupsResponse::mutable_group() {
  // @@protoc_insertion_point(field_mutable_list:user.GetUserGroupsResponse.group)
  return &group_;
}
inline const ::user::ChatGroup& GetUserGroupsResponse::_internal_group(int index) const {
  return group_.Get(index);
}
inline const ::user::ChatGroup& GetUserGroupsResponse::group(int index) const {
  // @@protoc_insertion_point(field_get:user.GetUserGroupsResponse.group)
  return _internal_group(index);
}
inline ::user::ChatGroup* GetUserGroupsResponse::_internal_add_group() {
  return group_.Add();
}
inline ::user::ChatGroup* GetUserGroupsResponse::add_group() {
  ::user::ChatGroup* _add = _internal_add_group();
  // @@protoc_insertion_point(field_add:user.GetUserGroupsResponse.group)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::user::ChatGroup >&
GetUserGroupsResponse::group() const {
  // @@protoc_insertion_point(field_list:user.GetUserGroupsResponse.group)
  return group_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace user

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_user_2eproto
