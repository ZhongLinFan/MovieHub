// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: baseService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_baseService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_baseService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "user.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_baseService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_baseService_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_baseService_2eproto;
namespace baseService {
class AddFavoriteRequest;
struct AddFavoriteRequestDefaultTypeInternal;
extern AddFavoriteRequestDefaultTypeInternal _AddFavoriteRequest_default_instance_;
class AddFavoriteResponse;
struct AddFavoriteResponseDefaultTypeInternal;
extern AddFavoriteResponseDefaultTypeInternal _AddFavoriteResponse_default_instance_;
class AddRelationsRequest;
struct AddRelationsRequestDefaultTypeInternal;
extern AddRelationsRequestDefaultTypeInternal _AddRelationsRequest_default_instance_;
class AddRelationsResponse;
struct AddRelationsResponseDefaultTypeInternal;
extern AddRelationsResponseDefaultTypeInternal _AddRelationsResponse_default_instance_;
class LoginRequest;
struct LoginRequestDefaultTypeInternal;
extern LoginRequestDefaultTypeInternal _LoginRequest_default_instance_;
class LoginResponse;
struct LoginResponseDefaultTypeInternal;
extern LoginResponseDefaultTypeInternal _LoginResponse_default_instance_;
class LogoutRequest;
struct LogoutRequestDefaultTypeInternal;
extern LogoutRequestDefaultTypeInternal _LogoutRequest_default_instance_;
class MsgNotify;
struct MsgNotifyDefaultTypeInternal;
extern MsgNotifyDefaultTypeInternal _MsgNotify_default_instance_;
class RegisterRequest;
struct RegisterRequestDefaultTypeInternal;
extern RegisterRequestDefaultTypeInternal _RegisterRequest_default_instance_;
class RegisterResponse;
struct RegisterResponseDefaultTypeInternal;
extern RegisterResponseDefaultTypeInternal _RegisterResponse_default_instance_;
class SendMsgRequest;
struct SendMsgRequestDefaultTypeInternal;
extern SendMsgRequestDefaultTypeInternal _SendMsgRequest_default_instance_;
class SendMsgResponse;
struct SendMsgResponseDefaultTypeInternal;
extern SendMsgResponseDefaultTypeInternal _SendMsgResponse_default_instance_;
}  // namespace baseService
PROTOBUF_NAMESPACE_OPEN
template<> ::baseService::AddFavoriteRequest* Arena::CreateMaybeMessage<::baseService::AddFavoriteRequest>(Arena*);
template<> ::baseService::AddFavoriteResponse* Arena::CreateMaybeMessage<::baseService::AddFavoriteResponse>(Arena*);
template<> ::baseService::AddRelationsRequest* Arena::CreateMaybeMessage<::baseService::AddRelationsRequest>(Arena*);
template<> ::baseService::AddRelationsResponse* Arena::CreateMaybeMessage<::baseService::AddRelationsResponse>(Arena*);
template<> ::baseService::LoginRequest* Arena::CreateMaybeMessage<::baseService::LoginRequest>(Arena*);
template<> ::baseService::LoginResponse* Arena::CreateMaybeMessage<::baseService::LoginResponse>(Arena*);
template<> ::baseService::LogoutRequest* Arena::CreateMaybeMessage<::baseService::LogoutRequest>(Arena*);
template<> ::baseService::MsgNotify* Arena::CreateMaybeMessage<::baseService::MsgNotify>(Arena*);
template<> ::baseService::RegisterRequest* Arena::CreateMaybeMessage<::baseService::RegisterRequest>(Arena*);
template<> ::baseService::RegisterResponse* Arena::CreateMaybeMessage<::baseService::RegisterResponse>(Arena*);
template<> ::baseService::SendMsgRequest* Arena::CreateMaybeMessage<::baseService::SendMsgRequest>(Arena*);
template<> ::baseService::SendMsgResponse* Arena::CreateMaybeMessage<::baseService::SendMsgResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace baseService {

enum MessageID : int {
  ID_UNKNOW = 0,
  ID_LoginRequest = 1,
  ID_LoginResponse = 2,
  ID_SendMsgRequest = 3,
  ID_SendMsgResponse = 4,
  ID_UserEnter = 5,
  ID_UserLeave = 6,
  ID_MsgNotify = 7,
  ID_RegisterRequest = 8,
  ID_RegisterResponse = 9,
  ID_AddRelationsRequest = 10,
  ID_AddRelationsResponse = 11,
  ID_LogoutRequest = 12,
  ID_AddFavoriteRequest = 13,
  ID_AddFavoriteResponse = 14,
  MessageID_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MessageID_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MessageID_IsValid(int value);
constexpr MessageID MessageID_MIN = ID_UNKNOW;
constexpr MessageID MessageID_MAX = ID_AddFavoriteResponse;
constexpr int MessageID_ARRAYSIZE = MessageID_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageID_descriptor();
template<typename T>
inline const std::string& MessageID_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MessageID>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MessageID_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MessageID_descriptor(), enum_t_value);
}
inline bool MessageID_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MessageID* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MessageID>(
    MessageID_descriptor(), name, value);
}
// ===================================================================

class LoginRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:baseService.LoginRequest) */ {
 public:
  inline LoginRequest() : LoginRequest(nullptr) {}
  ~LoginRequest() override;
  explicit constexpr LoginRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginRequest(const LoginRequest& from);
  LoginRequest(LoginRequest&& from) noexcept
    : LoginRequest() {
    *this = ::std::move(from);
  }

  inline LoginRequest& operator=(const LoginRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginRequest& operator=(LoginRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoginRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginRequest* internal_default_instance() {
    return reinterpret_cast<const LoginRequest*>(
               &_LoginRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LoginRequest& a, LoginRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginRequest* New() const final {
    return new LoginRequest();
  }

  LoginRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoginRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LoginRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "baseService.LoginRequest";
  }
  protected:
  explicit LoginRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPasswdFieldNumber = 2,
    kUidFieldNumber = 1,
  };
  // string passwd = 2;
  void clear_passwd();
  const std::string& passwd() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_passwd(ArgT0&& arg0, ArgT... args);
  std::string* mutable_passwd();
  PROTOBUF_MUST_USE_RESULT std::string* release_passwd();
  void set_allocated_passwd(std::string* passwd);
  private:
  const std::string& _internal_passwd() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_passwd(const std::string& value);
  std::string* _internal_mutable_passwd();
  public:

  // int32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:baseService.LoginRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr passwd_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_baseService_2eproto;
};
// -------------------------------------------------------------------

class LoginResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:baseService.LoginResponse) */ {
 public:
  inline LoginResponse() : LoginResponse(nullptr) {}
  ~LoginResponse() override;
  explicit constexpr LoginResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginResponse(const LoginResponse& from);
  LoginResponse(LoginResponse&& from) noexcept
    : LoginResponse() {
    *this = ::std::move(from);
  }

  inline LoginResponse& operator=(const LoginResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginResponse& operator=(LoginResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoginResponse& default_instance() {
    return *internal_default_instance();
  }
  enum LoginResultCase {
    kResult = 2,
    kFavoriteList = 3,
    kFriendList = 4,
    kGroupList = 5,
    LOGINRESULT_NOT_SET = 0,
  };

  static inline const LoginResponse* internal_default_instance() {
    return reinterpret_cast<const LoginResponse*>(
               &_LoginResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LoginResponse& a, LoginResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginResponse* New() const final {
    return new LoginResponse();
  }

  LoginResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoginResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LoginResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "baseService.LoginResponse";
  }
  protected:
  explicit LoginResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
    kResultFieldNumber = 2,
    kFavoriteListFieldNumber = 3,
    kFriendListFieldNumber = 4,
    kGroupListFieldNumber = 5,
  };
  // int32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 result = 2;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .user.GetUserFavoriteResponse favoriteList = 3;
  bool has_favoritelist() const;
  private:
  bool _internal_has_favoritelist() const;
  public:
  void clear_favoritelist();
  const ::user::GetUserFavoriteResponse& favoritelist() const;
  PROTOBUF_MUST_USE_RESULT ::user::GetUserFavoriteResponse* release_favoritelist();
  ::user::GetUserFavoriteResponse* mutable_favoritelist();
  void set_allocated_favoritelist(::user::GetUserFavoriteResponse* favoritelist);
  private:
  const ::user::GetUserFavoriteResponse& _internal_favoritelist() const;
  ::user::GetUserFavoriteResponse* _internal_mutable_favoritelist();
  public:
  void unsafe_arena_set_allocated_favoritelist(
      ::user::GetUserFavoriteResponse* favoritelist);
  ::user::GetUserFavoriteResponse* unsafe_arena_release_favoritelist();

  // .user.GetFriendsResponse friendList = 4;
  bool has_friendlist() const;
  private:
  bool _internal_has_friendlist() const;
  public:
  void clear_friendlist();
  const ::user::GetFriendsResponse& friendlist() const;
  PROTOBUF_MUST_USE_RESULT ::user::GetFriendsResponse* release_friendlist();
  ::user::GetFriendsResponse* mutable_friendlist();
  void set_allocated_friendlist(::user::GetFriendsResponse* friendlist);
  private:
  const ::user::GetFriendsResponse& _internal_friendlist() const;
  ::user::GetFriendsResponse* _internal_mutable_friendlist();
  public:
  void unsafe_arena_set_allocated_friendlist(
      ::user::GetFriendsResponse* friendlist);
  ::user::GetFriendsResponse* unsafe_arena_release_friendlist();

  // .user.GetUserGroupsResponse groupList = 5;
  bool has_grouplist() const;
  private:
  bool _internal_has_grouplist() const;
  public:
  void clear_grouplist();
  const ::user::GetUserGroupsResponse& grouplist() const;
  PROTOBUF_MUST_USE_RESULT ::user::GetUserGroupsResponse* release_grouplist();
  ::user::GetUserGroupsResponse* mutable_grouplist();
  void set_allocated_grouplist(::user::GetUserGroupsResponse* grouplist);
  private:
  const ::user::GetUserGroupsResponse& _internal_grouplist() const;
  ::user::GetUserGroupsResponse* _internal_mutable_grouplist();
  public:
  void unsafe_arena_set_allocated_grouplist(
      ::user::GetUserGroupsResponse* grouplist);
  ::user::GetUserGroupsResponse* unsafe_arena_release_grouplist();

  void clear_loginResult();
  LoginResultCase loginResult_case() const;
  // @@protoc_insertion_point(class_scope:baseService.LoginResponse)
 private:
  class _Internal;
  void set_has_result();
  void set_has_favoritelist();
  void set_has_friendlist();
  void set_has_grouplist();

  inline bool has_loginResult() const;
  inline void clear_has_loginResult();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  union LoginResultUnion {
    constexpr LoginResultUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::int32 result_;
    ::user::GetUserFavoriteResponse* favoritelist_;
    ::user::GetFriendsResponse* friendlist_;
    ::user::GetUserGroupsResponse* grouplist_;
  } loginResult_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_baseService_2eproto;
};
// -------------------------------------------------------------------

class SendMsgRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:baseService.SendMsgRequest) */ {
 public:
  inline SendMsgRequest() : SendMsgRequest(nullptr) {}
  ~SendMsgRequest() override;
  explicit constexpr SendMsgRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendMsgRequest(const SendMsgRequest& from);
  SendMsgRequest(SendMsgRequest&& from) noexcept
    : SendMsgRequest() {
    *this = ::std::move(from);
  }

  inline SendMsgRequest& operator=(const SendMsgRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendMsgRequest& operator=(SendMsgRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendMsgRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendMsgRequest* internal_default_instance() {
    return reinterpret_cast<const SendMsgRequest*>(
               &_SendMsgRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SendMsgRequest& a, SendMsgRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SendMsgRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendMsgRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendMsgRequest* New() const final {
    return new SendMsgRequest();
  }

  SendMsgRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendMsgRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SendMsgRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SendMsgRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendMsgRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "baseService.SendMsgRequest";
  }
  protected:
  explicit SendMsgRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kModidFieldNumber = 1,
    kToIdFieldNumber = 3,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_MUST_USE_RESULT std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 modid = 1;
  void clear_modid();
  ::PROTOBUF_NAMESPACE_ID::int32 modid() const;
  void set_modid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_modid() const;
  void _internal_set_modid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 toId = 3;
  void clear_toid();
  ::PROTOBUF_NAMESPACE_ID::int32 toid() const;
  void set_toid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_toid() const;
  void _internal_set_toid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:baseService.SendMsgRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 modid_;
  ::PROTOBUF_NAMESPACE_ID::int32 toid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_baseService_2eproto;
};
// -------------------------------------------------------------------

class SendMsgResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:baseService.SendMsgResponse) */ {
 public:
  inline SendMsgResponse() : SendMsgResponse(nullptr) {}
  ~SendMsgResponse() override;
  explicit constexpr SendMsgResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendMsgResponse(const SendMsgResponse& from);
  SendMsgResponse(SendMsgResponse&& from) noexcept
    : SendMsgResponse() {
    *this = ::std::move(from);
  }

  inline SendMsgResponse& operator=(const SendMsgResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendMsgResponse& operator=(SendMsgResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendMsgResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendMsgResponse* internal_default_instance() {
    return reinterpret_cast<const SendMsgResponse*>(
               &_SendMsgResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SendMsgResponse& a, SendMsgResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SendMsgResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendMsgResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendMsgResponse* New() const final {
    return new SendMsgResponse();
  }

  SendMsgResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendMsgResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SendMsgResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SendMsgResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendMsgResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "baseService.SendMsgResponse";
  }
  protected:
  explicit SendMsgResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromIdFieldNumber = 1,
    kResultFieldNumber = 2,
  };
  // int32 fromId = 1;
  void clear_fromid();
  ::PROTOBUF_NAMESPACE_ID::int32 fromid() const;
  void set_fromid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fromid() const;
  void _internal_set_fromid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 result = 2;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:baseService.SendMsgResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 fromid_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_baseService_2eproto;
};
// -------------------------------------------------------------------

class RegisterRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:baseService.RegisterRequest) */ {
 public:
  inline RegisterRequest() : RegisterRequest(nullptr) {}
  ~RegisterRequest() override;
  explicit constexpr RegisterRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegisterRequest(const RegisterRequest& from);
  RegisterRequest(RegisterRequest&& from) noexcept
    : RegisterRequest() {
    *this = ::std::move(from);
  }

  inline RegisterRequest& operator=(const RegisterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterRequest& operator=(RegisterRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegisterRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterRequest* internal_default_instance() {
    return reinterpret_cast<const RegisterRequest*>(
               &_RegisterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RegisterRequest& a, RegisterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterRequest* New() const final {
    return new RegisterRequest();
  }

  RegisterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RegisterRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RegisterRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "baseService.RegisterRequest";
  }
  protected:
  explicit RegisterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kPasswdFieldNumber = 4,
    kSummaryFieldNumber = 5,
    kModidFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // string name = 3;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string passwd = 4;
  void clear_passwd();
  const std::string& passwd() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_passwd(ArgT0&& arg0, ArgT... args);
  std::string* mutable_passwd();
  PROTOBUF_MUST_USE_RESULT std::string* release_passwd();
  void set_allocated_passwd(std::string* passwd);
  private:
  const std::string& _internal_passwd() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_passwd(const std::string& value);
  std::string* _internal_mutable_passwd();
  public:

  // string summary = 5;
  void clear_summary();
  const std::string& summary() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_summary(ArgT0&& arg0, ArgT... args);
  std::string* mutable_summary();
  PROTOBUF_MUST_USE_RESULT std::string* release_summary();
  void set_allocated_summary(std::string* summary);
  private:
  const std::string& _internal_summary() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_summary(const std::string& value);
  std::string* _internal_mutable_summary();
  public:

  // int32 modid = 1;
  void clear_modid();
  ::PROTOBUF_NAMESPACE_ID::int32 modid() const;
  void set_modid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_modid() const;
  void _internal_set_modid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 id = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:baseService.RegisterRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr passwd_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr summary_;
  ::PROTOBUF_NAMESPACE_ID::int32 modid_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_baseService_2eproto;
};
// -------------------------------------------------------------------

class RegisterResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:baseService.RegisterResponse) */ {
 public:
  inline RegisterResponse() : RegisterResponse(nullptr) {}
  ~RegisterResponse() override;
  explicit constexpr RegisterResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegisterResponse(const RegisterResponse& from);
  RegisterResponse(RegisterResponse&& from) noexcept
    : RegisterResponse() {
    *this = ::std::move(from);
  }

  inline RegisterResponse& operator=(const RegisterResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterResponse& operator=(RegisterResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegisterResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterResponse* internal_default_instance() {
    return reinterpret_cast<const RegisterResponse*>(
               &_RegisterResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RegisterResponse& a, RegisterResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterResponse* New() const final {
    return new RegisterResponse();
  }

  RegisterResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RegisterResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RegisterResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "baseService.RegisterResponse";
  }
  protected:
  explicit RegisterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModidFieldNumber = 1,
    kResultFieldNumber = 2,
    kIdFieldNumber = 3,
  };
  // int32 modid = 1;
  void clear_modid();
  ::PROTOBUF_NAMESPACE_ID::int32 modid() const;
  void set_modid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_modid() const;
  void _internal_set_modid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 result = 2;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 id = 3;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:baseService.RegisterResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 modid_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_baseService_2eproto;
};
// -------------------------------------------------------------------

class AddRelationsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:baseService.AddRelationsRequest) */ {
 public:
  inline AddRelationsRequest() : AddRelationsRequest(nullptr) {}
  ~AddRelationsRequest() override;
  explicit constexpr AddRelationsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddRelationsRequest(const AddRelationsRequest& from);
  AddRelationsRequest(AddRelationsRequest&& from) noexcept
    : AddRelationsRequest() {
    *this = ::std::move(from);
  }

  inline AddRelationsRequest& operator=(const AddRelationsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddRelationsRequest& operator=(AddRelationsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddRelationsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddRelationsRequest* internal_default_instance() {
    return reinterpret_cast<const AddRelationsRequest*>(
               &_AddRelationsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(AddRelationsRequest& a, AddRelationsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddRelationsRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddRelationsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddRelationsRequest* New() const final {
    return new AddRelationsRequest();
  }

  AddRelationsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddRelationsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddRelationsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AddRelationsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddRelationsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "baseService.AddRelationsRequest";
  }
  protected:
  explicit AddRelationsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModidFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // int32 modid = 1;
  void clear_modid();
  ::PROTOBUF_NAMESPACE_ID::int32 modid() const;
  void set_modid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_modid() const;
  void _internal_set_modid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 id = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:baseService.AddRelationsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 modid_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_baseService_2eproto;
};
// -------------------------------------------------------------------

class AddRelationsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:baseService.AddRelationsResponse) */ {
 public:
  inline AddRelationsResponse() : AddRelationsResponse(nullptr) {}
  ~AddRelationsResponse() override;
  explicit constexpr AddRelationsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddRelationsResponse(const AddRelationsResponse& from);
  AddRelationsResponse(AddRelationsResponse&& from) noexcept
    : AddRelationsResponse() {
    *this = ::std::move(from);
  }

  inline AddRelationsResponse& operator=(const AddRelationsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddRelationsResponse& operator=(AddRelationsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddRelationsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddRelationsResponse* internal_default_instance() {
    return reinterpret_cast<const AddRelationsResponse*>(
               &_AddRelationsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(AddRelationsResponse& a, AddRelationsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddRelationsResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddRelationsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddRelationsResponse* New() const final {
    return new AddRelationsResponse();
  }

  AddRelationsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddRelationsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddRelationsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AddRelationsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddRelationsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "baseService.AddRelationsResponse";
  }
  protected:
  explicit AddRelationsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModidFieldNumber = 1,
    kResultFieldNumber = 2,
    kIdFieldNumber = 3,
  };
  // int32 modid = 1;
  void clear_modid();
  ::PROTOBUF_NAMESPACE_ID::int32 modid() const;
  void set_modid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_modid() const;
  void _internal_set_modid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 result = 2;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 id = 3;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:baseService.AddRelationsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 modid_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_baseService_2eproto;
};
// -------------------------------------------------------------------

class MsgNotify final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:baseService.MsgNotify) */ {
 public:
  inline MsgNotify() : MsgNotify(nullptr) {}
  ~MsgNotify() override;
  explicit constexpr MsgNotify(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgNotify(const MsgNotify& from);
  MsgNotify(MsgNotify&& from) noexcept
    : MsgNotify() {
    *this = ::std::move(from);
  }

  inline MsgNotify& operator=(const MsgNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgNotify& operator=(MsgNotify&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgNotify& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgNotify* internal_default_instance() {
    return reinterpret_cast<const MsgNotify*>(
               &_MsgNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(MsgNotify& a, MsgNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgNotify* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgNotify* New() const final {
    return new MsgNotify();
  }

  MsgNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgNotify>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgNotify& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MsgNotify& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgNotify* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "baseService.MsgNotify";
  }
  protected:
  explicit MsgNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 3,
    kModidFieldNumber = 1,
    kFromIdFieldNumber = 2,
    kToIdFieldNumber = 4,
  };
  // string msg = 3;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_MUST_USE_RESULT std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 modid = 1;
  void clear_modid();
  ::PROTOBUF_NAMESPACE_ID::int32 modid() const;
  void set_modid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_modid() const;
  void _internal_set_modid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fromId = 2;
  void clear_fromid();
  ::PROTOBUF_NAMESPACE_ID::int32 fromid() const;
  void set_fromid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fromid() const;
  void _internal_set_fromid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 toId = 4;
  void clear_toid();
  ::PROTOBUF_NAMESPACE_ID::int32 toid() const;
  void set_toid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_toid() const;
  void _internal_set_toid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:baseService.MsgNotify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 modid_;
  ::PROTOBUF_NAMESPACE_ID::int32 fromid_;
  ::PROTOBUF_NAMESPACE_ID::int32 toid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_baseService_2eproto;
};
// -------------------------------------------------------------------

class LogoutRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:baseService.LogoutRequest) */ {
 public:
  inline LogoutRequest() : LogoutRequest(nullptr) {}
  ~LogoutRequest() override;
  explicit constexpr LogoutRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LogoutRequest(const LogoutRequest& from);
  LogoutRequest(LogoutRequest&& from) noexcept
    : LogoutRequest() {
    *this = ::std::move(from);
  }

  inline LogoutRequest& operator=(const LogoutRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogoutRequest& operator=(LogoutRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogoutRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogoutRequest* internal_default_instance() {
    return reinterpret_cast<const LogoutRequest*>(
               &_LogoutRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(LogoutRequest& a, LogoutRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LogoutRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogoutRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogoutRequest* New() const final {
    return new LogoutRequest();
  }

  LogoutRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogoutRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LogoutRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LogoutRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogoutRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "baseService.LogoutRequest";
  }
  protected:
  explicit LogoutRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
  };
  // int32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:baseService.LogoutRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_baseService_2eproto;
};
// -------------------------------------------------------------------

class AddFavoriteRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:baseService.AddFavoriteRequest) */ {
 public:
  inline AddFavoriteRequest() : AddFavoriteRequest(nullptr) {}
  ~AddFavoriteRequest() override;
  explicit constexpr AddFavoriteRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddFavoriteRequest(const AddFavoriteRequest& from);
  AddFavoriteRequest(AddFavoriteRequest&& from) noexcept
    : AddFavoriteRequest() {
    *this = ::std::move(from);
  }

  inline AddFavoriteRequest& operator=(const AddFavoriteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddFavoriteRequest& operator=(AddFavoriteRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddFavoriteRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddFavoriteRequest* internal_default_instance() {
    return reinterpret_cast<const AddFavoriteRequest*>(
               &_AddFavoriteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(AddFavoriteRequest& a, AddFavoriteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddFavoriteRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddFavoriteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddFavoriteRequest* New() const final {
    return new AddFavoriteRequest();
  }

  AddFavoriteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddFavoriteRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddFavoriteRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AddFavoriteRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddFavoriteRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "baseService.AddFavoriteRequest";
  }
  protected:
  explicit AddFavoriteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFidFieldNumber = 1,
  };
  // int32 fid = 1;
  void clear_fid();
  ::PROTOBUF_NAMESPACE_ID::int32 fid() const;
  void set_fid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fid() const;
  void _internal_set_fid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:baseService.AddFavoriteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 fid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_baseService_2eproto;
};
// -------------------------------------------------------------------

class AddFavoriteResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:baseService.AddFavoriteResponse) */ {
 public:
  inline AddFavoriteResponse() : AddFavoriteResponse(nullptr) {}
  ~AddFavoriteResponse() override;
  explicit constexpr AddFavoriteResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddFavoriteResponse(const AddFavoriteResponse& from);
  AddFavoriteResponse(AddFavoriteResponse&& from) noexcept
    : AddFavoriteResponse() {
    *this = ::std::move(from);
  }

  inline AddFavoriteResponse& operator=(const AddFavoriteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddFavoriteResponse& operator=(AddFavoriteResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddFavoriteResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddFavoriteResponse* internal_default_instance() {
    return reinterpret_cast<const AddFavoriteResponse*>(
               &_AddFavoriteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(AddFavoriteResponse& a, AddFavoriteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddFavoriteResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddFavoriteResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddFavoriteResponse* New() const final {
    return new AddFavoriteResponse();
  }

  AddFavoriteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddFavoriteResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddFavoriteResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AddFavoriteResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddFavoriteResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "baseService.AddFavoriteResponse";
  }
  protected:
  explicit AddFavoriteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
    kFidFieldNumber = 2,
    kResultFieldNumber = 3,
  };
  // int32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fid = 2;
  void clear_fid();
  ::PROTOBUF_NAMESPACE_ID::int32 fid() const;
  void set_fid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fid() const;
  void _internal_set_fid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 result = 3;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:baseService.AddFavoriteResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 fid_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_baseService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LoginRequest

// int32 uid = 1;
inline void LoginRequest::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginRequest::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginRequest::uid() const {
  // @@protoc_insertion_point(field_get:baseService.LoginRequest.uid)
  return _internal_uid();
}
inline void LoginRequest::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void LoginRequest::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:baseService.LoginRequest.uid)
}

// string passwd = 2;
inline void LoginRequest::clear_passwd() {
  passwd_.ClearToEmpty();
}
inline const std::string& LoginRequest::passwd() const {
  // @@protoc_insertion_point(field_get:baseService.LoginRequest.passwd)
  return _internal_passwd();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoginRequest::set_passwd(ArgT0&& arg0, ArgT... args) {
 
 passwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:baseService.LoginRequest.passwd)
}
inline std::string* LoginRequest::mutable_passwd() {
  std::string* _s = _internal_mutable_passwd();
  // @@protoc_insertion_point(field_mutable:baseService.LoginRequest.passwd)
  return _s;
}
inline const std::string& LoginRequest::_internal_passwd() const {
  return passwd_.Get();
}
inline void LoginRequest::_internal_set_passwd(const std::string& value) {
  
  passwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LoginRequest::_internal_mutable_passwd() {
  
  return passwd_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LoginRequest::release_passwd() {
  // @@protoc_insertion_point(field_release:baseService.LoginRequest.passwd)
  return passwd_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LoginRequest::set_allocated_passwd(std::string* passwd) {
  if (passwd != nullptr) {
    
  } else {
    
  }
  passwd_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), passwd,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:baseService.LoginRequest.passwd)
}

// -------------------------------------------------------------------

// LoginResponse

// int32 uid = 1;
inline void LoginResponse::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginResponse::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginResponse::uid() const {
  // @@protoc_insertion_point(field_get:baseService.LoginResponse.uid)
  return _internal_uid();
}
inline void LoginResponse::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void LoginResponse::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:baseService.LoginResponse.uid)
}

// int32 result = 2;
inline bool LoginResponse::_internal_has_result() const {
  return loginResult_case() == kResult;
}
inline bool LoginResponse::has_result() const {
  return _internal_has_result();
}
inline void LoginResponse::set_has_result() {
  _oneof_case_[0] = kResult;
}
inline void LoginResponse::clear_result() {
  if (_internal_has_result()) {
    loginResult_.result_ = 0;
    clear_has_loginResult();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginResponse::_internal_result() const {
  if (_internal_has_result()) {
    return loginResult_.result_;
  }
  return 0;
}
inline void LoginResponse::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_result()) {
    clear_loginResult();
    set_has_result();
  }
  loginResult_.result_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginResponse::result() const {
  // @@protoc_insertion_point(field_get:baseService.LoginResponse.result)
  return _internal_result();
}
inline void LoginResponse::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:baseService.LoginResponse.result)
}

// .user.GetUserFavoriteResponse favoriteList = 3;
inline bool LoginResponse::_internal_has_favoritelist() const {
  return loginResult_case() == kFavoriteList;
}
inline bool LoginResponse::has_favoritelist() const {
  return _internal_has_favoritelist();
}
inline void LoginResponse::set_has_favoritelist() {
  _oneof_case_[0] = kFavoriteList;
}
inline ::user::GetUserFavoriteResponse* LoginResponse::release_favoritelist() {
  // @@protoc_insertion_point(field_release:baseService.LoginResponse.favoriteList)
  if (_internal_has_favoritelist()) {
    clear_has_loginResult();
      ::user::GetUserFavoriteResponse* temp = loginResult_.favoritelist_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    loginResult_.favoritelist_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::user::GetUserFavoriteResponse& LoginResponse::_internal_favoritelist() const {
  return _internal_has_favoritelist()
      ? *loginResult_.favoritelist_
      : reinterpret_cast< ::user::GetUserFavoriteResponse&>(::user::_GetUserFavoriteResponse_default_instance_);
}
inline const ::user::GetUserFavoriteResponse& LoginResponse::favoritelist() const {
  // @@protoc_insertion_point(field_get:baseService.LoginResponse.favoriteList)
  return _internal_favoritelist();
}
inline ::user::GetUserFavoriteResponse* LoginResponse::unsafe_arena_release_favoritelist() {
  // @@protoc_insertion_point(field_unsafe_arena_release:baseService.LoginResponse.favoriteList)
  if (_internal_has_favoritelist()) {
    clear_has_loginResult();
    ::user::GetUserFavoriteResponse* temp = loginResult_.favoritelist_;
    loginResult_.favoritelist_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void LoginResponse::unsafe_arena_set_allocated_favoritelist(::user::GetUserFavoriteResponse* favoritelist) {
  clear_loginResult();
  if (favoritelist) {
    set_has_favoritelist();
    loginResult_.favoritelist_ = favoritelist;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:baseService.LoginResponse.favoriteList)
}
inline ::user::GetUserFavoriteResponse* LoginResponse::_internal_mutable_favoritelist() {
  if (!_internal_has_favoritelist()) {
    clear_loginResult();
    set_has_favoritelist();
    loginResult_.favoritelist_ = CreateMaybeMessage< ::user::GetUserFavoriteResponse >(GetArenaForAllocation());
  }
  return loginResult_.favoritelist_;
}
inline ::user::GetUserFavoriteResponse* LoginResponse::mutable_favoritelist() {
  ::user::GetUserFavoriteResponse* _msg = _internal_mutable_favoritelist();
  // @@protoc_insertion_point(field_mutable:baseService.LoginResponse.favoriteList)
  return _msg;
}

// .user.GetFriendsResponse friendList = 4;
inline bool LoginResponse::_internal_has_friendlist() const {
  return loginResult_case() == kFriendList;
}
inline bool LoginResponse::has_friendlist() const {
  return _internal_has_friendlist();
}
inline void LoginResponse::set_has_friendlist() {
  _oneof_case_[0] = kFriendList;
}
inline ::user::GetFriendsResponse* LoginResponse::release_friendlist() {
  // @@protoc_insertion_point(field_release:baseService.LoginResponse.friendList)
  if (_internal_has_friendlist()) {
    clear_has_loginResult();
      ::user::GetFriendsResponse* temp = loginResult_.friendlist_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    loginResult_.friendlist_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::user::GetFriendsResponse& LoginResponse::_internal_friendlist() const {
  return _internal_has_friendlist()
      ? *loginResult_.friendlist_
      : reinterpret_cast< ::user::GetFriendsResponse&>(::user::_GetFriendsResponse_default_instance_);
}
inline const ::user::GetFriendsResponse& LoginResponse::friendlist() const {
  // @@protoc_insertion_point(field_get:baseService.LoginResponse.friendList)
  return _internal_friendlist();
}
inline ::user::GetFriendsResponse* LoginResponse::unsafe_arena_release_friendlist() {
  // @@protoc_insertion_point(field_unsafe_arena_release:baseService.LoginResponse.friendList)
  if (_internal_has_friendlist()) {
    clear_has_loginResult();
    ::user::GetFriendsResponse* temp = loginResult_.friendlist_;
    loginResult_.friendlist_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void LoginResponse::unsafe_arena_set_allocated_friendlist(::user::GetFriendsResponse* friendlist) {
  clear_loginResult();
  if (friendlist) {
    set_has_friendlist();
    loginResult_.friendlist_ = friendlist;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:baseService.LoginResponse.friendList)
}
inline ::user::GetFriendsResponse* LoginResponse::_internal_mutable_friendlist() {
  if (!_internal_has_friendlist()) {
    clear_loginResult();
    set_has_friendlist();
    loginResult_.friendlist_ = CreateMaybeMessage< ::user::GetFriendsResponse >(GetArenaForAllocation());
  }
  return loginResult_.friendlist_;
}
inline ::user::GetFriendsResponse* LoginResponse::mutable_friendlist() {
  ::user::GetFriendsResponse* _msg = _internal_mutable_friendlist();
  // @@protoc_insertion_point(field_mutable:baseService.LoginResponse.friendList)
  return _msg;
}

// .user.GetUserGroupsResponse groupList = 5;
inline bool LoginResponse::_internal_has_grouplist() const {
  return loginResult_case() == kGroupList;
}
inline bool LoginResponse::has_grouplist() const {
  return _internal_has_grouplist();
}
inline void LoginResponse::set_has_grouplist() {
  _oneof_case_[0] = kGroupList;
}
inline ::user::GetUserGroupsResponse* LoginResponse::release_grouplist() {
  // @@protoc_insertion_point(field_release:baseService.LoginResponse.groupList)
  if (_internal_has_grouplist()) {
    clear_has_loginResult();
      ::user::GetUserGroupsResponse* temp = loginResult_.grouplist_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    loginResult_.grouplist_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::user::GetUserGroupsResponse& LoginResponse::_internal_grouplist() const {
  return _internal_has_grouplist()
      ? *loginResult_.grouplist_
      : reinterpret_cast< ::user::GetUserGroupsResponse&>(::user::_GetUserGroupsResponse_default_instance_);
}
inline const ::user::GetUserGroupsResponse& LoginResponse::grouplist() const {
  // @@protoc_insertion_point(field_get:baseService.LoginResponse.groupList)
  return _internal_grouplist();
}
inline ::user::GetUserGroupsResponse* LoginResponse::unsafe_arena_release_grouplist() {
  // @@protoc_insertion_point(field_unsafe_arena_release:baseService.LoginResponse.groupList)
  if (_internal_has_grouplist()) {
    clear_has_loginResult();
    ::user::GetUserGroupsResponse* temp = loginResult_.grouplist_;
    loginResult_.grouplist_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void LoginResponse::unsafe_arena_set_allocated_grouplist(::user::GetUserGroupsResponse* grouplist) {
  clear_loginResult();
  if (grouplist) {
    set_has_grouplist();
    loginResult_.grouplist_ = grouplist;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:baseService.LoginResponse.groupList)
}
inline ::user::GetUserGroupsResponse* LoginResponse::_internal_mutable_grouplist() {
  if (!_internal_has_grouplist()) {
    clear_loginResult();
    set_has_grouplist();
    loginResult_.grouplist_ = CreateMaybeMessage< ::user::GetUserGroupsResponse >(GetArenaForAllocation());
  }
  return loginResult_.grouplist_;
}
inline ::user::GetUserGroupsResponse* LoginResponse::mutable_grouplist() {
  ::user::GetUserGroupsResponse* _msg = _internal_mutable_grouplist();
  // @@protoc_insertion_point(field_mutable:baseService.LoginResponse.groupList)
  return _msg;
}

inline bool LoginResponse::has_loginResult() const {
  return loginResult_case() != LOGINRESULT_NOT_SET;
}
inline void LoginResponse::clear_has_loginResult() {
  _oneof_case_[0] = LOGINRESULT_NOT_SET;
}
inline LoginResponse::LoginResultCase LoginResponse::loginResult_case() const {
  return LoginResponse::LoginResultCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SendMsgRequest

// int32 modid = 1;
inline void SendMsgRequest::clear_modid() {
  modid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SendMsgRequest::_internal_modid() const {
  return modid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SendMsgRequest::modid() const {
  // @@protoc_insertion_point(field_get:baseService.SendMsgRequest.modid)
  return _internal_modid();
}
inline void SendMsgRequest::_internal_set_modid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  modid_ = value;
}
inline void SendMsgRequest::set_modid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_modid(value);
  // @@protoc_insertion_point(field_set:baseService.SendMsgRequest.modid)
}

// string msg = 2;
inline void SendMsgRequest::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& SendMsgRequest::msg() const {
  // @@protoc_insertion_point(field_get:baseService.SendMsgRequest.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SendMsgRequest::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:baseService.SendMsgRequest.msg)
}
inline std::string* SendMsgRequest::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:baseService.SendMsgRequest.msg)
  return _s;
}
inline const std::string& SendMsgRequest::_internal_msg() const {
  return msg_.Get();
}
inline void SendMsgRequest::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SendMsgRequest::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SendMsgRequest::release_msg() {
  // @@protoc_insertion_point(field_release:baseService.SendMsgRequest.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SendMsgRequest::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:baseService.SendMsgRequest.msg)
}

// int32 toId = 3;
inline void SendMsgRequest::clear_toid() {
  toid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SendMsgRequest::_internal_toid() const {
  return toid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SendMsgRequest::toid() const {
  // @@protoc_insertion_point(field_get:baseService.SendMsgRequest.toId)
  return _internal_toid();
}
inline void SendMsgRequest::_internal_set_toid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  toid_ = value;
}
inline void SendMsgRequest::set_toid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_toid(value);
  // @@protoc_insertion_point(field_set:baseService.SendMsgRequest.toId)
}

// -------------------------------------------------------------------

// SendMsgResponse

// int32 fromId = 1;
inline void SendMsgResponse::clear_fromid() {
  fromid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SendMsgResponse::_internal_fromid() const {
  return fromid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SendMsgResponse::fromid() const {
  // @@protoc_insertion_point(field_get:baseService.SendMsgResponse.fromId)
  return _internal_fromid();
}
inline void SendMsgResponse::_internal_set_fromid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fromid_ = value;
}
inline void SendMsgResponse::set_fromid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fromid(value);
  // @@protoc_insertion_point(field_set:baseService.SendMsgResponse.fromId)
}

// int32 result = 2;
inline void SendMsgResponse::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SendMsgResponse::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SendMsgResponse::result() const {
  // @@protoc_insertion_point(field_get:baseService.SendMsgResponse.result)
  return _internal_result();
}
inline void SendMsgResponse::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void SendMsgResponse::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:baseService.SendMsgResponse.result)
}

// -------------------------------------------------------------------

// RegisterRequest

// int32 modid = 1;
inline void RegisterRequest::clear_modid() {
  modid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegisterRequest::_internal_modid() const {
  return modid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegisterRequest::modid() const {
  // @@protoc_insertion_point(field_get:baseService.RegisterRequest.modid)
  return _internal_modid();
}
inline void RegisterRequest::_internal_set_modid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  modid_ = value;
}
inline void RegisterRequest::set_modid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_modid(value);
  // @@protoc_insertion_point(field_set:baseService.RegisterRequest.modid)
}

// int32 id = 2;
inline void RegisterRequest::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegisterRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegisterRequest::id() const {
  // @@protoc_insertion_point(field_get:baseService.RegisterRequest.id)
  return _internal_id();
}
inline void RegisterRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void RegisterRequest::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:baseService.RegisterRequest.id)
}

// string name = 3;
inline void RegisterRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& RegisterRequest::name() const {
  // @@protoc_insertion_point(field_get:baseService.RegisterRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RegisterRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:baseService.RegisterRequest.name)
}
inline std::string* RegisterRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:baseService.RegisterRequest.name)
  return _s;
}
inline const std::string& RegisterRequest::_internal_name() const {
  return name_.Get();
}
inline void RegisterRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RegisterRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RegisterRequest::release_name() {
  // @@protoc_insertion_point(field_release:baseService.RegisterRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RegisterRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:baseService.RegisterRequest.name)
}

// string passwd = 4;
inline void RegisterRequest::clear_passwd() {
  passwd_.ClearToEmpty();
}
inline const std::string& RegisterRequest::passwd() const {
  // @@protoc_insertion_point(field_get:baseService.RegisterRequest.passwd)
  return _internal_passwd();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RegisterRequest::set_passwd(ArgT0&& arg0, ArgT... args) {
 
 passwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:baseService.RegisterRequest.passwd)
}
inline std::string* RegisterRequest::mutable_passwd() {
  std::string* _s = _internal_mutable_passwd();
  // @@protoc_insertion_point(field_mutable:baseService.RegisterRequest.passwd)
  return _s;
}
inline const std::string& RegisterRequest::_internal_passwd() const {
  return passwd_.Get();
}
inline void RegisterRequest::_internal_set_passwd(const std::string& value) {
  
  passwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RegisterRequest::_internal_mutable_passwd() {
  
  return passwd_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RegisterRequest::release_passwd() {
  // @@protoc_insertion_point(field_release:baseService.RegisterRequest.passwd)
  return passwd_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RegisterRequest::set_allocated_passwd(std::string* passwd) {
  if (passwd != nullptr) {
    
  } else {
    
  }
  passwd_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), passwd,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:baseService.RegisterRequest.passwd)
}

// string summary = 5;
inline void RegisterRequest::clear_summary() {
  summary_.ClearToEmpty();
}
inline const std::string& RegisterRequest::summary() const {
  // @@protoc_insertion_point(field_get:baseService.RegisterRequest.summary)
  return _internal_summary();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RegisterRequest::set_summary(ArgT0&& arg0, ArgT... args) {
 
 summary_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:baseService.RegisterRequest.summary)
}
inline std::string* RegisterRequest::mutable_summary() {
  std::string* _s = _internal_mutable_summary();
  // @@protoc_insertion_point(field_mutable:baseService.RegisterRequest.summary)
  return _s;
}
inline const std::string& RegisterRequest::_internal_summary() const {
  return summary_.Get();
}
inline void RegisterRequest::_internal_set_summary(const std::string& value) {
  
  summary_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RegisterRequest::_internal_mutable_summary() {
  
  return summary_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RegisterRequest::release_summary() {
  // @@protoc_insertion_point(field_release:baseService.RegisterRequest.summary)
  return summary_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RegisterRequest::set_allocated_summary(std::string* summary) {
  if (summary != nullptr) {
    
  } else {
    
  }
  summary_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), summary,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:baseService.RegisterRequest.summary)
}

// -------------------------------------------------------------------

// RegisterResponse

// int32 modid = 1;
inline void RegisterResponse::clear_modid() {
  modid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegisterResponse::_internal_modid() const {
  return modid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegisterResponse::modid() const {
  // @@protoc_insertion_point(field_get:baseService.RegisterResponse.modid)
  return _internal_modid();
}
inline void RegisterResponse::_internal_set_modid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  modid_ = value;
}
inline void RegisterResponse::set_modid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_modid(value);
  // @@protoc_insertion_point(field_set:baseService.RegisterResponse.modid)
}

// int32 result = 2;
inline void RegisterResponse::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegisterResponse::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegisterResponse::result() const {
  // @@protoc_insertion_point(field_get:baseService.RegisterResponse.result)
  return _internal_result();
}
inline void RegisterResponse::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void RegisterResponse::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:baseService.RegisterResponse.result)
}

// int32 id = 3;
inline void RegisterResponse::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegisterResponse::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegisterResponse::id() const {
  // @@protoc_insertion_point(field_get:baseService.RegisterResponse.id)
  return _internal_id();
}
inline void RegisterResponse::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void RegisterResponse::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:baseService.RegisterResponse.id)
}

// -------------------------------------------------------------------

// AddRelationsRequest

// int32 modid = 1;
inline void AddRelationsRequest::clear_modid() {
  modid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddRelationsRequest::_internal_modid() const {
  return modid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddRelationsRequest::modid() const {
  // @@protoc_insertion_point(field_get:baseService.AddRelationsRequest.modid)
  return _internal_modid();
}
inline void AddRelationsRequest::_internal_set_modid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  modid_ = value;
}
inline void AddRelationsRequest::set_modid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_modid(value);
  // @@protoc_insertion_point(field_set:baseService.AddRelationsRequest.modid)
}

// int32 id = 2;
inline void AddRelationsRequest::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddRelationsRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddRelationsRequest::id() const {
  // @@protoc_insertion_point(field_get:baseService.AddRelationsRequest.id)
  return _internal_id();
}
inline void AddRelationsRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void AddRelationsRequest::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:baseService.AddRelationsRequest.id)
}

// -------------------------------------------------------------------

// AddRelationsResponse

// int32 modid = 1;
inline void AddRelationsResponse::clear_modid() {
  modid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddRelationsResponse::_internal_modid() const {
  return modid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddRelationsResponse::modid() const {
  // @@protoc_insertion_point(field_get:baseService.AddRelationsResponse.modid)
  return _internal_modid();
}
inline void AddRelationsResponse::_internal_set_modid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  modid_ = value;
}
inline void AddRelationsResponse::set_modid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_modid(value);
  // @@protoc_insertion_point(field_set:baseService.AddRelationsResponse.modid)
}

// int32 result = 2;
inline void AddRelationsResponse::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddRelationsResponse::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddRelationsResponse::result() const {
  // @@protoc_insertion_point(field_get:baseService.AddRelationsResponse.result)
  return _internal_result();
}
inline void AddRelationsResponse::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void AddRelationsResponse::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:baseService.AddRelationsResponse.result)
}

// int32 id = 3;
inline void AddRelationsResponse::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddRelationsResponse::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddRelationsResponse::id() const {
  // @@protoc_insertion_point(field_get:baseService.AddRelationsResponse.id)
  return _internal_id();
}
inline void AddRelationsResponse::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void AddRelationsResponse::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:baseService.AddRelationsResponse.id)
}

// -------------------------------------------------------------------

// MsgNotify

// int32 modid = 1;
inline void MsgNotify::clear_modid() {
  modid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgNotify::_internal_modid() const {
  return modid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgNotify::modid() const {
  // @@protoc_insertion_point(field_get:baseService.MsgNotify.modid)
  return _internal_modid();
}
inline void MsgNotify::_internal_set_modid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  modid_ = value;
}
inline void MsgNotify::set_modid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_modid(value);
  // @@protoc_insertion_point(field_set:baseService.MsgNotify.modid)
}

// int32 fromId = 2;
inline void MsgNotify::clear_fromid() {
  fromid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgNotify::_internal_fromid() const {
  return fromid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgNotify::fromid() const {
  // @@protoc_insertion_point(field_get:baseService.MsgNotify.fromId)
  return _internal_fromid();
}
inline void MsgNotify::_internal_set_fromid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fromid_ = value;
}
inline void MsgNotify::set_fromid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fromid(value);
  // @@protoc_insertion_point(field_set:baseService.MsgNotify.fromId)
}

// string msg = 3;
inline void MsgNotify::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& MsgNotify::msg() const {
  // @@protoc_insertion_point(field_get:baseService.MsgNotify.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MsgNotify::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:baseService.MsgNotify.msg)
}
inline std::string* MsgNotify::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:baseService.MsgNotify.msg)
  return _s;
}
inline const std::string& MsgNotify::_internal_msg() const {
  return msg_.Get();
}
inline void MsgNotify::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MsgNotify::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MsgNotify::release_msg() {
  // @@protoc_insertion_point(field_release:baseService.MsgNotify.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MsgNotify::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:baseService.MsgNotify.msg)
}

// int32 toId = 4;
inline void MsgNotify::clear_toid() {
  toid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgNotify::_internal_toid() const {
  return toid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgNotify::toid() const {
  // @@protoc_insertion_point(field_get:baseService.MsgNotify.toId)
  return _internal_toid();
}
inline void MsgNotify::_internal_set_toid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  toid_ = value;
}
inline void MsgNotify::set_toid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_toid(value);
  // @@protoc_insertion_point(field_set:baseService.MsgNotify.toId)
}

// -------------------------------------------------------------------

// LogoutRequest

// int32 uid = 1;
inline void LogoutRequest::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LogoutRequest::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LogoutRequest::uid() const {
  // @@protoc_insertion_point(field_get:baseService.LogoutRequest.uid)
  return _internal_uid();
}
inline void LogoutRequest::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void LogoutRequest::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:baseService.LogoutRequest.uid)
}

// -------------------------------------------------------------------

// AddFavoriteRequest

// int32 fid = 1;
inline void AddFavoriteRequest::clear_fid() {
  fid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddFavoriteRequest::_internal_fid() const {
  return fid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddFavoriteRequest::fid() const {
  // @@protoc_insertion_point(field_get:baseService.AddFavoriteRequest.fid)
  return _internal_fid();
}
inline void AddFavoriteRequest::_internal_set_fid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fid_ = value;
}
inline void AddFavoriteRequest::set_fid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fid(value);
  // @@protoc_insertion_point(field_set:baseService.AddFavoriteRequest.fid)
}

// -------------------------------------------------------------------

// AddFavoriteResponse

// int32 uid = 1;
inline void AddFavoriteResponse::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddFavoriteResponse::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddFavoriteResponse::uid() const {
  // @@protoc_insertion_point(field_get:baseService.AddFavoriteResponse.uid)
  return _internal_uid();
}
inline void AddFavoriteResponse::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void AddFavoriteResponse::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:baseService.AddFavoriteResponse.uid)
}

// int32 fid = 2;
inline void AddFavoriteResponse::clear_fid() {
  fid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddFavoriteResponse::_internal_fid() const {
  return fid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddFavoriteResponse::fid() const {
  // @@protoc_insertion_point(field_get:baseService.AddFavoriteResponse.fid)
  return _internal_fid();
}
inline void AddFavoriteResponse::_internal_set_fid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fid_ = value;
}
inline void AddFavoriteResponse::set_fid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fid(value);
  // @@protoc_insertion_point(field_set:baseService.AddFavoriteResponse.fid)
}

// int32 result = 3;
inline void AddFavoriteResponse::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddFavoriteResponse::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddFavoriteResponse::result() const {
  // @@protoc_insertion_point(field_get:baseService.AddFavoriteResponse.result)
  return _internal_result();
}
inline void AddFavoriteResponse::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void AddFavoriteResponse::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:baseService.AddFavoriteResponse.result)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace baseService

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::baseService::MessageID> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::baseService::MessageID>() {
  return ::baseService::MessageID_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_baseService_2eproto
