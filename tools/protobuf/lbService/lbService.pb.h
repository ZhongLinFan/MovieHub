// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lbService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_lbService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_lbService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_lbService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_lbService_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lbService_2eproto;
namespace lbService {
class GetServerRequest;
struct GetServerRequestDefaultTypeInternal;
extern GetServerRequestDefaultTypeInternal _GetServerRequest_default_instance_;
class GetServerResponse;
struct GetServerResponseDefaultTypeInternal;
extern GetServerResponseDefaultTypeInternal _GetServerResponse_default_instance_;
class HostInfo;
struct HostInfoDefaultTypeInternal;
extern HostInfoDefaultTypeInternal _HostInfo_default_instance_;
class RepostMsgRequest;
struct RepostMsgRequestDefaultTypeInternal;
extern RepostMsgRequestDefaultTypeInternal _RepostMsgRequest_default_instance_;
class RepostMsgResponseFrom;
struct RepostMsgResponseFromDefaultTypeInternal;
extern RepostMsgResponseFromDefaultTypeInternal _RepostMsgResponseFrom_default_instance_;
class RepostMsgResponseTo;
struct RepostMsgResponseToDefaultTypeInternal;
extern RepostMsgResponseToDefaultTypeInternal _RepostMsgResponseTo_default_instance_;
class Repoter;
struct RepoterDefaultTypeInternal;
extern RepoterDefaultTypeInternal _Repoter_default_instance_;
class ServerResonseToLb;
struct ServerResonseToLbDefaultTypeInternal;
extern ServerResonseToLbDefaultTypeInternal _ServerResonseToLb_default_instance_;
class StopServiceRequest;
struct StopServiceRequestDefaultTypeInternal;
extern StopServiceRequestDefaultTypeInternal _StopServiceRequest_default_instance_;
}  // namespace lbService
PROTOBUF_NAMESPACE_OPEN
template<> ::lbService::GetServerRequest* Arena::CreateMaybeMessage<::lbService::GetServerRequest>(Arena*);
template<> ::lbService::GetServerResponse* Arena::CreateMaybeMessage<::lbService::GetServerResponse>(Arena*);
template<> ::lbService::HostInfo* Arena::CreateMaybeMessage<::lbService::HostInfo>(Arena*);
template<> ::lbService::RepostMsgRequest* Arena::CreateMaybeMessage<::lbService::RepostMsgRequest>(Arena*);
template<> ::lbService::RepostMsgResponseFrom* Arena::CreateMaybeMessage<::lbService::RepostMsgResponseFrom>(Arena*);
template<> ::lbService::RepostMsgResponseTo* Arena::CreateMaybeMessage<::lbService::RepostMsgResponseTo>(Arena*);
template<> ::lbService::Repoter* Arena::CreateMaybeMessage<::lbService::Repoter>(Arena*);
template<> ::lbService::ServerResonseToLb* Arena::CreateMaybeMessage<::lbService::ServerResonseToLb>(Arena*);
template<> ::lbService::StopServiceRequest* Arena::CreateMaybeMessage<::lbService::StopServiceRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace lbService {

enum MessageID : int {
  ID_UNKNOW = 0,
  ID_GetServerRequest = 1,
  ID_GetServerResponse = 2,
  ID_ServerResonseToLb = 3,
  ID_RepostMsgRequest = 4,
  ID_RepostMsgResponseTo = 5,
  ID_RepostMsgResponseFrom = 6,
  ID_StopServiceRequest = 7,
  MessageID_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MessageID_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MessageID_IsValid(int value);
constexpr MessageID MessageID_MIN = ID_UNKNOW;
constexpr MessageID MessageID_MAX = ID_StopServiceRequest;
constexpr int MessageID_ARRAYSIZE = MessageID_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageID_descriptor();
template<typename T>
inline const std::string& MessageID_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MessageID>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MessageID_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MessageID_descriptor(), enum_t_value);
}
inline bool MessageID_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MessageID* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MessageID>(
    MessageID_descriptor(), name, value);
}
// ===================================================================

class HostInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lbService.HostInfo) */ {
 public:
  inline HostInfo() : HostInfo(nullptr) {}
  ~HostInfo() override;
  explicit constexpr HostInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HostInfo(const HostInfo& from);
  HostInfo(HostInfo&& from) noexcept
    : HostInfo() {
    *this = ::std::move(from);
  }

  inline HostInfo& operator=(const HostInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline HostInfo& operator=(HostInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HostInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const HostInfo* internal_default_instance() {
    return reinterpret_cast<const HostInfo*>(
               &_HostInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(HostInfo& a, HostInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(HostInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HostInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HostInfo* New() const final {
    return new HostInfo();
  }

  HostInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HostInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HostInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const HostInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HostInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lbService.HostInfo";
  }
  protected:
  explicit HostInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 1,
    kPortFieldNumber = 2,
  };
  // string ip = 1;
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_MUST_USE_RESULT std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // int32 port = 2;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:lbService.HostInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lbService_2eproto;
};
// -------------------------------------------------------------------

class GetServerRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lbService.GetServerRequest) */ {
 public:
  inline GetServerRequest() : GetServerRequest(nullptr) {}
  ~GetServerRequest() override;
  explicit constexpr GetServerRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetServerRequest(const GetServerRequest& from);
  GetServerRequest(GetServerRequest&& from) noexcept
    : GetServerRequest() {
    *this = ::std::move(from);
  }

  inline GetServerRequest& operator=(const GetServerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetServerRequest& operator=(GetServerRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetServerRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetServerRequest* internal_default_instance() {
    return reinterpret_cast<const GetServerRequest*>(
               &_GetServerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetServerRequest& a, GetServerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetServerRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetServerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetServerRequest* New() const final {
    return new GetServerRequest();
  }

  GetServerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetServerRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetServerRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetServerRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetServerRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lbService.GetServerRequest";
  }
  protected:
  explicit GetServerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModidFieldNumber = 1,
    kUidFieldNumber = 2,
    kFidFieldNumber = 3,
  };
  // int32 modid = 1;
  void clear_modid();
  ::PROTOBUF_NAMESPACE_ID::int32 modid() const;
  void set_modid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_modid() const;
  void _internal_set_modid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 uid = 2;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fid = 3;
  void clear_fid();
  ::PROTOBUF_NAMESPACE_ID::int32 fid() const;
  void set_fid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fid() const;
  void _internal_set_fid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:lbService.GetServerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 modid_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 fid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lbService_2eproto;
};
// -------------------------------------------------------------------

class GetServerResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lbService.GetServerResponse) */ {
 public:
  inline GetServerResponse() : GetServerResponse(nullptr) {}
  ~GetServerResponse() override;
  explicit constexpr GetServerResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetServerResponse(const GetServerResponse& from);
  GetServerResponse(GetServerResponse&& from) noexcept
    : GetServerResponse() {
    *this = ::std::move(from);
  }

  inline GetServerResponse& operator=(const GetServerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetServerResponse& operator=(GetServerResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetServerResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetServerResponse* internal_default_instance() {
    return reinterpret_cast<const GetServerResponse*>(
               &_GetServerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetServerResponse& a, GetServerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetServerResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetServerResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetServerResponse* New() const final {
    return new GetServerResponse();
  }

  GetServerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetServerResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetServerResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetServerResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetServerResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lbService.GetServerResponse";
  }
  protected:
  explicit GetServerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHostFieldNumber = 3,
    kModidFieldNumber = 1,
    kUidFieldNumber = 2,
  };
  // repeated .lbService.HostInfo host = 3;
  int host_size() const;
  private:
  int _internal_host_size() const;
  public:
  void clear_host();
  ::lbService::HostInfo* mutable_host(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lbService::HostInfo >*
      mutable_host();
  private:
  const ::lbService::HostInfo& _internal_host(int index) const;
  ::lbService::HostInfo* _internal_add_host();
  public:
  const ::lbService::HostInfo& host(int index) const;
  ::lbService::HostInfo* add_host();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lbService::HostInfo >&
      host() const;

  // int32 modid = 1;
  void clear_modid();
  ::PROTOBUF_NAMESPACE_ID::int32 modid() const;
  void set_modid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_modid() const;
  void _internal_set_modid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 uid = 2;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:lbService.GetServerResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lbService::HostInfo > host_;
  ::PROTOBUF_NAMESPACE_ID::int32 modid_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lbService_2eproto;
};
// -------------------------------------------------------------------

class ServerResonseToLb final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lbService.ServerResonseToLb) */ {
 public:
  inline ServerResonseToLb() : ServerResonseToLb(nullptr) {}
  ~ServerResonseToLb() override;
  explicit constexpr ServerResonseToLb(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerResonseToLb(const ServerResonseToLb& from);
  ServerResonseToLb(ServerResonseToLb&& from) noexcept
    : ServerResonseToLb() {
    *this = ::std::move(from);
  }

  inline ServerResonseToLb& operator=(const ServerResonseToLb& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerResonseToLb& operator=(ServerResonseToLb&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerResonseToLb& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerResonseToLb* internal_default_instance() {
    return reinterpret_cast<const ServerResonseToLb*>(
               &_ServerResonseToLb_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ServerResonseToLb& a, ServerResonseToLb& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerResonseToLb* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerResonseToLb* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerResonseToLb* New() const final {
    return new ServerResonseToLb();
  }

  ServerResonseToLb* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerResonseToLb>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServerResonseToLb& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ServerResonseToLb& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerResonseToLb* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lbService.ServerResonseToLb";
  }
  protected:
  explicit ServerResonseToLb(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModidFieldNumber = 1,
    kOriginIdFieldNumber = 2,
    kFinalIdFieldNumber = 3,
    kResultFieldNumber = 4,
  };
  // int32 modid = 1;
  void clear_modid();
  ::PROTOBUF_NAMESPACE_ID::int32 modid() const;
  void set_modid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_modid() const;
  void _internal_set_modid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 originId = 2;
  void clear_originid();
  ::PROTOBUF_NAMESPACE_ID::int32 originid() const;
  void set_originid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_originid() const;
  void _internal_set_originid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 finalId = 3;
  void clear_finalid();
  ::PROTOBUF_NAMESPACE_ID::int32 finalid() const;
  void set_finalid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_finalid() const;
  void _internal_set_finalid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 result = 4;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:lbService.ServerResonseToLb)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 modid_;
  ::PROTOBUF_NAMESPACE_ID::int32 originid_;
  ::PROTOBUF_NAMESPACE_ID::int32 finalid_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lbService_2eproto;
};
// -------------------------------------------------------------------

class Repoter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lbService.Repoter) */ {
 public:
  inline Repoter() : Repoter(nullptr) {}
  ~Repoter() override;
  explicit constexpr Repoter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Repoter(const Repoter& from);
  Repoter(Repoter&& from) noexcept
    : Repoter() {
    *this = ::std::move(from);
  }

  inline Repoter& operator=(const Repoter& from) {
    CopyFrom(from);
    return *this;
  }
  inline Repoter& operator=(Repoter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Repoter& default_instance() {
    return *internal_default_instance();
  }
  static inline const Repoter* internal_default_instance() {
    return reinterpret_cast<const Repoter*>(
               &_Repoter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Repoter& a, Repoter& b) {
    a.Swap(&b);
  }
  inline void Swap(Repoter* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Repoter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Repoter* New() const final {
    return new Repoter();
  }

  Repoter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Repoter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Repoter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Repoter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Repoter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lbService.Repoter";
  }
  protected:
  explicit Repoter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // .lbService.HostInfo client = 2;
  bool has_client() const;
  private:
  bool _internal_has_client() const;
  public:
  void clear_client();
  const ::lbService::HostInfo& client() const;
  PROTOBUF_MUST_USE_RESULT ::lbService::HostInfo* release_client();
  ::lbService::HostInfo* mutable_client();
  void set_allocated_client(::lbService::HostInfo* client);
  private:
  const ::lbService::HostInfo& _internal_client() const;
  ::lbService::HostInfo* _internal_mutable_client();
  public:
  void unsafe_arena_set_allocated_client(
      ::lbService::HostInfo* client);
  ::lbService::HostInfo* unsafe_arena_release_client();

  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:lbService.Repoter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::lbService::HostInfo* client_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lbService_2eproto;
};
// -------------------------------------------------------------------

class RepostMsgRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lbService.RepostMsgRequest) */ {
 public:
  inline RepostMsgRequest() : RepostMsgRequest(nullptr) {}
  ~RepostMsgRequest() override;
  explicit constexpr RepostMsgRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RepostMsgRequest(const RepostMsgRequest& from);
  RepostMsgRequest(RepostMsgRequest&& from) noexcept
    : RepostMsgRequest() {
    *this = ::std::move(from);
  }

  inline RepostMsgRequest& operator=(const RepostMsgRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RepostMsgRequest& operator=(RepostMsgRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RepostMsgRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RepostMsgRequest* internal_default_instance() {
    return reinterpret_cast<const RepostMsgRequest*>(
               &_RepostMsgRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RepostMsgRequest& a, RepostMsgRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RepostMsgRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RepostMsgRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RepostMsgRequest* New() const final {
    return new RepostMsgRequest();
  }

  RepostMsgRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RepostMsgRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RepostMsgRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RepostMsgRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RepostMsgRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lbService.RepostMsgRequest";
  }
  protected:
  explicit RepostMsgRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 3,
    kModidFieldNumber = 1,
    kFromIdFieldNumber = 2,
    kToIdFieldNumber = 4,
  };
  // string msg = 3;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_MUST_USE_RESULT std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 modid = 1;
  void clear_modid();
  ::PROTOBUF_NAMESPACE_ID::int32 modid() const;
  void set_modid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_modid() const;
  void _internal_set_modid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fromId = 2;
  void clear_fromid();
  ::PROTOBUF_NAMESPACE_ID::int32 fromid() const;
  void set_fromid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fromid() const;
  void _internal_set_fromid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 toId = 4;
  void clear_toid();
  ::PROTOBUF_NAMESPACE_ID::int32 toid() const;
  void set_toid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_toid() const;
  void _internal_set_toid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:lbService.RepostMsgRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 modid_;
  ::PROTOBUF_NAMESPACE_ID::int32 fromid_;
  ::PROTOBUF_NAMESPACE_ID::int32 toid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lbService_2eproto;
};
// -------------------------------------------------------------------

class RepostMsgResponseTo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lbService.RepostMsgResponseTo) */ {
 public:
  inline RepostMsgResponseTo() : RepostMsgResponseTo(nullptr) {}
  ~RepostMsgResponseTo() override;
  explicit constexpr RepostMsgResponseTo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RepostMsgResponseTo(const RepostMsgResponseTo& from);
  RepostMsgResponseTo(RepostMsgResponseTo&& from) noexcept
    : RepostMsgResponseTo() {
    *this = ::std::move(from);
  }

  inline RepostMsgResponseTo& operator=(const RepostMsgResponseTo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RepostMsgResponseTo& operator=(RepostMsgResponseTo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RepostMsgResponseTo& default_instance() {
    return *internal_default_instance();
  }
  static inline const RepostMsgResponseTo* internal_default_instance() {
    return reinterpret_cast<const RepostMsgResponseTo*>(
               &_RepostMsgResponseTo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RepostMsgResponseTo& a, RepostMsgResponseTo& b) {
    a.Swap(&b);
  }
  inline void Swap(RepostMsgResponseTo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RepostMsgResponseTo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RepostMsgResponseTo* New() const final {
    return new RepostMsgResponseTo();
  }

  RepostMsgResponseTo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RepostMsgResponseTo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RepostMsgResponseTo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RepostMsgResponseTo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RepostMsgResponseTo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lbService.RepostMsgResponseTo";
  }
  protected:
  explicit RepostMsgResponseTo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 3,
    kToIdFieldNumber = 5,
    kModidFieldNumber = 1,
    kFromIdFieldNumber = 2,
    kGidFieldNumber = 4,
  };
  // repeated string msg = 3;
  int msg_size() const;
  private:
  int _internal_msg_size() const;
  public:
  void clear_msg();
  const std::string& msg(int index) const;
  std::string* mutable_msg(int index);
  void set_msg(int index, const std::string& value);
  void set_msg(int index, std::string&& value);
  void set_msg(int index, const char* value);
  void set_msg(int index, const char* value, size_t size);
  std::string* add_msg();
  void add_msg(const std::string& value);
  void add_msg(std::string&& value);
  void add_msg(const char* value);
  void add_msg(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& msg() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_msg();
  private:
  const std::string& _internal_msg(int index) const;
  std::string* _internal_add_msg();
  public:

  // repeated int32 toId = 5;
  int toid_size() const;
  private:
  int _internal_toid_size() const;
  public:
  void clear_toid();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_toid(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_toid() const;
  void _internal_add_toid(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_toid();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 toid(int index) const;
  void set_toid(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_toid(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      toid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_toid();

  // int32 modid = 1;
  void clear_modid();
  ::PROTOBUF_NAMESPACE_ID::int32 modid() const;
  void set_modid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_modid() const;
  void _internal_set_modid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fromId = 2;
  void clear_fromid();
  ::PROTOBUF_NAMESPACE_ID::int32 fromid() const;
  void set_fromid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fromid() const;
  void _internal_set_fromid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 gid = 4;
  void clear_gid();
  ::PROTOBUF_NAMESPACE_ID::int32 gid() const;
  void set_gid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gid() const;
  void _internal_set_gid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:lbService.RepostMsgResponseTo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> msg_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > toid_;
  mutable std::atomic<int> _toid_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 modid_;
  ::PROTOBUF_NAMESPACE_ID::int32 fromid_;
  ::PROTOBUF_NAMESPACE_ID::int32 gid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lbService_2eproto;
};
// -------------------------------------------------------------------

class RepostMsgResponseFrom final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lbService.RepostMsgResponseFrom) */ {
 public:
  inline RepostMsgResponseFrom() : RepostMsgResponseFrom(nullptr) {}
  ~RepostMsgResponseFrom() override;
  explicit constexpr RepostMsgResponseFrom(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RepostMsgResponseFrom(const RepostMsgResponseFrom& from);
  RepostMsgResponseFrom(RepostMsgResponseFrom&& from) noexcept
    : RepostMsgResponseFrom() {
    *this = ::std::move(from);
  }

  inline RepostMsgResponseFrom& operator=(const RepostMsgResponseFrom& from) {
    CopyFrom(from);
    return *this;
  }
  inline RepostMsgResponseFrom& operator=(RepostMsgResponseFrom&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RepostMsgResponseFrom& default_instance() {
    return *internal_default_instance();
  }
  static inline const RepostMsgResponseFrom* internal_default_instance() {
    return reinterpret_cast<const RepostMsgResponseFrom*>(
               &_RepostMsgResponseFrom_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(RepostMsgResponseFrom& a, RepostMsgResponseFrom& b) {
    a.Swap(&b);
  }
  inline void Swap(RepostMsgResponseFrom* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RepostMsgResponseFrom* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RepostMsgResponseFrom* New() const final {
    return new RepostMsgResponseFrom();
  }

  RepostMsgResponseFrom* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RepostMsgResponseFrom>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RepostMsgResponseFrom& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RepostMsgResponseFrom& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RepostMsgResponseFrom* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lbService.RepostMsgResponseFrom";
  }
  protected:
  explicit RepostMsgResponseFrom(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromIdFieldNumber = 1,
    kToIdFieldNumber = 2,
    kMsgIdFieldNumber = 3,
    kResultFieldNumber = 4,
  };
  // int32 fromId = 1;
  void clear_fromid();
  ::PROTOBUF_NAMESPACE_ID::int32 fromid() const;
  void set_fromid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fromid() const;
  void _internal_set_fromid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 toId = 2;
  void clear_toid();
  ::PROTOBUF_NAMESPACE_ID::int32 toid() const;
  void set_toid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_toid() const;
  void _internal_set_toid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 msgId = 3;
  void clear_msgid();
  ::PROTOBUF_NAMESPACE_ID::int32 msgid() const;
  void set_msgid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_msgid() const;
  void _internal_set_msgid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 result = 4;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:lbService.RepostMsgResponseFrom)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 fromid_;
  ::PROTOBUF_NAMESPACE_ID::int32 toid_;
  ::PROTOBUF_NAMESPACE_ID::int32 msgid_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lbService_2eproto;
};
// -------------------------------------------------------------------

class StopServiceRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lbService.StopServiceRequest) */ {
 public:
  inline StopServiceRequest() : StopServiceRequest(nullptr) {}
  ~StopServiceRequest() override;
  explicit constexpr StopServiceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopServiceRequest(const StopServiceRequest& from);
  StopServiceRequest(StopServiceRequest&& from) noexcept
    : StopServiceRequest() {
    *this = ::std::move(from);
  }

  inline StopServiceRequest& operator=(const StopServiceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopServiceRequest& operator=(StopServiceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StopServiceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopServiceRequest* internal_default_instance() {
    return reinterpret_cast<const StopServiceRequest*>(
               &_StopServiceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(StopServiceRequest& a, StopServiceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StopServiceRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopServiceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopServiceRequest* New() const final {
    return new StopServiceRequest();
  }

  StopServiceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopServiceRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StopServiceRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StopServiceRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopServiceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lbService.StopServiceRequest";
  }
  protected:
  explicit StopServiceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
  };
  // int32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:lbService.StopServiceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lbService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HostInfo

// string ip = 1;
inline void HostInfo::clear_ip() {
  ip_.ClearToEmpty();
}
inline const std::string& HostInfo::ip() const {
  // @@protoc_insertion_point(field_get:lbService.HostInfo.ip)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HostInfo::set_ip(ArgT0&& arg0, ArgT... args) {
 
 ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:lbService.HostInfo.ip)
}
inline std::string* HostInfo::mutable_ip() {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:lbService.HostInfo.ip)
  return _s;
}
inline const std::string& HostInfo::_internal_ip() const {
  return ip_.Get();
}
inline void HostInfo::_internal_set_ip(const std::string& value) {
  
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* HostInfo::_internal_mutable_ip() {
  
  return ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* HostInfo::release_ip() {
  // @@protoc_insertion_point(field_release:lbService.HostInfo.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void HostInfo::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:lbService.HostInfo.ip)
}

// int32 port = 2;
inline void HostInfo::clear_port() {
  port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HostInfo::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HostInfo::port() const {
  // @@protoc_insertion_point(field_get:lbService.HostInfo.port)
  return _internal_port();
}
inline void HostInfo::_internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_ = value;
}
inline void HostInfo::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:lbService.HostInfo.port)
}

// -------------------------------------------------------------------

// GetServerRequest

// int32 modid = 1;
inline void GetServerRequest::clear_modid() {
  modid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetServerRequest::_internal_modid() const {
  return modid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetServerRequest::modid() const {
  // @@protoc_insertion_point(field_get:lbService.GetServerRequest.modid)
  return _internal_modid();
}
inline void GetServerRequest::_internal_set_modid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  modid_ = value;
}
inline void GetServerRequest::set_modid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_modid(value);
  // @@protoc_insertion_point(field_set:lbService.GetServerRequest.modid)
}

// int32 uid = 2;
inline void GetServerRequest::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetServerRequest::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetServerRequest::uid() const {
  // @@protoc_insertion_point(field_get:lbService.GetServerRequest.uid)
  return _internal_uid();
}
inline void GetServerRequest::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void GetServerRequest::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:lbService.GetServerRequest.uid)
}

// int32 fid = 3;
inline void GetServerRequest::clear_fid() {
  fid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetServerRequest::_internal_fid() const {
  return fid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetServerRequest::fid() const {
  // @@protoc_insertion_point(field_get:lbService.GetServerRequest.fid)
  return _internal_fid();
}
inline void GetServerRequest::_internal_set_fid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fid_ = value;
}
inline void GetServerRequest::set_fid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fid(value);
  // @@protoc_insertion_point(field_set:lbService.GetServerRequest.fid)
}

// -------------------------------------------------------------------

// GetServerResponse

// int32 modid = 1;
inline void GetServerResponse::clear_modid() {
  modid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetServerResponse::_internal_modid() const {
  return modid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetServerResponse::modid() const {
  // @@protoc_insertion_point(field_get:lbService.GetServerResponse.modid)
  return _internal_modid();
}
inline void GetServerResponse::_internal_set_modid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  modid_ = value;
}
inline void GetServerResponse::set_modid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_modid(value);
  // @@protoc_insertion_point(field_set:lbService.GetServerResponse.modid)
}

// int32 uid = 2;
inline void GetServerResponse::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetServerResponse::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetServerResponse::uid() const {
  // @@protoc_insertion_point(field_get:lbService.GetServerResponse.uid)
  return _internal_uid();
}
inline void GetServerResponse::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void GetServerResponse::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:lbService.GetServerResponse.uid)
}

// repeated .lbService.HostInfo host = 3;
inline int GetServerResponse::_internal_host_size() const {
  return host_.size();
}
inline int GetServerResponse::host_size() const {
  return _internal_host_size();
}
inline void GetServerResponse::clear_host() {
  host_.Clear();
}
inline ::lbService::HostInfo* GetServerResponse::mutable_host(int index) {
  // @@protoc_insertion_point(field_mutable:lbService.GetServerResponse.host)
  return host_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lbService::HostInfo >*
GetServerResponse::mutable_host() {
  // @@protoc_insertion_point(field_mutable_list:lbService.GetServerResponse.host)
  return &host_;
}
inline const ::lbService::HostInfo& GetServerResponse::_internal_host(int index) const {
  return host_.Get(index);
}
inline const ::lbService::HostInfo& GetServerResponse::host(int index) const {
  // @@protoc_insertion_point(field_get:lbService.GetServerResponse.host)
  return _internal_host(index);
}
inline ::lbService::HostInfo* GetServerResponse::_internal_add_host() {
  return host_.Add();
}
inline ::lbService::HostInfo* GetServerResponse::add_host() {
  ::lbService::HostInfo* _add = _internal_add_host();
  // @@protoc_insertion_point(field_add:lbService.GetServerResponse.host)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lbService::HostInfo >&
GetServerResponse::host() const {
  // @@protoc_insertion_point(field_list:lbService.GetServerResponse.host)
  return host_;
}

// -------------------------------------------------------------------

// ServerResonseToLb

// int32 modid = 1;
inline void ServerResonseToLb::clear_modid() {
  modid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerResonseToLb::_internal_modid() const {
  return modid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerResonseToLb::modid() const {
  // @@protoc_insertion_point(field_get:lbService.ServerResonseToLb.modid)
  return _internal_modid();
}
inline void ServerResonseToLb::_internal_set_modid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  modid_ = value;
}
inline void ServerResonseToLb::set_modid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_modid(value);
  // @@protoc_insertion_point(field_set:lbService.ServerResonseToLb.modid)
}

// int32 originId = 2;
inline void ServerResonseToLb::clear_originid() {
  originid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerResonseToLb::_internal_originid() const {
  return originid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerResonseToLb::originid() const {
  // @@protoc_insertion_point(field_get:lbService.ServerResonseToLb.originId)
  return _internal_originid();
}
inline void ServerResonseToLb::_internal_set_originid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  originid_ = value;
}
inline void ServerResonseToLb::set_originid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_originid(value);
  // @@protoc_insertion_point(field_set:lbService.ServerResonseToLb.originId)
}

// int32 finalId = 3;
inline void ServerResonseToLb::clear_finalid() {
  finalid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerResonseToLb::_internal_finalid() const {
  return finalid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerResonseToLb::finalid() const {
  // @@protoc_insertion_point(field_get:lbService.ServerResonseToLb.finalId)
  return _internal_finalid();
}
inline void ServerResonseToLb::_internal_set_finalid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  finalid_ = value;
}
inline void ServerResonseToLb::set_finalid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_finalid(value);
  // @@protoc_insertion_point(field_set:lbService.ServerResonseToLb.finalId)
}

// int32 result = 4;
inline void ServerResonseToLb::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerResonseToLb::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerResonseToLb::result() const {
  // @@protoc_insertion_point(field_get:lbService.ServerResonseToLb.result)
  return _internal_result();
}
inline void ServerResonseToLb::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void ServerResonseToLb::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:lbService.ServerResonseToLb.result)
}

// -------------------------------------------------------------------

// Repoter

// bool result = 1;
inline void Repoter::clear_result() {
  result_ = false;
}
inline bool Repoter::_internal_result() const {
  return result_;
}
inline bool Repoter::result() const {
  // @@protoc_insertion_point(field_get:lbService.Repoter.result)
  return _internal_result();
}
inline void Repoter::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void Repoter::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:lbService.Repoter.result)
}

// .lbService.HostInfo client = 2;
inline bool Repoter::_internal_has_client() const {
  return this != internal_default_instance() && client_ != nullptr;
}
inline bool Repoter::has_client() const {
  return _internal_has_client();
}
inline void Repoter::clear_client() {
  if (GetArenaForAllocation() == nullptr && client_ != nullptr) {
    delete client_;
  }
  client_ = nullptr;
}
inline const ::lbService::HostInfo& Repoter::_internal_client() const {
  const ::lbService::HostInfo* p = client_;
  return p != nullptr ? *p : reinterpret_cast<const ::lbService::HostInfo&>(
      ::lbService::_HostInfo_default_instance_);
}
inline const ::lbService::HostInfo& Repoter::client() const {
  // @@protoc_insertion_point(field_get:lbService.Repoter.client)
  return _internal_client();
}
inline void Repoter::unsafe_arena_set_allocated_client(
    ::lbService::HostInfo* client) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_);
  }
  client_ = client;
  if (client) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lbService.Repoter.client)
}
inline ::lbService::HostInfo* Repoter::release_client() {
  
  ::lbService::HostInfo* temp = client_;
  client_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::lbService::HostInfo* Repoter::unsafe_arena_release_client() {
  // @@protoc_insertion_point(field_release:lbService.Repoter.client)
  
  ::lbService::HostInfo* temp = client_;
  client_ = nullptr;
  return temp;
}
inline ::lbService::HostInfo* Repoter::_internal_mutable_client() {
  
  if (client_ == nullptr) {
    auto* p = CreateMaybeMessage<::lbService::HostInfo>(GetArenaForAllocation());
    client_ = p;
  }
  return client_;
}
inline ::lbService::HostInfo* Repoter::mutable_client() {
  ::lbService::HostInfo* _msg = _internal_mutable_client();
  // @@protoc_insertion_point(field_mutable:lbService.Repoter.client)
  return _msg;
}
inline void Repoter::set_allocated_client(::lbService::HostInfo* client) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete client_;
  }
  if (client) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::lbService::HostInfo>::GetOwningArena(client);
    if (message_arena != submessage_arena) {
      client = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, client, submessage_arena);
    }
    
  } else {
    
  }
  client_ = client;
  // @@protoc_insertion_point(field_set_allocated:lbService.Repoter.client)
}

// -------------------------------------------------------------------

// RepostMsgRequest

// int32 modid = 1;
inline void RepostMsgRequest::clear_modid() {
  modid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RepostMsgRequest::_internal_modid() const {
  return modid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RepostMsgRequest::modid() const {
  // @@protoc_insertion_point(field_get:lbService.RepostMsgRequest.modid)
  return _internal_modid();
}
inline void RepostMsgRequest::_internal_set_modid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  modid_ = value;
}
inline void RepostMsgRequest::set_modid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_modid(value);
  // @@protoc_insertion_point(field_set:lbService.RepostMsgRequest.modid)
}

// int32 fromId = 2;
inline void RepostMsgRequest::clear_fromid() {
  fromid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RepostMsgRequest::_internal_fromid() const {
  return fromid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RepostMsgRequest::fromid() const {
  // @@protoc_insertion_point(field_get:lbService.RepostMsgRequest.fromId)
  return _internal_fromid();
}
inline void RepostMsgRequest::_internal_set_fromid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fromid_ = value;
}
inline void RepostMsgRequest::set_fromid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fromid(value);
  // @@protoc_insertion_point(field_set:lbService.RepostMsgRequest.fromId)
}

// string msg = 3;
inline void RepostMsgRequest::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& RepostMsgRequest::msg() const {
  // @@protoc_insertion_point(field_get:lbService.RepostMsgRequest.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RepostMsgRequest::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:lbService.RepostMsgRequest.msg)
}
inline std::string* RepostMsgRequest::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:lbService.RepostMsgRequest.msg)
  return _s;
}
inline const std::string& RepostMsgRequest::_internal_msg() const {
  return msg_.Get();
}
inline void RepostMsgRequest::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RepostMsgRequest::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RepostMsgRequest::release_msg() {
  // @@protoc_insertion_point(field_release:lbService.RepostMsgRequest.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RepostMsgRequest::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:lbService.RepostMsgRequest.msg)
}

// int32 toId = 4;
inline void RepostMsgRequest::clear_toid() {
  toid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RepostMsgRequest::_internal_toid() const {
  return toid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RepostMsgRequest::toid() const {
  // @@protoc_insertion_point(field_get:lbService.RepostMsgRequest.toId)
  return _internal_toid();
}
inline void RepostMsgRequest::_internal_set_toid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  toid_ = value;
}
inline void RepostMsgRequest::set_toid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_toid(value);
  // @@protoc_insertion_point(field_set:lbService.RepostMsgRequest.toId)
}

// -------------------------------------------------------------------

// RepostMsgResponseTo

// int32 modid = 1;
inline void RepostMsgResponseTo::clear_modid() {
  modid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RepostMsgResponseTo::_internal_modid() const {
  return modid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RepostMsgResponseTo::modid() const {
  // @@protoc_insertion_point(field_get:lbService.RepostMsgResponseTo.modid)
  return _internal_modid();
}
inline void RepostMsgResponseTo::_internal_set_modid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  modid_ = value;
}
inline void RepostMsgResponseTo::set_modid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_modid(value);
  // @@protoc_insertion_point(field_set:lbService.RepostMsgResponseTo.modid)
}

// int32 fromId = 2;
inline void RepostMsgResponseTo::clear_fromid() {
  fromid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RepostMsgResponseTo::_internal_fromid() const {
  return fromid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RepostMsgResponseTo::fromid() const {
  // @@protoc_insertion_point(field_get:lbService.RepostMsgResponseTo.fromId)
  return _internal_fromid();
}
inline void RepostMsgResponseTo::_internal_set_fromid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fromid_ = value;
}
inline void RepostMsgResponseTo::set_fromid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fromid(value);
  // @@protoc_insertion_point(field_set:lbService.RepostMsgResponseTo.fromId)
}

// repeated string msg = 3;
inline int RepostMsgResponseTo::_internal_msg_size() const {
  return msg_.size();
}
inline int RepostMsgResponseTo::msg_size() const {
  return _internal_msg_size();
}
inline void RepostMsgResponseTo::clear_msg() {
  msg_.Clear();
}
inline std::string* RepostMsgResponseTo::add_msg() {
  std::string* _s = _internal_add_msg();
  // @@protoc_insertion_point(field_add_mutable:lbService.RepostMsgResponseTo.msg)
  return _s;
}
inline const std::string& RepostMsgResponseTo::_internal_msg(int index) const {
  return msg_.Get(index);
}
inline const std::string& RepostMsgResponseTo::msg(int index) const {
  // @@protoc_insertion_point(field_get:lbService.RepostMsgResponseTo.msg)
  return _internal_msg(index);
}
inline std::string* RepostMsgResponseTo::mutable_msg(int index) {
  // @@protoc_insertion_point(field_mutable:lbService.RepostMsgResponseTo.msg)
  return msg_.Mutable(index);
}
inline void RepostMsgResponseTo::set_msg(int index, const std::string& value) {
  msg_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:lbService.RepostMsgResponseTo.msg)
}
inline void RepostMsgResponseTo::set_msg(int index, std::string&& value) {
  msg_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:lbService.RepostMsgResponseTo.msg)
}
inline void RepostMsgResponseTo::set_msg(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  msg_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:lbService.RepostMsgResponseTo.msg)
}
inline void RepostMsgResponseTo::set_msg(int index, const char* value, size_t size) {
  msg_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lbService.RepostMsgResponseTo.msg)
}
inline std::string* RepostMsgResponseTo::_internal_add_msg() {
  return msg_.Add();
}
inline void RepostMsgResponseTo::add_msg(const std::string& value) {
  msg_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:lbService.RepostMsgResponseTo.msg)
}
inline void RepostMsgResponseTo::add_msg(std::string&& value) {
  msg_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:lbService.RepostMsgResponseTo.msg)
}
inline void RepostMsgResponseTo::add_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  msg_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:lbService.RepostMsgResponseTo.msg)
}
inline void RepostMsgResponseTo::add_msg(const char* value, size_t size) {
  msg_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:lbService.RepostMsgResponseTo.msg)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RepostMsgResponseTo::msg() const {
  // @@protoc_insertion_point(field_list:lbService.RepostMsgResponseTo.msg)
  return msg_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RepostMsgResponseTo::mutable_msg() {
  // @@protoc_insertion_point(field_mutable_list:lbService.RepostMsgResponseTo.msg)
  return &msg_;
}

// int32 gid = 4;
inline void RepostMsgResponseTo::clear_gid() {
  gid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RepostMsgResponseTo::_internal_gid() const {
  return gid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RepostMsgResponseTo::gid() const {
  // @@protoc_insertion_point(field_get:lbService.RepostMsgResponseTo.gid)
  return _internal_gid();
}
inline void RepostMsgResponseTo::_internal_set_gid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gid_ = value;
}
inline void RepostMsgResponseTo::set_gid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gid(value);
  // @@protoc_insertion_point(field_set:lbService.RepostMsgResponseTo.gid)
}

// repeated int32 toId = 5;
inline int RepostMsgResponseTo::_internal_toid_size() const {
  return toid_.size();
}
inline int RepostMsgResponseTo::toid_size() const {
  return _internal_toid_size();
}
inline void RepostMsgResponseTo::clear_toid() {
  toid_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RepostMsgResponseTo::_internal_toid(int index) const {
  return toid_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RepostMsgResponseTo::toid(int index) const {
  // @@protoc_insertion_point(field_get:lbService.RepostMsgResponseTo.toId)
  return _internal_toid(index);
}
inline void RepostMsgResponseTo::set_toid(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  toid_.Set(index, value);
  // @@protoc_insertion_point(field_set:lbService.RepostMsgResponseTo.toId)
}
inline void RepostMsgResponseTo::_internal_add_toid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  toid_.Add(value);
}
inline void RepostMsgResponseTo::add_toid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_toid(value);
  // @@protoc_insertion_point(field_add:lbService.RepostMsgResponseTo.toId)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
RepostMsgResponseTo::_internal_toid() const {
  return toid_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
RepostMsgResponseTo::toid() const {
  // @@protoc_insertion_point(field_list:lbService.RepostMsgResponseTo.toId)
  return _internal_toid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
RepostMsgResponseTo::_internal_mutable_toid() {
  return &toid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
RepostMsgResponseTo::mutable_toid() {
  // @@protoc_insertion_point(field_mutable_list:lbService.RepostMsgResponseTo.toId)
  return _internal_mutable_toid();
}

// -------------------------------------------------------------------

// RepostMsgResponseFrom

// int32 fromId = 1;
inline void RepostMsgResponseFrom::clear_fromid() {
  fromid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RepostMsgResponseFrom::_internal_fromid() const {
  return fromid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RepostMsgResponseFrom::fromid() const {
  // @@protoc_insertion_point(field_get:lbService.RepostMsgResponseFrom.fromId)
  return _internal_fromid();
}
inline void RepostMsgResponseFrom::_internal_set_fromid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fromid_ = value;
}
inline void RepostMsgResponseFrom::set_fromid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fromid(value);
  // @@protoc_insertion_point(field_set:lbService.RepostMsgResponseFrom.fromId)
}

// int32 toId = 2;
inline void RepostMsgResponseFrom::clear_toid() {
  toid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RepostMsgResponseFrom::_internal_toid() const {
  return toid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RepostMsgResponseFrom::toid() const {
  // @@protoc_insertion_point(field_get:lbService.RepostMsgResponseFrom.toId)
  return _internal_toid();
}
inline void RepostMsgResponseFrom::_internal_set_toid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  toid_ = value;
}
inline void RepostMsgResponseFrom::set_toid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_toid(value);
  // @@protoc_insertion_point(field_set:lbService.RepostMsgResponseFrom.toId)
}

// int32 msgId = 3;
inline void RepostMsgResponseFrom::clear_msgid() {
  msgid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RepostMsgResponseFrom::_internal_msgid() const {
  return msgid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RepostMsgResponseFrom::msgid() const {
  // @@protoc_insertion_point(field_get:lbService.RepostMsgResponseFrom.msgId)
  return _internal_msgid();
}
inline void RepostMsgResponseFrom::_internal_set_msgid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  msgid_ = value;
}
inline void RepostMsgResponseFrom::set_msgid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_msgid(value);
  // @@protoc_insertion_point(field_set:lbService.RepostMsgResponseFrom.msgId)
}

// int32 result = 4;
inline void RepostMsgResponseFrom::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RepostMsgResponseFrom::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RepostMsgResponseFrom::result() const {
  // @@protoc_insertion_point(field_get:lbService.RepostMsgResponseFrom.result)
  return _internal_result();
}
inline void RepostMsgResponseFrom::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void RepostMsgResponseFrom::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:lbService.RepostMsgResponseFrom.result)
}

// -------------------------------------------------------------------

// StopServiceRequest

// int32 uid = 1;
inline void StopServiceRequest::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StopServiceRequest::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StopServiceRequest::uid() const {
  // @@protoc_insertion_point(field_get:lbService.StopServiceRequest.uid)
  return _internal_uid();
}
inline void StopServiceRequest::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void StopServiceRequest::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:lbService.StopServiceRequest.uid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace lbService

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::lbService::MessageID> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lbService::MessageID>() {
  return ::lbService::MessageID_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_lbService_2eproto
