// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lbService.proto

#include "lbService.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace lbService {
constexpr HostInfo::HostInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , port_(0){}
struct HostInfoDefaultTypeInternal {
  constexpr HostInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HostInfoDefaultTypeInternal() {}
  union {
    HostInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HostInfoDefaultTypeInternal _HostInfo_default_instance_;
constexpr GetServerRequest::GetServerRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : modid_(0)
  , uid_(0)
  , fid_(0){}
struct GetServerRequestDefaultTypeInternal {
  constexpr GetServerRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetServerRequestDefaultTypeInternal() {}
  union {
    GetServerRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetServerRequestDefaultTypeInternal _GetServerRequest_default_instance_;
constexpr GetServerResponse::GetServerResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : host_()
  , modid_(0)
  , uid_(0){}
struct GetServerResponseDefaultTypeInternal {
  constexpr GetServerResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetServerResponseDefaultTypeInternal() {}
  union {
    GetServerResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetServerResponseDefaultTypeInternal _GetServerResponse_default_instance_;
constexpr ServerResonseToLb::ServerResonseToLb(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : modid_(0)
  , originid_(0)
  , finalid_(0)
  , result_(0){}
struct ServerResonseToLbDefaultTypeInternal {
  constexpr ServerResonseToLbDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ServerResonseToLbDefaultTypeInternal() {}
  union {
    ServerResonseToLb _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ServerResonseToLbDefaultTypeInternal _ServerResonseToLb_default_instance_;
constexpr Repoter::Repoter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : client_(nullptr)
  , result_(false){}
struct RepoterDefaultTypeInternal {
  constexpr RepoterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RepoterDefaultTypeInternal() {}
  union {
    Repoter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RepoterDefaultTypeInternal _Repoter_default_instance_;
constexpr RepostMsgRequest::RepostMsgRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , modid_(0)
  , fromid_(0)
  , toid_(0){}
struct RepostMsgRequestDefaultTypeInternal {
  constexpr RepostMsgRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RepostMsgRequestDefaultTypeInternal() {}
  union {
    RepostMsgRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RepostMsgRequestDefaultTypeInternal _RepostMsgRequest_default_instance_;
constexpr RepostMsgResponseTo::RepostMsgResponseTo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_()
  , toid_()
  , _toid_cached_byte_size_(0)
  , modid_(0)
  , fromid_(0)
  , gid_(0){}
struct RepostMsgResponseToDefaultTypeInternal {
  constexpr RepostMsgResponseToDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RepostMsgResponseToDefaultTypeInternal() {}
  union {
    RepostMsgResponseTo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RepostMsgResponseToDefaultTypeInternal _RepostMsgResponseTo_default_instance_;
constexpr RepostMsgResponseFrom::RepostMsgResponseFrom(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fromid_(0)
  , toid_(0)
  , msgid_(0)
  , result_(0){}
struct RepostMsgResponseFromDefaultTypeInternal {
  constexpr RepostMsgResponseFromDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RepostMsgResponseFromDefaultTypeInternal() {}
  union {
    RepostMsgResponseFrom _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RepostMsgResponseFromDefaultTypeInternal _RepostMsgResponseFrom_default_instance_;
constexpr StopServiceRequest::StopServiceRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : uid_(0){}
struct StopServiceRequestDefaultTypeInternal {
  constexpr StopServiceRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StopServiceRequestDefaultTypeInternal() {}
  union {
    StopServiceRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StopServiceRequestDefaultTypeInternal _StopServiceRequest_default_instance_;
}  // namespace lbService
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_lbService_2eproto[9];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_lbService_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_lbService_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_lbService_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lbService::HostInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::lbService::HostInfo, ip_),
  PROTOBUF_FIELD_OFFSET(::lbService::HostInfo, port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lbService::GetServerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::lbService::GetServerRequest, modid_),
  PROTOBUF_FIELD_OFFSET(::lbService::GetServerRequest, uid_),
  PROTOBUF_FIELD_OFFSET(::lbService::GetServerRequest, fid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lbService::GetServerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::lbService::GetServerResponse, modid_),
  PROTOBUF_FIELD_OFFSET(::lbService::GetServerResponse, uid_),
  PROTOBUF_FIELD_OFFSET(::lbService::GetServerResponse, host_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lbService::ServerResonseToLb, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::lbService::ServerResonseToLb, modid_),
  PROTOBUF_FIELD_OFFSET(::lbService::ServerResonseToLb, originid_),
  PROTOBUF_FIELD_OFFSET(::lbService::ServerResonseToLb, finalid_),
  PROTOBUF_FIELD_OFFSET(::lbService::ServerResonseToLb, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lbService::Repoter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::lbService::Repoter, result_),
  PROTOBUF_FIELD_OFFSET(::lbService::Repoter, client_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lbService::RepostMsgRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::lbService::RepostMsgRequest, modid_),
  PROTOBUF_FIELD_OFFSET(::lbService::RepostMsgRequest, fromid_),
  PROTOBUF_FIELD_OFFSET(::lbService::RepostMsgRequest, msg_),
  PROTOBUF_FIELD_OFFSET(::lbService::RepostMsgRequest, toid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lbService::RepostMsgResponseTo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::lbService::RepostMsgResponseTo, modid_),
  PROTOBUF_FIELD_OFFSET(::lbService::RepostMsgResponseTo, fromid_),
  PROTOBUF_FIELD_OFFSET(::lbService::RepostMsgResponseTo, msg_),
  PROTOBUF_FIELD_OFFSET(::lbService::RepostMsgResponseTo, gid_),
  PROTOBUF_FIELD_OFFSET(::lbService::RepostMsgResponseTo, toid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lbService::RepostMsgResponseFrom, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::lbService::RepostMsgResponseFrom, fromid_),
  PROTOBUF_FIELD_OFFSET(::lbService::RepostMsgResponseFrom, toid_),
  PROTOBUF_FIELD_OFFSET(::lbService::RepostMsgResponseFrom, msgid_),
  PROTOBUF_FIELD_OFFSET(::lbService::RepostMsgResponseFrom, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lbService::StopServiceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::lbService::StopServiceRequest, uid_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::lbService::HostInfo)},
  { 8, -1, -1, sizeof(::lbService::GetServerRequest)},
  { 17, -1, -1, sizeof(::lbService::GetServerResponse)},
  { 26, -1, -1, sizeof(::lbService::ServerResonseToLb)},
  { 36, -1, -1, sizeof(::lbService::Repoter)},
  { 44, -1, -1, sizeof(::lbService::RepostMsgRequest)},
  { 54, -1, -1, sizeof(::lbService::RepostMsgResponseTo)},
  { 65, -1, -1, sizeof(::lbService::RepostMsgResponseFrom)},
  { 75, -1, -1, sizeof(::lbService::StopServiceRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lbService::_HostInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lbService::_GetServerRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lbService::_GetServerResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lbService::_ServerResonseToLb_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lbService::_Repoter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lbService::_RepostMsgRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lbService::_RepostMsgResponseTo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lbService::_RepostMsgResponseFrom_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lbService::_StopServiceRequest_default_instance_),
};

const char descriptor_table_protodef_lbService_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017lbService.proto\022\tlbService\"$\n\010HostInfo"
  "\022\n\n\002ip\030\001 \001(\t\022\014\n\004port\030\002 \001(\005\";\n\020GetServerR"
  "equest\022\r\n\005modid\030\001 \001(\005\022\013\n\003uid\030\002 \001(\005\022\013\n\003fi"
  "d\030\003 \001(\005\"R\n\021GetServerResponse\022\r\n\005modid\030\001 "
  "\001(\005\022\013\n\003uid\030\002 \001(\005\022!\n\004host\030\003 \003(\0132\023.lbServi"
  "ce.HostInfo\"U\n\021ServerResonseToLb\022\r\n\005modi"
  "d\030\001 \001(\005\022\020\n\010originId\030\002 \001(\005\022\017\n\007finalId\030\003 \001"
  "(\005\022\016\n\006result\030\004 \001(\005\">\n\007Repoter\022\016\n\006result\030"
  "\001 \001(\010\022#\n\006client\030\002 \001(\0132\023.lbService.HostIn"
  "fo\"L\n\020RepostMsgRequest\022\r\n\005modid\030\001 \001(\005\022\016\n"
  "\006fromId\030\002 \001(\005\022\013\n\003msg\030\003 \001(\t\022\014\n\004toId\030\004 \001(\005"
  "\"\\\n\023RepostMsgResponseTo\022\r\n\005modid\030\001 \001(\005\022\016"
  "\n\006fromId\030\002 \001(\005\022\013\n\003msg\030\003 \003(\t\022\013\n\003gid\030\004 \001(\005"
  "\022\014\n\004toId\030\005 \003(\005\"T\n\025RepostMsgResponseFrom\022"
  "\016\n\006fromId\030\001 \001(\005\022\014\n\004toId\030\002 \001(\005\022\r\n\005msgId\030\003"
  " \001(\005\022\016\n\006result\030\004 \001(\005\"!\n\022StopServiceReque"
  "st\022\013\n\003uid\030\001 \001(\005*\325\001\n\tMessageID\022\r\n\tID_UNKN"
  "OW\020\000\022\027\n\023ID_GetServerRequest\020\001\022\030\n\024ID_GetS"
  "erverResponse\020\002\022\030\n\024ID_ServerResonseToLb\020"
  "\003\022\027\n\023ID_RepostMsgRequest\020\004\022\032\n\026ID_RepostM"
  "sgResponseTo\020\005\022\034\n\030ID_RepostMsgResponseFr"
  "om\020\006\022\031\n\025ID_StopServiceRequest\020\007b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_lbService_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lbService_2eproto = {
  false, false, 879, descriptor_table_protodef_lbService_2eproto, "lbService.proto", 
  &descriptor_table_lbService_2eproto_once, nullptr, 0, 9,
  schemas, file_default_instances, TableStruct_lbService_2eproto::offsets,
  file_level_metadata_lbService_2eproto, file_level_enum_descriptors_lbService_2eproto, file_level_service_descriptors_lbService_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_lbService_2eproto_getter() {
  return &descriptor_table_lbService_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_lbService_2eproto(&descriptor_table_lbService_2eproto);
namespace lbService {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageID_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_lbService_2eproto);
  return file_level_enum_descriptors_lbService_2eproto[0];
}
bool MessageID_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class HostInfo::_Internal {
 public:
};

HostInfo::HostInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:lbService.HostInfo)
}
HostInfo::HostInfo(const HostInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip().empty()) {
    ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ip(), 
      GetArenaForAllocation());
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:lbService.HostInfo)
}

void HostInfo::SharedCtor() {
ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
port_ = 0;
}

HostInfo::~HostInfo() {
  // @@protoc_insertion_point(destructor:lbService.HostInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HostInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HostInfo::ArenaDtor(void* object) {
  HostInfo* _this = reinterpret_cast< HostInfo* >(object);
  (void)_this;
}
void HostInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HostInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HostInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:lbService.HostInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_.ClearToEmpty();
  port_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HostInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lbService.HostInfo.ip"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HostInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lbService.HostInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip = 1;
  if (!this->_internal_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lbService.HostInfo.ip");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ip(), target);
  }

  // int32 port = 2;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lbService.HostInfo)
  return target;
}

size_t HostInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lbService.HostInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip = 1;
  if (!this->_internal_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // int32 port = 2;
  if (this->_internal_port() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_port());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HostInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HostInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HostInfo::GetClassData() const { return &_class_data_; }

void HostInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HostInfo *>(to)->MergeFrom(
      static_cast<const HostInfo &>(from));
}


void HostInfo::MergeFrom(const HostInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lbService.HostInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ip().empty()) {
    _internal_set_ip(from._internal_ip());
  }
  if (from._internal_port() != 0) {
    _internal_set_port(from._internal_port());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HostInfo::CopyFrom(const HostInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lbService.HostInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostInfo::IsInitialized() const {
  return true;
}

void HostInfo::InternalSwap(HostInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ip_, lhs_arena,
      &other->ip_, rhs_arena
  );
  swap(port_, other->port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HostInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_lbService_2eproto_getter, &descriptor_table_lbService_2eproto_once,
      file_level_metadata_lbService_2eproto[0]);
}

// ===================================================================

class GetServerRequest::_Internal {
 public:
};

GetServerRequest::GetServerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:lbService.GetServerRequest)
}
GetServerRequest::GetServerRequest(const GetServerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&modid_, &from.modid_,
    static_cast<size_t>(reinterpret_cast<char*>(&fid_) -
    reinterpret_cast<char*>(&modid_)) + sizeof(fid_));
  // @@protoc_insertion_point(copy_constructor:lbService.GetServerRequest)
}

void GetServerRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&modid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fid_) -
    reinterpret_cast<char*>(&modid_)) + sizeof(fid_));
}

GetServerRequest::~GetServerRequest() {
  // @@protoc_insertion_point(destructor:lbService.GetServerRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetServerRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetServerRequest::ArenaDtor(void* object) {
  GetServerRequest* _this = reinterpret_cast< GetServerRequest* >(object);
  (void)_this;
}
void GetServerRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetServerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetServerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lbService.GetServerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&modid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fid_) -
      reinterpret_cast<char*>(&modid_)) + sizeof(fid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetServerRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 modid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          modid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 fid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          fid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetServerRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lbService.GetServerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 modid = 1;
  if (this->_internal_modid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_modid(), target);
  }

  // int32 uid = 2;
  if (this->_internal_uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_uid(), target);
  }

  // int32 fid = 3;
  if (this->_internal_fid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_fid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lbService.GetServerRequest)
  return target;
}

size_t GetServerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lbService.GetServerRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 modid = 1;
  if (this->_internal_modid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_modid());
  }

  // int32 uid = 2;
  if (this->_internal_uid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_uid());
  }

  // int32 fid = 3;
  if (this->_internal_fid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_fid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetServerRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetServerRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetServerRequest::GetClassData() const { return &_class_data_; }

void GetServerRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetServerRequest *>(to)->MergeFrom(
      static_cast<const GetServerRequest &>(from));
}


void GetServerRequest::MergeFrom(const GetServerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lbService.GetServerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_modid() != 0) {
    _internal_set_modid(from._internal_modid());
  }
  if (from._internal_uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from._internal_fid() != 0) {
    _internal_set_fid(from._internal_fid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetServerRequest::CopyFrom(const GetServerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lbService.GetServerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServerRequest::IsInitialized() const {
  return true;
}

void GetServerRequest::InternalSwap(GetServerRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetServerRequest, fid_)
      + sizeof(GetServerRequest::fid_)
      - PROTOBUF_FIELD_OFFSET(GetServerRequest, modid_)>(
          reinterpret_cast<char*>(&modid_),
          reinterpret_cast<char*>(&other->modid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetServerRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_lbService_2eproto_getter, &descriptor_table_lbService_2eproto_once,
      file_level_metadata_lbService_2eproto[1]);
}

// ===================================================================

class GetServerResponse::_Internal {
 public:
};

GetServerResponse::GetServerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  host_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:lbService.GetServerResponse)
}
GetServerResponse::GetServerResponse(const GetServerResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      host_(from.host_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&modid_, &from.modid_,
    static_cast<size_t>(reinterpret_cast<char*>(&uid_) -
    reinterpret_cast<char*>(&modid_)) + sizeof(uid_));
  // @@protoc_insertion_point(copy_constructor:lbService.GetServerResponse)
}

void GetServerResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&modid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&uid_) -
    reinterpret_cast<char*>(&modid_)) + sizeof(uid_));
}

GetServerResponse::~GetServerResponse() {
  // @@protoc_insertion_point(destructor:lbService.GetServerResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetServerResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetServerResponse::ArenaDtor(void* object) {
  GetServerResponse* _this = reinterpret_cast< GetServerResponse* >(object);
  (void)_this;
}
void GetServerResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetServerResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetServerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:lbService.GetServerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  host_.Clear();
  ::memset(&modid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&modid_)) + sizeof(uid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetServerResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 modid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          modid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .lbService.HostInfo host = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_host(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetServerResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lbService.GetServerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 modid = 1;
  if (this->_internal_modid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_modid(), target);
  }

  // int32 uid = 2;
  if (this->_internal_uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_uid(), target);
  }

  // repeated .lbService.HostInfo host = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_host_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_host(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lbService.GetServerResponse)
  return target;
}

size_t GetServerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lbService.GetServerResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .lbService.HostInfo host = 3;
  total_size += 1UL * this->_internal_host_size();
  for (const auto& msg : this->host_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 modid = 1;
  if (this->_internal_modid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_modid());
  }

  // int32 uid = 2;
  if (this->_internal_uid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_uid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetServerResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetServerResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetServerResponse::GetClassData() const { return &_class_data_; }

void GetServerResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetServerResponse *>(to)->MergeFrom(
      static_cast<const GetServerResponse &>(from));
}


void GetServerResponse::MergeFrom(const GetServerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lbService.GetServerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  host_.MergeFrom(from.host_);
  if (from._internal_modid() != 0) {
    _internal_set_modid(from._internal_modid());
  }
  if (from._internal_uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetServerResponse::CopyFrom(const GetServerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lbService.GetServerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServerResponse::IsInitialized() const {
  return true;
}

void GetServerResponse::InternalSwap(GetServerResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  host_.InternalSwap(&other->host_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetServerResponse, uid_)
      + sizeof(GetServerResponse::uid_)
      - PROTOBUF_FIELD_OFFSET(GetServerResponse, modid_)>(
          reinterpret_cast<char*>(&modid_),
          reinterpret_cast<char*>(&other->modid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetServerResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_lbService_2eproto_getter, &descriptor_table_lbService_2eproto_once,
      file_level_metadata_lbService_2eproto[2]);
}

// ===================================================================

class ServerResonseToLb::_Internal {
 public:
};

ServerResonseToLb::ServerResonseToLb(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:lbService.ServerResonseToLb)
}
ServerResonseToLb::ServerResonseToLb(const ServerResonseToLb& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&modid_, &from.modid_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&modid_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:lbService.ServerResonseToLb)
}

void ServerResonseToLb::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&modid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&modid_)) + sizeof(result_));
}

ServerResonseToLb::~ServerResonseToLb() {
  // @@protoc_insertion_point(destructor:lbService.ServerResonseToLb)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ServerResonseToLb::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ServerResonseToLb::ArenaDtor(void* object) {
  ServerResonseToLb* _this = reinterpret_cast< ServerResonseToLb* >(object);
  (void)_this;
}
void ServerResonseToLb::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerResonseToLb::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ServerResonseToLb::Clear() {
// @@protoc_insertion_point(message_clear_start:lbService.ServerResonseToLb)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&modid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&modid_)) + sizeof(result_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerResonseToLb::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 modid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          modid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 originId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          originid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 finalId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          finalid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 result = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerResonseToLb::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lbService.ServerResonseToLb)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 modid = 1;
  if (this->_internal_modid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_modid(), target);
  }

  // int32 originId = 2;
  if (this->_internal_originid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_originid(), target);
  }

  // int32 finalId = 3;
  if (this->_internal_finalid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_finalid(), target);
  }

  // int32 result = 4;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lbService.ServerResonseToLb)
  return target;
}

size_t ServerResonseToLb::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lbService.ServerResonseToLb)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 modid = 1;
  if (this->_internal_modid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_modid());
  }

  // int32 originId = 2;
  if (this->_internal_originid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_originid());
  }

  // int32 finalId = 3;
  if (this->_internal_finalid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_finalid());
  }

  // int32 result = 4;
  if (this->_internal_result() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerResonseToLb::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ServerResonseToLb::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerResonseToLb::GetClassData() const { return &_class_data_; }

void ServerResonseToLb::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ServerResonseToLb *>(to)->MergeFrom(
      static_cast<const ServerResonseToLb &>(from));
}


void ServerResonseToLb::MergeFrom(const ServerResonseToLb& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lbService.ServerResonseToLb)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_modid() != 0) {
    _internal_set_modid(from._internal_modid());
  }
  if (from._internal_originid() != 0) {
    _internal_set_originid(from._internal_originid());
  }
  if (from._internal_finalid() != 0) {
    _internal_set_finalid(from._internal_finalid());
  }
  if (from._internal_result() != 0) {
    _internal_set_result(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerResonseToLb::CopyFrom(const ServerResonseToLb& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lbService.ServerResonseToLb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerResonseToLb::IsInitialized() const {
  return true;
}

void ServerResonseToLb::InternalSwap(ServerResonseToLb* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerResonseToLb, result_)
      + sizeof(ServerResonseToLb::result_)
      - PROTOBUF_FIELD_OFFSET(ServerResonseToLb, modid_)>(
          reinterpret_cast<char*>(&modid_),
          reinterpret_cast<char*>(&other->modid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerResonseToLb::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_lbService_2eproto_getter, &descriptor_table_lbService_2eproto_once,
      file_level_metadata_lbService_2eproto[3]);
}

// ===================================================================

class Repoter::_Internal {
 public:
  static const ::lbService::HostInfo& client(const Repoter* msg);
};

const ::lbService::HostInfo&
Repoter::_Internal::client(const Repoter* msg) {
  return *msg->client_;
}
Repoter::Repoter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:lbService.Repoter)
}
Repoter::Repoter(const Repoter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_client()) {
    client_ = new ::lbService::HostInfo(*from.client_);
  } else {
    client_ = nullptr;
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:lbService.Repoter)
}

void Repoter::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&client_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&client_)) + sizeof(result_));
}

Repoter::~Repoter() {
  // @@protoc_insertion_point(destructor:lbService.Repoter)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Repoter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete client_;
}

void Repoter::ArenaDtor(void* object) {
  Repoter* _this = reinterpret_cast< Repoter* >(object);
  (void)_this;
}
void Repoter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Repoter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Repoter::Clear() {
// @@protoc_insertion_point(message_clear_start:lbService.Repoter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && client_ != nullptr) {
    delete client_;
  }
  client_ = nullptr;
  result_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Repoter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .lbService.HostInfo client = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_client(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Repoter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lbService.Repoter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_result(), target);
  }

  // .lbService.HostInfo client = 2;
  if (this->_internal_has_client()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::client(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lbService.Repoter)
  return target;
}

size_t Repoter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lbService.Repoter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .lbService.HostInfo client = 2;
  if (this->_internal_has_client()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *client_);
  }

  // bool result = 1;
  if (this->_internal_result() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Repoter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Repoter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Repoter::GetClassData() const { return &_class_data_; }

void Repoter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Repoter *>(to)->MergeFrom(
      static_cast<const Repoter &>(from));
}


void Repoter::MergeFrom(const Repoter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lbService.Repoter)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_client()) {
    _internal_mutable_client()->::lbService::HostInfo::MergeFrom(from._internal_client());
  }
  if (from._internal_result() != 0) {
    _internal_set_result(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Repoter::CopyFrom(const Repoter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lbService.Repoter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Repoter::IsInitialized() const {
  return true;
}

void Repoter::InternalSwap(Repoter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Repoter, result_)
      + sizeof(Repoter::result_)
      - PROTOBUF_FIELD_OFFSET(Repoter, client_)>(
          reinterpret_cast<char*>(&client_),
          reinterpret_cast<char*>(&other->client_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Repoter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_lbService_2eproto_getter, &descriptor_table_lbService_2eproto_once,
      file_level_metadata_lbService_2eproto[4]);
}

// ===================================================================

class RepostMsgRequest::_Internal {
 public:
};

RepostMsgRequest::RepostMsgRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:lbService.RepostMsgRequest)
}
RepostMsgRequest::RepostMsgRequest(const RepostMsgRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArenaForAllocation());
  }
  ::memcpy(&modid_, &from.modid_,
    static_cast<size_t>(reinterpret_cast<char*>(&toid_) -
    reinterpret_cast<char*>(&modid_)) + sizeof(toid_));
  // @@protoc_insertion_point(copy_constructor:lbService.RepostMsgRequest)
}

void RepostMsgRequest::SharedCtor() {
msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&modid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&toid_) -
    reinterpret_cast<char*>(&modid_)) + sizeof(toid_));
}

RepostMsgRequest::~RepostMsgRequest() {
  // @@protoc_insertion_point(destructor:lbService.RepostMsgRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RepostMsgRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RepostMsgRequest::ArenaDtor(void* object) {
  RepostMsgRequest* _this = reinterpret_cast< RepostMsgRequest* >(object);
  (void)_this;
}
void RepostMsgRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RepostMsgRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RepostMsgRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lbService.RepostMsgRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmpty();
  ::memset(&modid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&toid_) -
      reinterpret_cast<char*>(&modid_)) + sizeof(toid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RepostMsgRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 modid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          modid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 fromId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          fromid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string msg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lbService.RepostMsgRequest.msg"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 toId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          toid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RepostMsgRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lbService.RepostMsgRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 modid = 1;
  if (this->_internal_modid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_modid(), target);
  }

  // int32 fromId = 2;
  if (this->_internal_fromid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_fromid(), target);
  }

  // string msg = 3;
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lbService.RepostMsgRequest.msg");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_msg(), target);
  }

  // int32 toId = 4;
  if (this->_internal_toid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_toid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lbService.RepostMsgRequest)
  return target;
}

size_t RepostMsgRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lbService.RepostMsgRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 3;
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // int32 modid = 1;
  if (this->_internal_modid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_modid());
  }

  // int32 fromId = 2;
  if (this->_internal_fromid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_fromid());
  }

  // int32 toId = 4;
  if (this->_internal_toid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_toid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RepostMsgRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RepostMsgRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RepostMsgRequest::GetClassData() const { return &_class_data_; }

void RepostMsgRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RepostMsgRequest *>(to)->MergeFrom(
      static_cast<const RepostMsgRequest &>(from));
}


void RepostMsgRequest::MergeFrom(const RepostMsgRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lbService.RepostMsgRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _internal_set_msg(from._internal_msg());
  }
  if (from._internal_modid() != 0) {
    _internal_set_modid(from._internal_modid());
  }
  if (from._internal_fromid() != 0) {
    _internal_set_fromid(from._internal_fromid());
  }
  if (from._internal_toid() != 0) {
    _internal_set_toid(from._internal_toid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RepostMsgRequest::CopyFrom(const RepostMsgRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lbService.RepostMsgRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RepostMsgRequest::IsInitialized() const {
  return true;
}

void RepostMsgRequest::InternalSwap(RepostMsgRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_, lhs_arena,
      &other->msg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RepostMsgRequest, toid_)
      + sizeof(RepostMsgRequest::toid_)
      - PROTOBUF_FIELD_OFFSET(RepostMsgRequest, modid_)>(
          reinterpret_cast<char*>(&modid_),
          reinterpret_cast<char*>(&other->modid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RepostMsgRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_lbService_2eproto_getter, &descriptor_table_lbService_2eproto_once,
      file_level_metadata_lbService_2eproto[5]);
}

// ===================================================================

class RepostMsgResponseTo::_Internal {
 public:
};

RepostMsgResponseTo::RepostMsgResponseTo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  msg_(arena),
  toid_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:lbService.RepostMsgResponseTo)
}
RepostMsgResponseTo::RepostMsgResponseTo(const RepostMsgResponseTo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      msg_(from.msg_),
      toid_(from.toid_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&modid_, &from.modid_,
    static_cast<size_t>(reinterpret_cast<char*>(&gid_) -
    reinterpret_cast<char*>(&modid_)) + sizeof(gid_));
  // @@protoc_insertion_point(copy_constructor:lbService.RepostMsgResponseTo)
}

void RepostMsgResponseTo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&modid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&gid_) -
    reinterpret_cast<char*>(&modid_)) + sizeof(gid_));
}

RepostMsgResponseTo::~RepostMsgResponseTo() {
  // @@protoc_insertion_point(destructor:lbService.RepostMsgResponseTo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RepostMsgResponseTo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RepostMsgResponseTo::ArenaDtor(void* object) {
  RepostMsgResponseTo* _this = reinterpret_cast< RepostMsgResponseTo* >(object);
  (void)_this;
}
void RepostMsgResponseTo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RepostMsgResponseTo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RepostMsgResponseTo::Clear() {
// @@protoc_insertion_point(message_clear_start:lbService.RepostMsgResponseTo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.Clear();
  toid_.Clear();
  ::memset(&modid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gid_) -
      reinterpret_cast<char*>(&modid_)) + sizeof(gid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RepostMsgResponseTo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 modid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          modid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 fromId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          fromid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string msg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_msg();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lbService.RepostMsgResponseTo.msg"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 gid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          gid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 toId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_toid(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_toid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RepostMsgResponseTo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lbService.RepostMsgResponseTo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 modid = 1;
  if (this->_internal_modid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_modid(), target);
  }

  // int32 fromId = 2;
  if (this->_internal_fromid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_fromid(), target);
  }

  // repeated string msg = 3;
  for (int i = 0, n = this->_internal_msg_size(); i < n; i++) {
    const auto& s = this->_internal_msg(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lbService.RepostMsgResponseTo.msg");
    target = stream->WriteString(3, s, target);
  }

  // int32 gid = 4;
  if (this->_internal_gid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_gid(), target);
  }

  // repeated int32 toId = 5;
  {
    int byte_size = _toid_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          5, _internal_toid(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lbService.RepostMsgResponseTo)
  return target;
}

size_t RepostMsgResponseTo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lbService.RepostMsgResponseTo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string msg = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(msg_.size());
  for (int i = 0, n = msg_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      msg_.Get(i));
  }

  // repeated int32 toId = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->toid_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _toid_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 modid = 1;
  if (this->_internal_modid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_modid());
  }

  // int32 fromId = 2;
  if (this->_internal_fromid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_fromid());
  }

  // int32 gid = 4;
  if (this->_internal_gid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_gid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RepostMsgResponseTo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RepostMsgResponseTo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RepostMsgResponseTo::GetClassData() const { return &_class_data_; }

void RepostMsgResponseTo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RepostMsgResponseTo *>(to)->MergeFrom(
      static_cast<const RepostMsgResponseTo &>(from));
}


void RepostMsgResponseTo::MergeFrom(const RepostMsgResponseTo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lbService.RepostMsgResponseTo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  msg_.MergeFrom(from.msg_);
  toid_.MergeFrom(from.toid_);
  if (from._internal_modid() != 0) {
    _internal_set_modid(from._internal_modid());
  }
  if (from._internal_fromid() != 0) {
    _internal_set_fromid(from._internal_fromid());
  }
  if (from._internal_gid() != 0) {
    _internal_set_gid(from._internal_gid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RepostMsgResponseTo::CopyFrom(const RepostMsgResponseTo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lbService.RepostMsgResponseTo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RepostMsgResponseTo::IsInitialized() const {
  return true;
}

void RepostMsgResponseTo::InternalSwap(RepostMsgResponseTo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  msg_.InternalSwap(&other->msg_);
  toid_.InternalSwap(&other->toid_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RepostMsgResponseTo, gid_)
      + sizeof(RepostMsgResponseTo::gid_)
      - PROTOBUF_FIELD_OFFSET(RepostMsgResponseTo, modid_)>(
          reinterpret_cast<char*>(&modid_),
          reinterpret_cast<char*>(&other->modid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RepostMsgResponseTo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_lbService_2eproto_getter, &descriptor_table_lbService_2eproto_once,
      file_level_metadata_lbService_2eproto[6]);
}

// ===================================================================

class RepostMsgResponseFrom::_Internal {
 public:
};

RepostMsgResponseFrom::RepostMsgResponseFrom(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:lbService.RepostMsgResponseFrom)
}
RepostMsgResponseFrom::RepostMsgResponseFrom(const RepostMsgResponseFrom& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&fromid_, &from.fromid_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&fromid_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:lbService.RepostMsgResponseFrom)
}

void RepostMsgResponseFrom::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&fromid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&fromid_)) + sizeof(result_));
}

RepostMsgResponseFrom::~RepostMsgResponseFrom() {
  // @@protoc_insertion_point(destructor:lbService.RepostMsgResponseFrom)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RepostMsgResponseFrom::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RepostMsgResponseFrom::ArenaDtor(void* object) {
  RepostMsgResponseFrom* _this = reinterpret_cast< RepostMsgResponseFrom* >(object);
  (void)_this;
}
void RepostMsgResponseFrom::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RepostMsgResponseFrom::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RepostMsgResponseFrom::Clear() {
// @@protoc_insertion_point(message_clear_start:lbService.RepostMsgResponseFrom)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&fromid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&fromid_)) + sizeof(result_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RepostMsgResponseFrom::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 fromId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          fromid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 toId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          toid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 msgId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          msgid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 result = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RepostMsgResponseFrom::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lbService.RepostMsgResponseFrom)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 fromId = 1;
  if (this->_internal_fromid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_fromid(), target);
  }

  // int32 toId = 2;
  if (this->_internal_toid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_toid(), target);
  }

  // int32 msgId = 3;
  if (this->_internal_msgid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_msgid(), target);
  }

  // int32 result = 4;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lbService.RepostMsgResponseFrom)
  return target;
}

size_t RepostMsgResponseFrom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lbService.RepostMsgResponseFrom)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 fromId = 1;
  if (this->_internal_fromid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_fromid());
  }

  // int32 toId = 2;
  if (this->_internal_toid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_toid());
  }

  // int32 msgId = 3;
  if (this->_internal_msgid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_msgid());
  }

  // int32 result = 4;
  if (this->_internal_result() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RepostMsgResponseFrom::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RepostMsgResponseFrom::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RepostMsgResponseFrom::GetClassData() const { return &_class_data_; }

void RepostMsgResponseFrom::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RepostMsgResponseFrom *>(to)->MergeFrom(
      static_cast<const RepostMsgResponseFrom &>(from));
}


void RepostMsgResponseFrom::MergeFrom(const RepostMsgResponseFrom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lbService.RepostMsgResponseFrom)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_fromid() != 0) {
    _internal_set_fromid(from._internal_fromid());
  }
  if (from._internal_toid() != 0) {
    _internal_set_toid(from._internal_toid());
  }
  if (from._internal_msgid() != 0) {
    _internal_set_msgid(from._internal_msgid());
  }
  if (from._internal_result() != 0) {
    _internal_set_result(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RepostMsgResponseFrom::CopyFrom(const RepostMsgResponseFrom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lbService.RepostMsgResponseFrom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RepostMsgResponseFrom::IsInitialized() const {
  return true;
}

void RepostMsgResponseFrom::InternalSwap(RepostMsgResponseFrom* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RepostMsgResponseFrom, result_)
      + sizeof(RepostMsgResponseFrom::result_)
      - PROTOBUF_FIELD_OFFSET(RepostMsgResponseFrom, fromid_)>(
          reinterpret_cast<char*>(&fromid_),
          reinterpret_cast<char*>(&other->fromid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RepostMsgResponseFrom::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_lbService_2eproto_getter, &descriptor_table_lbService_2eproto_once,
      file_level_metadata_lbService_2eproto[7]);
}

// ===================================================================

class StopServiceRequest::_Internal {
 public:
};

StopServiceRequest::StopServiceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:lbService.StopServiceRequest)
}
StopServiceRequest::StopServiceRequest(const StopServiceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  uid_ = from.uid_;
  // @@protoc_insertion_point(copy_constructor:lbService.StopServiceRequest)
}

void StopServiceRequest::SharedCtor() {
uid_ = 0;
}

StopServiceRequest::~StopServiceRequest() {
  // @@protoc_insertion_point(destructor:lbService.StopServiceRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StopServiceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StopServiceRequest::ArenaDtor(void* object) {
  StopServiceRequest* _this = reinterpret_cast< StopServiceRequest* >(object);
  (void)_this;
}
void StopServiceRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StopServiceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StopServiceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lbService.StopServiceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StopServiceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StopServiceRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lbService.StopServiceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->_internal_uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lbService.StopServiceRequest)
  return target;
}

size_t StopServiceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lbService.StopServiceRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->_internal_uid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_uid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StopServiceRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StopServiceRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StopServiceRequest::GetClassData() const { return &_class_data_; }

void StopServiceRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StopServiceRequest *>(to)->MergeFrom(
      static_cast<const StopServiceRequest &>(from));
}


void StopServiceRequest::MergeFrom(const StopServiceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lbService.StopServiceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StopServiceRequest::CopyFrom(const StopServiceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lbService.StopServiceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopServiceRequest::IsInitialized() const {
  return true;
}

void StopServiceRequest::InternalSwap(StopServiceRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(uid_, other->uid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StopServiceRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_lbService_2eproto_getter, &descriptor_table_lbService_2eproto_once,
      file_level_metadata_lbService_2eproto[8]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace lbService
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::lbService::HostInfo* Arena::CreateMaybeMessage< ::lbService::HostInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lbService::HostInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::lbService::GetServerRequest* Arena::CreateMaybeMessage< ::lbService::GetServerRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lbService::GetServerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::lbService::GetServerResponse* Arena::CreateMaybeMessage< ::lbService::GetServerResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lbService::GetServerResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::lbService::ServerResonseToLb* Arena::CreateMaybeMessage< ::lbService::ServerResonseToLb >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lbService::ServerResonseToLb >(arena);
}
template<> PROTOBUF_NOINLINE ::lbService::Repoter* Arena::CreateMaybeMessage< ::lbService::Repoter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lbService::Repoter >(arena);
}
template<> PROTOBUF_NOINLINE ::lbService::RepostMsgRequest* Arena::CreateMaybeMessage< ::lbService::RepostMsgRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lbService::RepostMsgRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::lbService::RepostMsgResponseTo* Arena::CreateMaybeMessage< ::lbService::RepostMsgResponseTo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lbService::RepostMsgResponseTo >(arena);
}
template<> PROTOBUF_NOINLINE ::lbService::RepostMsgResponseFrom* Arena::CreateMaybeMessage< ::lbService::RepostMsgResponseFrom >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lbService::RepostMsgResponseFrom >(arena);
}
template<> PROTOBUF_NOINLINE ::lbService::StopServiceRequest* Arena::CreateMaybeMessage< ::lbService::StopServiceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lbService::StopServiceRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
