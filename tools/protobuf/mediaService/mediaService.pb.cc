// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediaService.proto

#include "mediaService.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace mediaService {
constexpr AddRoomRequest::AddRoomRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fid_(0u){}
struct AddRoomRequestDefaultTypeInternal {
  constexpr AddRoomRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AddRoomRequestDefaultTypeInternal() {}
  union {
    AddRoomRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AddRoomRequestDefaultTypeInternal _AddRoomRequest_default_instance_;
constexpr AddRoomResponse::AddRoomResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fid_(0u)
  , result_(0u)
  , fromserver_(0u){}
struct AddRoomResponseDefaultTypeInternal {
  constexpr AddRoomResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AddRoomResponseDefaultTypeInternal() {}
  union {
    AddRoomResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AddRoomResponseDefaultTypeInternal _AddRoomResponse_default_instance_;
constexpr DelRoomRequest::DelRoomRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fid_(0u){}
struct DelRoomRequestDefaultTypeInternal {
  constexpr DelRoomRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DelRoomRequestDefaultTypeInternal() {}
  union {
    DelRoomRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DelRoomRequestDefaultTypeInternal _DelRoomRequest_default_instance_;
constexpr DelRoomResponse::DelRoomResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fid_(0u)
  , result_(0u)
  , fromserver_(0u){}
struct DelRoomResponseDefaultTypeInternal {
  constexpr DelRoomResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DelRoomResponseDefaultTypeInternal() {}
  union {
    DelRoomResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DelRoomResponseDefaultTypeInternal _DelRoomResponse_default_instance_;
constexpr RtpHeader::RtpHeader(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : base_(0u)
  , timestamp_(0u)
  , ssrc_(0u){}
struct RtpHeaderDefaultTypeInternal {
  constexpr RtpHeaderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RtpHeaderDefaultTypeInternal() {}
  union {
    RtpHeader _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RtpHeaderDefaultTypeInternal _RtpHeader_default_instance_;
constexpr RtpPacket::RtpPacket(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : payload_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , header_(nullptr){}
struct RtpPacketDefaultTypeInternal {
  constexpr RtpPacketDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RtpPacketDefaultTypeInternal() {}
  union {
    RtpPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RtpPacketDefaultTypeInternal _RtpPacket_default_instance_;
}  // namespace mediaService
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mediaService_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_mediaService_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mediaService_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mediaService_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mediaService::AddRoomRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mediaService::AddRoomRequest, fid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mediaService::AddRoomResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mediaService::AddRoomResponse, fid_),
  PROTOBUF_FIELD_OFFSET(::mediaService::AddRoomResponse, result_),
  PROTOBUF_FIELD_OFFSET(::mediaService::AddRoomResponse, fromserver_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mediaService::DelRoomRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mediaService::DelRoomRequest, fid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mediaService::DelRoomResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mediaService::DelRoomResponse, fid_),
  PROTOBUF_FIELD_OFFSET(::mediaService::DelRoomResponse, result_),
  PROTOBUF_FIELD_OFFSET(::mediaService::DelRoomResponse, fromserver_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mediaService::RtpHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mediaService::RtpHeader, base_),
  PROTOBUF_FIELD_OFFSET(::mediaService::RtpHeader, timestamp_),
  PROTOBUF_FIELD_OFFSET(::mediaService::RtpHeader, ssrc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mediaService::RtpPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mediaService::RtpPacket, header_),
  PROTOBUF_FIELD_OFFSET(::mediaService::RtpPacket, payload_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::mediaService::AddRoomRequest)},
  { 7, -1, -1, sizeof(::mediaService::AddRoomResponse)},
  { 16, -1, -1, sizeof(::mediaService::DelRoomRequest)},
  { 23, -1, -1, sizeof(::mediaService::DelRoomResponse)},
  { 32, -1, -1, sizeof(::mediaService::RtpHeader)},
  { 41, -1, -1, sizeof(::mediaService::RtpPacket)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediaService::_AddRoomRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediaService::_AddRoomResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediaService::_DelRoomRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediaService::_DelRoomResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediaService::_RtpHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediaService::_RtpPacket_default_instance_),
};

const char descriptor_table_protodef_mediaService_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022mediaService.proto\022\014mediaService\"\035\n\016Ad"
  "dRoomRequest\022\013\n\003fid\030\001 \001(\r\"B\n\017AddRoomResp"
  "onse\022\013\n\003fid\030\001 \001(\r\022\016\n\006result\030\002 \001(\r\022\022\n\nfro"
  "mServer\030\003 \001(\r\"\035\n\016DelRoomRequest\022\013\n\003fid\030\001"
  " \001(\r\"B\n\017DelRoomResponse\022\013\n\003fid\030\001 \001(\r\022\016\n\006"
  "result\030\002 \001(\r\022\022\n\nfromServer\030\003 \001(\r\":\n\tRtpH"
  "eader\022\014\n\004base\030\001 \001(\r\022\021\n\ttimestamp\030\002 \001(\r\022\014"
  "\n\004ssrc\030\003 \001(\r\"E\n\tRtpPacket\022\'\n\006header\030\001 \001("
  "\0132\027.mediaService.RtpHeader\022\017\n\007payload\030\002 "
  "\001(\014*\270\001\n\tMessageID\022\r\n\tID_UNKNOW\020\000\022\025\n\021ID_A"
  "ddRoomRequest\020\001\022\026\n\022ID_AddRoomResponse\020\002\022"
  "\025\n\021ID_DelRoomRequest\020\003\022\026\n\022ID_DelRoomResp"
  "onse\020\004\022\025\n\021ID_TransRtpPacket\020\005\022\022\n\016ID_Rtsp"
  "Request\020\006\022\023\n\017ID_RtspResponse\020\007b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mediaService_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediaService_2eproto = {
  false, false, 558, descriptor_table_protodef_mediaService_2eproto, "mediaService.proto", 
  &descriptor_table_mediaService_2eproto_once, nullptr, 0, 6,
  schemas, file_default_instances, TableStruct_mediaService_2eproto::offsets,
  file_level_metadata_mediaService_2eproto, file_level_enum_descriptors_mediaService_2eproto, file_level_service_descriptors_mediaService_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_mediaService_2eproto_getter() {
  return &descriptor_table_mediaService_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_mediaService_2eproto(&descriptor_table_mediaService_2eproto);
namespace mediaService {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageID_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mediaService_2eproto);
  return file_level_enum_descriptors_mediaService_2eproto[0];
}
bool MessageID_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class AddRoomRequest::_Internal {
 public:
};

AddRoomRequest::AddRoomRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mediaService.AddRoomRequest)
}
AddRoomRequest::AddRoomRequest(const AddRoomRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  fid_ = from.fid_;
  // @@protoc_insertion_point(copy_constructor:mediaService.AddRoomRequest)
}

void AddRoomRequest::SharedCtor() {
fid_ = 0u;
}

AddRoomRequest::~AddRoomRequest() {
  // @@protoc_insertion_point(destructor:mediaService.AddRoomRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AddRoomRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AddRoomRequest::ArenaDtor(void* object) {
  AddRoomRequest* _this = reinterpret_cast< AddRoomRequest* >(object);
  (void)_this;
}
void AddRoomRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddRoomRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AddRoomRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mediaService.AddRoomRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddRoomRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 fid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          fid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddRoomRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediaService.AddRoomRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 fid = 1;
  if (this->_internal_fid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_fid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediaService.AddRoomRequest)
  return target;
}

size_t AddRoomRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediaService.AddRoomRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 fid = 1;
  if (this->_internal_fid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_fid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddRoomRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AddRoomRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddRoomRequest::GetClassData() const { return &_class_data_; }

void AddRoomRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AddRoomRequest *>(to)->MergeFrom(
      static_cast<const AddRoomRequest &>(from));
}


void AddRoomRequest::MergeFrom(const AddRoomRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediaService.AddRoomRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_fid() != 0) {
    _internal_set_fid(from._internal_fid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddRoomRequest::CopyFrom(const AddRoomRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediaService.AddRoomRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddRoomRequest::IsInitialized() const {
  return true;
}

void AddRoomRequest::InternalSwap(AddRoomRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(fid_, other->fid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddRoomRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediaService_2eproto_getter, &descriptor_table_mediaService_2eproto_once,
      file_level_metadata_mediaService_2eproto[0]);
}

// ===================================================================

class AddRoomResponse::_Internal {
 public:
};

AddRoomResponse::AddRoomResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mediaService.AddRoomResponse)
}
AddRoomResponse::AddRoomResponse(const AddRoomResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&fid_, &from.fid_,
    static_cast<size_t>(reinterpret_cast<char*>(&fromserver_) -
    reinterpret_cast<char*>(&fid_)) + sizeof(fromserver_));
  // @@protoc_insertion_point(copy_constructor:mediaService.AddRoomResponse)
}

void AddRoomResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&fid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fromserver_) -
    reinterpret_cast<char*>(&fid_)) + sizeof(fromserver_));
}

AddRoomResponse::~AddRoomResponse() {
  // @@protoc_insertion_point(destructor:mediaService.AddRoomResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AddRoomResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AddRoomResponse::ArenaDtor(void* object) {
  AddRoomResponse* _this = reinterpret_cast< AddRoomResponse* >(object);
  (void)_this;
}
void AddRoomResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddRoomResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AddRoomResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mediaService.AddRoomResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&fid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fromserver_) -
      reinterpret_cast<char*>(&fid_)) + sizeof(fromserver_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddRoomResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 fid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          fid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 fromServer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          fromserver_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddRoomResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediaService.AddRoomResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 fid = 1;
  if (this->_internal_fid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_fid(), target);
  }

  // uint32 result = 2;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_result(), target);
  }

  // uint32 fromServer = 3;
  if (this->_internal_fromserver() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_fromserver(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediaService.AddRoomResponse)
  return target;
}

size_t AddRoomResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediaService.AddRoomResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 fid = 1;
  if (this->_internal_fid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_fid());
  }

  // uint32 result = 2;
  if (this->_internal_result() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_result());
  }

  // uint32 fromServer = 3;
  if (this->_internal_fromserver() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_fromserver());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddRoomResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AddRoomResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddRoomResponse::GetClassData() const { return &_class_data_; }

void AddRoomResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AddRoomResponse *>(to)->MergeFrom(
      static_cast<const AddRoomResponse &>(from));
}


void AddRoomResponse::MergeFrom(const AddRoomResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediaService.AddRoomResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_fid() != 0) {
    _internal_set_fid(from._internal_fid());
  }
  if (from._internal_result() != 0) {
    _internal_set_result(from._internal_result());
  }
  if (from._internal_fromserver() != 0) {
    _internal_set_fromserver(from._internal_fromserver());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddRoomResponse::CopyFrom(const AddRoomResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediaService.AddRoomResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddRoomResponse::IsInitialized() const {
  return true;
}

void AddRoomResponse::InternalSwap(AddRoomResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddRoomResponse, fromserver_)
      + sizeof(AddRoomResponse::fromserver_)
      - PROTOBUF_FIELD_OFFSET(AddRoomResponse, fid_)>(
          reinterpret_cast<char*>(&fid_),
          reinterpret_cast<char*>(&other->fid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddRoomResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediaService_2eproto_getter, &descriptor_table_mediaService_2eproto_once,
      file_level_metadata_mediaService_2eproto[1]);
}

// ===================================================================

class DelRoomRequest::_Internal {
 public:
};

DelRoomRequest::DelRoomRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mediaService.DelRoomRequest)
}
DelRoomRequest::DelRoomRequest(const DelRoomRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  fid_ = from.fid_;
  // @@protoc_insertion_point(copy_constructor:mediaService.DelRoomRequest)
}

void DelRoomRequest::SharedCtor() {
fid_ = 0u;
}

DelRoomRequest::~DelRoomRequest() {
  // @@protoc_insertion_point(destructor:mediaService.DelRoomRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DelRoomRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DelRoomRequest::ArenaDtor(void* object) {
  DelRoomRequest* _this = reinterpret_cast< DelRoomRequest* >(object);
  (void)_this;
}
void DelRoomRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DelRoomRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DelRoomRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mediaService.DelRoomRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DelRoomRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 fid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          fid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DelRoomRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediaService.DelRoomRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 fid = 1;
  if (this->_internal_fid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_fid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediaService.DelRoomRequest)
  return target;
}

size_t DelRoomRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediaService.DelRoomRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 fid = 1;
  if (this->_internal_fid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_fid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DelRoomRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DelRoomRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DelRoomRequest::GetClassData() const { return &_class_data_; }

void DelRoomRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DelRoomRequest *>(to)->MergeFrom(
      static_cast<const DelRoomRequest &>(from));
}


void DelRoomRequest::MergeFrom(const DelRoomRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediaService.DelRoomRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_fid() != 0) {
    _internal_set_fid(from._internal_fid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DelRoomRequest::CopyFrom(const DelRoomRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediaService.DelRoomRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelRoomRequest::IsInitialized() const {
  return true;
}

void DelRoomRequest::InternalSwap(DelRoomRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(fid_, other->fid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DelRoomRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediaService_2eproto_getter, &descriptor_table_mediaService_2eproto_once,
      file_level_metadata_mediaService_2eproto[2]);
}

// ===================================================================

class DelRoomResponse::_Internal {
 public:
};

DelRoomResponse::DelRoomResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mediaService.DelRoomResponse)
}
DelRoomResponse::DelRoomResponse(const DelRoomResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&fid_, &from.fid_,
    static_cast<size_t>(reinterpret_cast<char*>(&fromserver_) -
    reinterpret_cast<char*>(&fid_)) + sizeof(fromserver_));
  // @@protoc_insertion_point(copy_constructor:mediaService.DelRoomResponse)
}

void DelRoomResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&fid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fromserver_) -
    reinterpret_cast<char*>(&fid_)) + sizeof(fromserver_));
}

DelRoomResponse::~DelRoomResponse() {
  // @@protoc_insertion_point(destructor:mediaService.DelRoomResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DelRoomResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DelRoomResponse::ArenaDtor(void* object) {
  DelRoomResponse* _this = reinterpret_cast< DelRoomResponse* >(object);
  (void)_this;
}
void DelRoomResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DelRoomResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DelRoomResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mediaService.DelRoomResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&fid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fromserver_) -
      reinterpret_cast<char*>(&fid_)) + sizeof(fromserver_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DelRoomResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 fid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          fid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 fromServer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          fromserver_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DelRoomResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediaService.DelRoomResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 fid = 1;
  if (this->_internal_fid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_fid(), target);
  }

  // uint32 result = 2;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_result(), target);
  }

  // uint32 fromServer = 3;
  if (this->_internal_fromserver() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_fromserver(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediaService.DelRoomResponse)
  return target;
}

size_t DelRoomResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediaService.DelRoomResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 fid = 1;
  if (this->_internal_fid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_fid());
  }

  // uint32 result = 2;
  if (this->_internal_result() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_result());
  }

  // uint32 fromServer = 3;
  if (this->_internal_fromserver() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_fromserver());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DelRoomResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DelRoomResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DelRoomResponse::GetClassData() const { return &_class_data_; }

void DelRoomResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DelRoomResponse *>(to)->MergeFrom(
      static_cast<const DelRoomResponse &>(from));
}


void DelRoomResponse::MergeFrom(const DelRoomResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediaService.DelRoomResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_fid() != 0) {
    _internal_set_fid(from._internal_fid());
  }
  if (from._internal_result() != 0) {
    _internal_set_result(from._internal_result());
  }
  if (from._internal_fromserver() != 0) {
    _internal_set_fromserver(from._internal_fromserver());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DelRoomResponse::CopyFrom(const DelRoomResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediaService.DelRoomResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelRoomResponse::IsInitialized() const {
  return true;
}

void DelRoomResponse::InternalSwap(DelRoomResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DelRoomResponse, fromserver_)
      + sizeof(DelRoomResponse::fromserver_)
      - PROTOBUF_FIELD_OFFSET(DelRoomResponse, fid_)>(
          reinterpret_cast<char*>(&fid_),
          reinterpret_cast<char*>(&other->fid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DelRoomResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediaService_2eproto_getter, &descriptor_table_mediaService_2eproto_once,
      file_level_metadata_mediaService_2eproto[3]);
}

// ===================================================================

class RtpHeader::_Internal {
 public:
};

RtpHeader::RtpHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mediaService.RtpHeader)
}
RtpHeader::RtpHeader(const RtpHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&base_, &from.base_,
    static_cast<size_t>(reinterpret_cast<char*>(&ssrc_) -
    reinterpret_cast<char*>(&base_)) + sizeof(ssrc_));
  // @@protoc_insertion_point(copy_constructor:mediaService.RtpHeader)
}

void RtpHeader::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&base_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ssrc_) -
    reinterpret_cast<char*>(&base_)) + sizeof(ssrc_));
}

RtpHeader::~RtpHeader() {
  // @@protoc_insertion_point(destructor:mediaService.RtpHeader)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RtpHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RtpHeader::ArenaDtor(void* object) {
  RtpHeader* _this = reinterpret_cast< RtpHeader* >(object);
  (void)_this;
}
void RtpHeader::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RtpHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RtpHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:mediaService.RtpHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&base_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ssrc_) -
      reinterpret_cast<char*>(&base_)) + sizeof(ssrc_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RtpHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          base_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ssrc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ssrc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RtpHeader::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediaService.RtpHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 base = 1;
  if (this->_internal_base() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_base(), target);
  }

  // uint32 timestamp = 2;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_timestamp(), target);
  }

  // uint32 ssrc = 3;
  if (this->_internal_ssrc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_ssrc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediaService.RtpHeader)
  return target;
}

size_t RtpHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediaService.RtpHeader)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 base = 1;
  if (this->_internal_base() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_base());
  }

  // uint32 timestamp = 2;
  if (this->_internal_timestamp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_timestamp());
  }

  // uint32 ssrc = 3;
  if (this->_internal_ssrc() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ssrc());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RtpHeader::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RtpHeader::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RtpHeader::GetClassData() const { return &_class_data_; }

void RtpHeader::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RtpHeader *>(to)->MergeFrom(
      static_cast<const RtpHeader &>(from));
}


void RtpHeader::MergeFrom(const RtpHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediaService.RtpHeader)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_base() != 0) {
    _internal_set_base(from._internal_base());
  }
  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_ssrc() != 0) {
    _internal_set_ssrc(from._internal_ssrc());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RtpHeader::CopyFrom(const RtpHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediaService.RtpHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtpHeader::IsInitialized() const {
  return true;
}

void RtpHeader::InternalSwap(RtpHeader* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RtpHeader, ssrc_)
      + sizeof(RtpHeader::ssrc_)
      - PROTOBUF_FIELD_OFFSET(RtpHeader, base_)>(
          reinterpret_cast<char*>(&base_),
          reinterpret_cast<char*>(&other->base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RtpHeader::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediaService_2eproto_getter, &descriptor_table_mediaService_2eproto_once,
      file_level_metadata_mediaService_2eproto[4]);
}

// ===================================================================

class RtpPacket::_Internal {
 public:
  static const ::mediaService::RtpHeader& header(const RtpPacket* msg);
};

const ::mediaService::RtpHeader&
RtpPacket::_Internal::header(const RtpPacket* msg) {
  return *msg->header_;
}
RtpPacket::RtpPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mediaService.RtpPacket)
}
RtpPacket::RtpPacket(const RtpPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payload().empty()) {
    payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_payload(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_header()) {
    header_ = new ::mediaService::RtpHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mediaService.RtpPacket)
}

void RtpPacket::SharedCtor() {
payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
header_ = nullptr;
}

RtpPacket::~RtpPacket() {
  // @@protoc_insertion_point(destructor:mediaService.RtpPacket)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RtpPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  payload_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void RtpPacket::ArenaDtor(void* object) {
  RtpPacket* _this = reinterpret_cast< RtpPacket* >(object);
  (void)_this;
}
void RtpPacket::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RtpPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RtpPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:mediaService.RtpPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  payload_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RtpPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mediaService.RtpHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes payload = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_payload();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RtpPacket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediaService.RtpPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mediaService.RtpHeader header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // bytes payload = 2;
  if (!this->_internal_payload().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_payload(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediaService.RtpPacket)
  return target;
}

size_t RtpPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediaService.RtpPacket)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes payload = 2;
  if (!this->_internal_payload().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payload());
  }

  // .mediaService.RtpHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RtpPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RtpPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RtpPacket::GetClassData() const { return &_class_data_; }

void RtpPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RtpPacket *>(to)->MergeFrom(
      static_cast<const RtpPacket &>(from));
}


void RtpPacket::MergeFrom(const RtpPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediaService.RtpPacket)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_payload().empty()) {
    _internal_set_payload(from._internal_payload());
  }
  if (from._internal_has_header()) {
    _internal_mutable_header()->::mediaService::RtpHeader::MergeFrom(from._internal_header());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RtpPacket::CopyFrom(const RtpPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediaService.RtpPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtpPacket::IsInitialized() const {
  return true;
}

void RtpPacket::InternalSwap(RtpPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &payload_, lhs_arena,
      &other->payload_, rhs_arena
  );
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RtpPacket::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediaService_2eproto_getter, &descriptor_table_mediaService_2eproto_once,
      file_level_metadata_mediaService_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace mediaService
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mediaService::AddRoomRequest* Arena::CreateMaybeMessage< ::mediaService::AddRoomRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediaService::AddRoomRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mediaService::AddRoomResponse* Arena::CreateMaybeMessage< ::mediaService::AddRoomResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediaService::AddRoomResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mediaService::DelRoomRequest* Arena::CreateMaybeMessage< ::mediaService::DelRoomRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediaService::DelRoomRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mediaService::DelRoomResponse* Arena::CreateMaybeMessage< ::mediaService::DelRoomResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediaService::DelRoomResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mediaService::RtpHeader* Arena::CreateMaybeMessage< ::mediaService::RtpHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediaService::RtpHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::mediaService::RtpPacket* Arena::CreateMaybeMessage< ::mediaService::RtpPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediaService::RtpPacket >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
