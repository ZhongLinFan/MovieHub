// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediaService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mediaService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mediaService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mediaService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mediaService_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediaService_2eproto;
namespace mediaService {
class AddRoomRequest;
struct AddRoomRequestDefaultTypeInternal;
extern AddRoomRequestDefaultTypeInternal _AddRoomRequest_default_instance_;
class AddRoomResponse;
struct AddRoomResponseDefaultTypeInternal;
extern AddRoomResponseDefaultTypeInternal _AddRoomResponse_default_instance_;
class DelRoomRequest;
struct DelRoomRequestDefaultTypeInternal;
extern DelRoomRequestDefaultTypeInternal _DelRoomRequest_default_instance_;
class DelRoomResponse;
struct DelRoomResponseDefaultTypeInternal;
extern DelRoomResponseDefaultTypeInternal _DelRoomResponse_default_instance_;
class RtpHeader;
struct RtpHeaderDefaultTypeInternal;
extern RtpHeaderDefaultTypeInternal _RtpHeader_default_instance_;
class RtpPacket;
struct RtpPacketDefaultTypeInternal;
extern RtpPacketDefaultTypeInternal _RtpPacket_default_instance_;
}  // namespace mediaService
PROTOBUF_NAMESPACE_OPEN
template<> ::mediaService::AddRoomRequest* Arena::CreateMaybeMessage<::mediaService::AddRoomRequest>(Arena*);
template<> ::mediaService::AddRoomResponse* Arena::CreateMaybeMessage<::mediaService::AddRoomResponse>(Arena*);
template<> ::mediaService::DelRoomRequest* Arena::CreateMaybeMessage<::mediaService::DelRoomRequest>(Arena*);
template<> ::mediaService::DelRoomResponse* Arena::CreateMaybeMessage<::mediaService::DelRoomResponse>(Arena*);
template<> ::mediaService::RtpHeader* Arena::CreateMaybeMessage<::mediaService::RtpHeader>(Arena*);
template<> ::mediaService::RtpPacket* Arena::CreateMaybeMessage<::mediaService::RtpPacket>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mediaService {

enum MessageID : int {
  ID_UNKNOW = 0,
  ID_AddRoomRequest = 1,
  ID_AddRoomResponse = 2,
  ID_DelRoomRequest = 3,
  ID_DelRoomResponse = 4,
  ID_TransRtpPacket = 5,
  ID_RtspRequest = 6,
  ID_RtspResponse = 7,
  MessageID_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MessageID_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MessageID_IsValid(int value);
constexpr MessageID MessageID_MIN = ID_UNKNOW;
constexpr MessageID MessageID_MAX = ID_RtspResponse;
constexpr int MessageID_ARRAYSIZE = MessageID_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageID_descriptor();
template<typename T>
inline const std::string& MessageID_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MessageID>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MessageID_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MessageID_descriptor(), enum_t_value);
}
inline bool MessageID_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MessageID* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MessageID>(
    MessageID_descriptor(), name, value);
}
// ===================================================================

class AddRoomRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediaService.AddRoomRequest) */ {
 public:
  inline AddRoomRequest() : AddRoomRequest(nullptr) {}
  ~AddRoomRequest() override;
  explicit constexpr AddRoomRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddRoomRequest(const AddRoomRequest& from);
  AddRoomRequest(AddRoomRequest&& from) noexcept
    : AddRoomRequest() {
    *this = ::std::move(from);
  }

  inline AddRoomRequest& operator=(const AddRoomRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddRoomRequest& operator=(AddRoomRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddRoomRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddRoomRequest* internal_default_instance() {
    return reinterpret_cast<const AddRoomRequest*>(
               &_AddRoomRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AddRoomRequest& a, AddRoomRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddRoomRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddRoomRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddRoomRequest* New() const final {
    return new AddRoomRequest();
  }

  AddRoomRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddRoomRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddRoomRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AddRoomRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddRoomRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediaService.AddRoomRequest";
  }
  protected:
  explicit AddRoomRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFidFieldNumber = 1,
  };
  // uint32 fid = 1;
  void clear_fid();
  ::PROTOBUF_NAMESPACE_ID::uint32 fid() const;
  void set_fid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fid() const;
  void _internal_set_fid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mediaService.AddRoomRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mediaService_2eproto;
};
// -------------------------------------------------------------------

class AddRoomResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediaService.AddRoomResponse) */ {
 public:
  inline AddRoomResponse() : AddRoomResponse(nullptr) {}
  ~AddRoomResponse() override;
  explicit constexpr AddRoomResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddRoomResponse(const AddRoomResponse& from);
  AddRoomResponse(AddRoomResponse&& from) noexcept
    : AddRoomResponse() {
    *this = ::std::move(from);
  }

  inline AddRoomResponse& operator=(const AddRoomResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddRoomResponse& operator=(AddRoomResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddRoomResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddRoomResponse* internal_default_instance() {
    return reinterpret_cast<const AddRoomResponse*>(
               &_AddRoomResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AddRoomResponse& a, AddRoomResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddRoomResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddRoomResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddRoomResponse* New() const final {
    return new AddRoomResponse();
  }

  AddRoomResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddRoomResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddRoomResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AddRoomResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddRoomResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediaService.AddRoomResponse";
  }
  protected:
  explicit AddRoomResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFidFieldNumber = 1,
    kResultFieldNumber = 2,
    kFromServerFieldNumber = 3,
  };
  // uint32 fid = 1;
  void clear_fid();
  ::PROTOBUF_NAMESPACE_ID::uint32 fid() const;
  void set_fid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fid() const;
  void _internal_set_fid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 result = 2;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::uint32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 fromServer = 3;
  void clear_fromserver();
  ::PROTOBUF_NAMESPACE_ID::uint32 fromserver() const;
  void set_fromserver(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fromserver() const;
  void _internal_set_fromserver(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mediaService.AddRoomResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 result_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fromserver_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mediaService_2eproto;
};
// -------------------------------------------------------------------

class DelRoomRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediaService.DelRoomRequest) */ {
 public:
  inline DelRoomRequest() : DelRoomRequest(nullptr) {}
  ~DelRoomRequest() override;
  explicit constexpr DelRoomRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DelRoomRequest(const DelRoomRequest& from);
  DelRoomRequest(DelRoomRequest&& from) noexcept
    : DelRoomRequest() {
    *this = ::std::move(from);
  }

  inline DelRoomRequest& operator=(const DelRoomRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DelRoomRequest& operator=(DelRoomRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DelRoomRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DelRoomRequest* internal_default_instance() {
    return reinterpret_cast<const DelRoomRequest*>(
               &_DelRoomRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DelRoomRequest& a, DelRoomRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DelRoomRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DelRoomRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DelRoomRequest* New() const final {
    return new DelRoomRequest();
  }

  DelRoomRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DelRoomRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DelRoomRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DelRoomRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DelRoomRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediaService.DelRoomRequest";
  }
  protected:
  explicit DelRoomRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFidFieldNumber = 1,
  };
  // uint32 fid = 1;
  void clear_fid();
  ::PROTOBUF_NAMESPACE_ID::uint32 fid() const;
  void set_fid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fid() const;
  void _internal_set_fid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mediaService.DelRoomRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mediaService_2eproto;
};
// -------------------------------------------------------------------

class DelRoomResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediaService.DelRoomResponse) */ {
 public:
  inline DelRoomResponse() : DelRoomResponse(nullptr) {}
  ~DelRoomResponse() override;
  explicit constexpr DelRoomResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DelRoomResponse(const DelRoomResponse& from);
  DelRoomResponse(DelRoomResponse&& from) noexcept
    : DelRoomResponse() {
    *this = ::std::move(from);
  }

  inline DelRoomResponse& operator=(const DelRoomResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DelRoomResponse& operator=(DelRoomResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DelRoomResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DelRoomResponse* internal_default_instance() {
    return reinterpret_cast<const DelRoomResponse*>(
               &_DelRoomResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DelRoomResponse& a, DelRoomResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DelRoomResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DelRoomResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DelRoomResponse* New() const final {
    return new DelRoomResponse();
  }

  DelRoomResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DelRoomResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DelRoomResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DelRoomResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DelRoomResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediaService.DelRoomResponse";
  }
  protected:
  explicit DelRoomResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFidFieldNumber = 1,
    kResultFieldNumber = 2,
    kFromServerFieldNumber = 3,
  };
  // uint32 fid = 1;
  void clear_fid();
  ::PROTOBUF_NAMESPACE_ID::uint32 fid() const;
  void set_fid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fid() const;
  void _internal_set_fid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 result = 2;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::uint32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 fromServer = 3;
  void clear_fromserver();
  ::PROTOBUF_NAMESPACE_ID::uint32 fromserver() const;
  void set_fromserver(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fromserver() const;
  void _internal_set_fromserver(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mediaService.DelRoomResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 result_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fromserver_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mediaService_2eproto;
};
// -------------------------------------------------------------------

class RtpHeader final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediaService.RtpHeader) */ {
 public:
  inline RtpHeader() : RtpHeader(nullptr) {}
  ~RtpHeader() override;
  explicit constexpr RtpHeader(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RtpHeader(const RtpHeader& from);
  RtpHeader(RtpHeader&& from) noexcept
    : RtpHeader() {
    *this = ::std::move(from);
  }

  inline RtpHeader& operator=(const RtpHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline RtpHeader& operator=(RtpHeader&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RtpHeader& default_instance() {
    return *internal_default_instance();
  }
  static inline const RtpHeader* internal_default_instance() {
    return reinterpret_cast<const RtpHeader*>(
               &_RtpHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RtpHeader& a, RtpHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(RtpHeader* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RtpHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RtpHeader* New() const final {
    return new RtpHeader();
  }

  RtpHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RtpHeader>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RtpHeader& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RtpHeader& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RtpHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediaService.RtpHeader";
  }
  protected:
  explicit RtpHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFieldNumber = 1,
    kTimestampFieldNumber = 2,
    kSsrcFieldNumber = 3,
  };
  // uint32 base = 1;
  void clear_base();
  ::PROTOBUF_NAMESPACE_ID::uint32 base() const;
  void set_base(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_base() const;
  void _internal_set_base(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 timestamp = 2;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint32 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 ssrc = 3;
  void clear_ssrc();
  ::PROTOBUF_NAMESPACE_ID::uint32 ssrc() const;
  void set_ssrc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ssrc() const;
  void _internal_set_ssrc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mediaService.RtpHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 base_;
  ::PROTOBUF_NAMESPACE_ID::uint32 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ssrc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mediaService_2eproto;
};
// -------------------------------------------------------------------

class RtpPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediaService.RtpPacket) */ {
 public:
  inline RtpPacket() : RtpPacket(nullptr) {}
  ~RtpPacket() override;
  explicit constexpr RtpPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RtpPacket(const RtpPacket& from);
  RtpPacket(RtpPacket&& from) noexcept
    : RtpPacket() {
    *this = ::std::move(from);
  }

  inline RtpPacket& operator=(const RtpPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline RtpPacket& operator=(RtpPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RtpPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const RtpPacket* internal_default_instance() {
    return reinterpret_cast<const RtpPacket*>(
               &_RtpPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RtpPacket& a, RtpPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(RtpPacket* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RtpPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RtpPacket* New() const final {
    return new RtpPacket();
  }

  RtpPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RtpPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RtpPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RtpPacket& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RtpPacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediaService.RtpPacket";
  }
  protected:
  explicit RtpPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // bytes payload = 2;
  void clear_payload();
  const std::string& payload() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_payload(ArgT0&& arg0, ArgT... args);
  std::string* mutable_payload();
  PROTOBUF_MUST_USE_RESULT std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // .mediaService.RtpHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::mediaService::RtpHeader& header() const;
  PROTOBUF_MUST_USE_RESULT ::mediaService::RtpHeader* release_header();
  ::mediaService::RtpHeader* mutable_header();
  void set_allocated_header(::mediaService::RtpHeader* header);
  private:
  const ::mediaService::RtpHeader& _internal_header() const;
  ::mediaService::RtpHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::mediaService::RtpHeader* header);
  ::mediaService::RtpHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:mediaService.RtpPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  ::mediaService::RtpHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mediaService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AddRoomRequest

// uint32 fid = 1;
inline void AddRoomRequest::clear_fid() {
  fid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AddRoomRequest::_internal_fid() const {
  return fid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AddRoomRequest::fid() const {
  // @@protoc_insertion_point(field_get:mediaService.AddRoomRequest.fid)
  return _internal_fid();
}
inline void AddRoomRequest::_internal_set_fid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  fid_ = value;
}
inline void AddRoomRequest::set_fid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fid(value);
  // @@protoc_insertion_point(field_set:mediaService.AddRoomRequest.fid)
}

// -------------------------------------------------------------------

// AddRoomResponse

// uint32 fid = 1;
inline void AddRoomResponse::clear_fid() {
  fid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AddRoomResponse::_internal_fid() const {
  return fid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AddRoomResponse::fid() const {
  // @@protoc_insertion_point(field_get:mediaService.AddRoomResponse.fid)
  return _internal_fid();
}
inline void AddRoomResponse::_internal_set_fid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  fid_ = value;
}
inline void AddRoomResponse::set_fid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fid(value);
  // @@protoc_insertion_point(field_set:mediaService.AddRoomResponse.fid)
}

// uint32 result = 2;
inline void AddRoomResponse::clear_result() {
  result_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AddRoomResponse::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AddRoomResponse::result() const {
  // @@protoc_insertion_point(field_get:mediaService.AddRoomResponse.result)
  return _internal_result();
}
inline void AddRoomResponse::_internal_set_result(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  result_ = value;
}
inline void AddRoomResponse::set_result(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:mediaService.AddRoomResponse.result)
}

// uint32 fromServer = 3;
inline void AddRoomResponse::clear_fromserver() {
  fromserver_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AddRoomResponse::_internal_fromserver() const {
  return fromserver_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AddRoomResponse::fromserver() const {
  // @@protoc_insertion_point(field_get:mediaService.AddRoomResponse.fromServer)
  return _internal_fromserver();
}
inline void AddRoomResponse::_internal_set_fromserver(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  fromserver_ = value;
}
inline void AddRoomResponse::set_fromserver(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fromserver(value);
  // @@protoc_insertion_point(field_set:mediaService.AddRoomResponse.fromServer)
}

// -------------------------------------------------------------------

// DelRoomRequest

// uint32 fid = 1;
inline void DelRoomRequest::clear_fid() {
  fid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DelRoomRequest::_internal_fid() const {
  return fid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DelRoomRequest::fid() const {
  // @@protoc_insertion_point(field_get:mediaService.DelRoomRequest.fid)
  return _internal_fid();
}
inline void DelRoomRequest::_internal_set_fid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  fid_ = value;
}
inline void DelRoomRequest::set_fid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fid(value);
  // @@protoc_insertion_point(field_set:mediaService.DelRoomRequest.fid)
}

// -------------------------------------------------------------------

// DelRoomResponse

// uint32 fid = 1;
inline void DelRoomResponse::clear_fid() {
  fid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DelRoomResponse::_internal_fid() const {
  return fid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DelRoomResponse::fid() const {
  // @@protoc_insertion_point(field_get:mediaService.DelRoomResponse.fid)
  return _internal_fid();
}
inline void DelRoomResponse::_internal_set_fid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  fid_ = value;
}
inline void DelRoomResponse::set_fid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fid(value);
  // @@protoc_insertion_point(field_set:mediaService.DelRoomResponse.fid)
}

// uint32 result = 2;
inline void DelRoomResponse::clear_result() {
  result_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DelRoomResponse::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DelRoomResponse::result() const {
  // @@protoc_insertion_point(field_get:mediaService.DelRoomResponse.result)
  return _internal_result();
}
inline void DelRoomResponse::_internal_set_result(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  result_ = value;
}
inline void DelRoomResponse::set_result(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:mediaService.DelRoomResponse.result)
}

// uint32 fromServer = 3;
inline void DelRoomResponse::clear_fromserver() {
  fromserver_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DelRoomResponse::_internal_fromserver() const {
  return fromserver_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DelRoomResponse::fromserver() const {
  // @@protoc_insertion_point(field_get:mediaService.DelRoomResponse.fromServer)
  return _internal_fromserver();
}
inline void DelRoomResponse::_internal_set_fromserver(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  fromserver_ = value;
}
inline void DelRoomResponse::set_fromserver(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fromserver(value);
  // @@protoc_insertion_point(field_set:mediaService.DelRoomResponse.fromServer)
}

// -------------------------------------------------------------------

// RtpHeader

// uint32 base = 1;
inline void RtpHeader::clear_base() {
  base_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RtpHeader::_internal_base() const {
  return base_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RtpHeader::base() const {
  // @@protoc_insertion_point(field_get:mediaService.RtpHeader.base)
  return _internal_base();
}
inline void RtpHeader::_internal_set_base(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  base_ = value;
}
inline void RtpHeader::set_base(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_base(value);
  // @@protoc_insertion_point(field_set:mediaService.RtpHeader.base)
}

// uint32 timestamp = 2;
inline void RtpHeader::clear_timestamp() {
  timestamp_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RtpHeader::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RtpHeader::timestamp() const {
  // @@protoc_insertion_point(field_get:mediaService.RtpHeader.timestamp)
  return _internal_timestamp();
}
inline void RtpHeader::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  timestamp_ = value;
}
inline void RtpHeader::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:mediaService.RtpHeader.timestamp)
}

// uint32 ssrc = 3;
inline void RtpHeader::clear_ssrc() {
  ssrc_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RtpHeader::_internal_ssrc() const {
  return ssrc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RtpHeader::ssrc() const {
  // @@protoc_insertion_point(field_get:mediaService.RtpHeader.ssrc)
  return _internal_ssrc();
}
inline void RtpHeader::_internal_set_ssrc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ssrc_ = value;
}
inline void RtpHeader::set_ssrc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ssrc(value);
  // @@protoc_insertion_point(field_set:mediaService.RtpHeader.ssrc)
}

// -------------------------------------------------------------------

// RtpPacket

// .mediaService.RtpHeader header = 1;
inline bool RtpPacket::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool RtpPacket::has_header() const {
  return _internal_has_header();
}
inline void RtpPacket::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::mediaService::RtpHeader& RtpPacket::_internal_header() const {
  const ::mediaService::RtpHeader* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::mediaService::RtpHeader&>(
      ::mediaService::_RtpHeader_default_instance_);
}
inline const ::mediaService::RtpHeader& RtpPacket::header() const {
  // @@protoc_insertion_point(field_get:mediaService.RtpPacket.header)
  return _internal_header();
}
inline void RtpPacket::unsafe_arena_set_allocated_header(
    ::mediaService::RtpHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediaService.RtpPacket.header)
}
inline ::mediaService::RtpHeader* RtpPacket::release_header() {
  
  ::mediaService::RtpHeader* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mediaService::RtpHeader* RtpPacket::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:mediaService.RtpPacket.header)
  
  ::mediaService::RtpHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::mediaService::RtpHeader* RtpPacket::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediaService::RtpHeader>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::mediaService::RtpHeader* RtpPacket::mutable_header() {
  ::mediaService::RtpHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:mediaService.RtpPacket.header)
  return _msg;
}
inline void RtpPacket::set_allocated_header(::mediaService::RtpHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::mediaService::RtpHeader>::GetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:mediaService.RtpPacket.header)
}

// bytes payload = 2;
inline void RtpPacket::clear_payload() {
  payload_.ClearToEmpty();
}
inline const std::string& RtpPacket::payload() const {
  // @@protoc_insertion_point(field_get:mediaService.RtpPacket.payload)
  return _internal_payload();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RtpPacket::set_payload(ArgT0&& arg0, ArgT... args) {
 
 payload_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mediaService.RtpPacket.payload)
}
inline std::string* RtpPacket::mutable_payload() {
  std::string* _s = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:mediaService.RtpPacket.payload)
  return _s;
}
inline const std::string& RtpPacket::_internal_payload() const {
  return payload_.Get();
}
inline void RtpPacket::_internal_set_payload(const std::string& value) {
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RtpPacket::_internal_mutable_payload() {
  
  return payload_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RtpPacket::release_payload() {
  // @@protoc_insertion_point(field_release:mediaService.RtpPacket.payload)
  return payload_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RtpPacket::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    
  } else {
    
  }
  payload_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:mediaService.RtpPacket.payload)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mediaService

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mediaService::MessageID> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mediaService::MessageID>() {
  return ::mediaService::MessageID_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mediaService_2eproto
